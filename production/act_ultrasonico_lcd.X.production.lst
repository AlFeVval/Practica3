

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Thu Sep 30 12:38:54 2021

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=2
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=2
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=2
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=2
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=2
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=2
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=2
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	text56,global,reloc=2,class=CODE,delta=1
    70                           	psect	text57,global,reloc=2,class=CODE,delta=1
    71                           	psect	text58,global,reloc=2,class=CODE,delta=1
    72                           	psect	text59,global,reloc=2,class=CODE,delta=1
    73                           	psect	text60,global,reloc=2,class=CODE,delta=1
    74                           	psect	text61,global,reloc=2,class=CODE,delta=1
    75                           	psect	text62,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    79                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           ; Version 1.43
    82                           ; Generated 25/07/2017 GMT
    83                           ; 
    84                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    85                           ; All rights reserved.
    86                           ; 
    87                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    88                           ; 
    89                           ; Redistribution and use in source and binary forms, with or without modification, are
    90                           ; permitted provided that the following conditions are met:
    91                           ; 
    92                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    93                           ;        conditions and the following disclaimer.
    94                           ; 
    95                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    96                           ;        of conditions and the following disclaimer in the documentation and/or other
    97                           ;        materials provided with the distribution.
    98                           ; 
    99                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   100                           ;        software without specific prior written permission.
   101                           ; 
   102                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   103                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   104                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   105                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   106                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   107                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   108                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   109                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   110                           ; 
   111                           ; 
   112                           ; Code-generator required, PIC18F4550 Definitions
   113                           ; 
   114                           ; SFR Addresses
   115  0000                     
   116                           	psect	smallconst
   117  000800                     __psmallconst:
   118                           	opt stack 0
   119  000800  00                 	db	0
   120  000801                     _dpowers:
   121                           	opt stack 0
   122  000801  0001               	dw	1
   123  000803  0000               	dw	0
   124  000805  000A               	dw	10
   125  000807  0000               	dw	0
   126  000809  0064               	dw	100
   127  00080B  0000               	dw	0
   128  00080D  03E8               	dw	1000
   129  00080F  0000               	dw	0
   130  000811  2710               	dw	10000
   131  000813  0000               	dw	0
   132  000815  86A0               	dw	34464
   133  000817  0001               	dw	1
   134  000819  4240               	dw	16960
   135  00081B  000F               	dw	15
   136  00081D  9680               	dw	38528
   137  00081F  0098               	dw	152
   138  000821  E100               	dw	57600
   139  000823  05F5               	dw	1525
   140  000825  CA00               	dw	51712
   141  000827  3B9A               	dw	15258
   142  000829                     __end_of_dpowers:
   143                           	opt stack 0
   144  000829                     __powers_:
   145                           	opt stack 0
   146  000829  00                 	db	0
   147  00082A  80                 	db	128
   148  00082B  3F                 	db	63
   149  00082C  00                 	db	0
   150  00082D  20                 	db	32
   151  00082E  41                 	db	65
   152  00082F  00                 	db	0
   153  000830  C8                 	db	200
   154  000831  42                 	db	66
   155  000832  00                 	db	0
   156  000833  7A                 	db	122
   157  000834  44                 	db	68
   158  000835  40                 	db	64
   159  000836  1C                 	db	28
   160  000837  46                 	db	70
   161  000838  50                 	db	80
   162  000839  C3                 	db	195
   163  00083A  47                 	db	71
   164  00083B  24                 	db	36
   165  00083C  74                 	db	116
   166  00083D  49                 	db	73
   167  00083E  97                 	db	151
   168  00083F  18                 	db	24
   169  000840  4B                 	db	75
   170  000841  BC                 	db	188
   171  000842  BE                 	db	190
   172  000843  4C                 	db	76
   173  000844  6B                 	db	107
   174  000845  6E                 	db	110
   175  000846  4E                 	db	78
   176  000847  03                 	db	3
   177  000848  15                 	db	21
   178  000849  50                 	db	80
   179  00084A  79                 	db	121
   180  00084B  AD                 	db	173
   181  00084C  60                 	db	96
   182  00084D  F3                 	db	243
   183  00084E  49                 	db	73
   184  00084F  71                 	db	113
   185  000850                     __end_of__powers_:
   186                           	opt stack 0
   187  000850                     __npowers_:
   188                           	opt stack 0
   189  000850  00                 	db	0
   190  000851  80                 	db	128
   191  000852  3F                 	db	63
   192  000853  CD                 	db	205
   193  000854  CC                 	db	204
   194  000855  3D                 	db	61
   195  000856  D7                 	db	215
   196  000857  23                 	db	35
   197  000858  3C                 	db	60
   198  000859  12                 	db	18
   199  00085A  83                 	db	131
   200  00085B  3A                 	db	58
   201  00085C  B7                 	db	183
   202  00085D  D1                 	db	209
   203  00085E  38                 	db	56
   204  00085F  C6                 	db	198
   205  000860  27                 	db	39
   206  000861  37                 	db	55
   207  000862  38                 	db	56
   208  000863  86                 	db	134
   209  000864  35                 	db	53
   210  000865  C0                 	db	192
   211  000866  D6                 	db	214
   212  000867  33                 	db	51
   213  000868  CC                 	db	204
   214  000869  2B                 	db	43
   215  00086A  32                 	db	50
   216  00086B  70                 	db	112
   217  00086C  89                 	db	137
   218  00086D  30                 	db	48
   219  00086E  E7                 	db	231
   220  00086F  DB                 	db	219
   221  000870  2E                 	db	46
   222  000871  E5                 	db	229
   223  000872  3C                 	db	60
   224  000873  1E                 	db	30
   225  000874  42                 	db	66
   226  000875  A2                 	db	162
   227  000876  0D                 	db	13
   228  000877                     __end_of__npowers_:
   229                           	opt stack 0
   230  0000                     _TMR3	set	4018
   231  0000                     _TMR3L	set	4018
   232  0000                     _TMR3H	set	4019
   233  0000                     _T3CON	set	4017
   234  0000                     _T2CONbits	set	4042
   235  0000                     _TMR2	set	4044
   236  0000                     _PR2	set	4043
   237  0000                     _T2CON	set	4042
   238  0000                     _T3CONbits	set	4017
   239  0000                     _CCPR2H	set	4028
   240  0000                     _CCPR2L	set	4027
   241  0000                     _CCP2CON	set	4026
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR1L	set	4046
   244  0000                     _T1CONbits	set	4045
   245  0000                     _T1CON	set	4045
   246  0000                     _TMR0H	set	4055
   247  0000                     _TMR0L	set	4054
   248  0000                     _T0CONbits	set	4053
   249  0000                     _T0CON	set	4053
   250  0000                     _SSPSTATbits	set	4039
   251  0000                     _EEDATA	set	4008
   252  0000                     _EEADR	set	4009
   253  0000                     _EECON2	set	4007
   254  0000                     _EECON1bits	set	4006
   255  0000                     _TABLAT	set	4085
   256  0000                     _TBLPTRL	set	4086
   257  0000                     _TBLPTRH	set	4087
   258  0000                     _TBLPTRU	set	4088
   259  0000                     _OSCTUNE	set	3995
   260  0000                     _OSCCON	set	4051
   261  0000                     _INTCON3bits	set	4080
   262  0000                     _PORTB	set	3969
   263  0000                     _PIR2bits	set	4001
   264  0000                     _PIE2bits	set	4000
   265  0000                     _INTCONbits	set	4082
   266  0000                     _IPR2bits	set	4002
   267  0000                     _INTCON2bits	set	4081
   268  0000                     _IPR1bits	set	3999
   269  0000                     _SSPBUF	set	4041
   270  0000                     _SSPCON2bits	set	4037
   271  0000                     _SSPCON1bits	set	4038
   272  0000                     _SSPCON2	set	4037
   273  0000                     _SSPADD	set	4040
   274  0000                     _SSPCON1	set	4038
   275  0000                     _SSPSTAT	set	4039
   276  0000                     _TXREG1	set	4013
   277  0000                     _RCSTA1bits	set	4011
   278  0000                     _SPBRGH	set	4016
   279  0000                     _SPBRG1	set	4015
   280  0000                     _TXSTA1	set	4012
   281  0000                     _RCSTA1	set	4011
   282  0000                     _BAUDCON	set	4024
   283  0000                     _ADCON0bits	set	4034
   284  0000                     _PIE1bits	set	3997
   285  0000                     _PIR1bits	set	3998
   286  0000                     _ADRESH	set	4036
   287  0000                     _ADRESL	set	4035
   288  0000                     _ADCON2	set	4032
   289  0000                     _ADCON1bits	set	4033
   290  0000                     _ADCON0	set	4034
   291  0000                     _TRISDbits	set	3989
   292  0000                     _TRISD	set	3989
   293  0000                     _PORTD	set	3971
   294  0000                     _LATDbits	set	3980
   295  0000                     _TRISBbits	set	3987
   296  0000                     _PORTBbits	set	3969
   297  0000                     _IPEN	set	32391
   298  000877                     STR_1:
   299  000877  44                 	db	68	;'D'
   300  000878  69                 	db	105	;'i'
   301  000879  73                 	db	115	;'s'
   302  00087A  74                 	db	116	;'t'
   303  00087B  61                 	db	97	;'a'
   304  00087C  6E                 	db	110	;'n'
   305  00087D  63                 	db	99	;'c'
   306  00087E  69                 	db	105	;'i'
   307  00087F  61                 	db	97	;'a'
   308  000880  3A                 	db	58	;':'
   309  000881  20                 	db	32
   310  000882  00                 	db	0
   311  000883                     STR_2:
   312  000883  25                 	db	37
   313  000884  2E                 	db	46
   314  000885  32                 	db	50	;'2'
   315  000886  66                 	db	102	;'f'
   316  000887  20                 	db	32
   317  000888  63                 	db	99	;'c'
   318  000889  6D                 	db	109	;'m'
   319  00088A  20                 	db	32
   320  00088B  20                 	db	32
   321  00088C  20                 	db	32
   322  00088D  00                 	db	0
   323                           
   324                           ; #config settings
   325  00088E  00                 	db	0	; dummy byte at the end
   326  0000                     
   327                           	psect	cinit
   328  002D36                     __pcinit:
   329                           	opt stack 0
   330  002D36                     start_initialization:
   331                           	opt stack 0
   332  002D36                     __initialization:
   333                           	opt stack 0
   334                           
   335                           ; Clear objects allocated to BANK1 (50 bytes)
   336  002D36  EE01  F000         	lfsr	0,__pbssBANK1
   337  002D3A  0E32               	movlw	50
   338  002D3C                     clear_0:
   339  002D3C  6AEE               	clrf	postinc0,c
   340  002D3E  06E8               	decf	wreg,f,c
   341  002D40  E1FD               	bnz	clear_0
   342                           
   343                           ; Clear objects allocated to BANK0 (42 bytes)
   344  002D42  EE00  F0CF         	lfsr	0,__pbssBANK0
   345  002D46  0E2A               	movlw	42
   346  002D48                     clear_1:
   347  002D48  6AEE               	clrf	postinc0,c
   348  002D4A  06E8               	decf	wreg,f,c
   349  002D4C  E1FD               	bnz	clear_1
   350                           
   351                           ; Clear objects allocated to COMRAM (31 bytes)
   352  002D4E  EE00  F021         	lfsr	0,__pbssCOMRAM
   353  002D52  0E1F               	movlw	31
   354  002D54                     clear_2:
   355  002D54  6AEE               	clrf	postinc0,c
   356  002D56  06E8               	decf	wreg,f,c
   357  002D58  E1FD               	bnz	clear_2
   358  002D5A                     end_of_initialization:
   359                           	opt stack 0
   360  002D5A                     __end_of__initialization:
   361                           	opt stack 0
   362  002D5A  9040               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   363  002D5C  9240               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   364  002D5E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   365  002D60  6EF8               	movwf	tblptru,c
   366  002D62  0100               	movlb	0
   367  002D64  EF9E  F013         	goto	_main	;jump to C main() function
   368                           tblptru	equ	0xFF8
   369                           postinc0	equ	0xFEE
   370                           wreg	equ	0xFE8
   371                           
   372                           	psect	bssCOMRAM
   373  000021                     __pbssCOMRAM:
   374                           	opt stack 0
   375  000021                     _i2c1_object:
   376                           	opt stack 0
   377  000021                     	ds	7
   378  000028                     _timer3ReloadVal:
   379                           	opt stack 0
   380  000028                     	ds	2
   381  00002A                     _timer1ReloadVal:
   382                           	opt stack 0
   383  00002A                     	ds	2
   384  00002C                     _timer0ReloadVal:
   385                           	opt stack 0
   386  00002C                     	ds	2
   387  00002E                     _p_i2c1_trb_current:
   388                           	opt stack 0
   389  00002E                     	ds	2
   390  000030                     _timer0ReloadVal8bit:
   391                           	opt stack 0
   392  000030                     	ds	1
   393  000031                     I2C1_ISR@i2c_10bit_address_restart:
   394                           	opt stack 0
   395  000031                     	ds	1
   396  000032                     I2C1_ISR@i2c_bytes_left:
   397                           	opt stack 0
   398  000032                     	ds	1
   399  000033                     _i2c1_trb_count:
   400                           	opt stack 0
   401  000033                     	ds	1
   402  000034                     _i2c1_state:
   403                           	opt stack 0
   404  000034                     	ds	1
   405  000035                     _eusart1RxCount:
   406                           	opt stack 0
   407  000035                     	ds	1
   408  000036                     _eusart1RxTail:
   409                           	opt stack 0
   410  000036                     	ds	1
   411  000037                     _eusart1TxBufferRemaining:
   412                           	opt stack 0
   413  000037                     	ds	1
   414  000038                     _eusart1TxTail:
   415                           	opt stack 0
   416  000038                     	ds	1
   417  000039                     _eusart1TxHead:
   418                           	opt stack 0
   419  000039                     	ds	1
   420  00003A                     _Timer0_Flag:
   421                           	opt stack 0
   422  00003A                     	ds	1
   423  00003B                     _Timer0_Counter:
   424                           	opt stack 0
   425  00003B                     	ds	1
   426  00003C                     _INT0Flag:
   427                           	opt stack 0
   428  00003C                     	ds	1
   429  00003D                     WriteSWSPI@input:
   430                           	opt stack 0
   431  00003D                     	ds	1
   432  00003E                     I2C1_ISR@i2c_address:
   433                           	opt stack 0
   434  00003E                     	ds	2
   435                           tblptru	equ	0xFF8
   436                           postinc0	equ	0xFEE
   437                           wreg	equ	0xFE8
   438                           
   439                           	psect	bssBANK0
   440  0000CF                     __pbssBANK0:
   441                           	opt stack 0
   442  0000CF                     _eusart1TxBuffer:
   443                           	opt stack 0
   444  0000CF                     	ds	8
   445  0000D7                     _distancia:
   446                           	opt stack 0
   447  0000D7                     	ds	3
   448  0000DA                     I2C1_ISR@pi2c_buf_ptr:
   449                           	opt stack 0
   450  0000DA                     	ds	2
   451  0000DC                     _p_i2c1_current:
   452                           	opt stack 0
   453  0000DC                     	ds	2
   454  0000DE                     _t:
   455                           	opt stack 0
   456  0000DE                     	ds	2
   457  0000E0                     _TMR3_InterruptHandler:
   458                           	opt stack 0
   459  0000E0                     	ds	2
   460  0000E2                     _TMR2_InterruptHandler:
   461                           	opt stack 0
   462  0000E2                     	ds	2
   463  0000E4                     _TMR1_InterruptHandler:
   464                           	opt stack 0
   465  0000E4                     	ds	2
   466  0000E6                     	ds	1
   467  0000E7                     I2C1_MasterRead@trBlock:
   468                           	opt stack 0
   469  0000E7                     	ds	6
   470  0000ED                     I2C1_MasterWrite@trBlock:
   471                           	opt stack 0
   472  0000ED                     	ds	6
   473  0000F3                     _i2c1_tr_queue:
   474                           	opt stack 0
   475  0000F3                     	ds	6
   476                           tblptru	equ	0xFF8
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           
   480                           	psect	bssBANK1
   481  000100                     __pbssBANK1:
   482                           	opt stack 0
   483  000100                     _eusart1RxBuffer:
   484                           	opt stack 0
   485  000100                     	ds	50
   486                           tblptru	equ	0xFF8
   487                           postinc0	equ	0xFEE
   488                           wreg	equ	0xFE8
   489                           
   490                           	psect	cstackBANK0
   491  000060                     __pcstackBANK0:
   492                           	opt stack 0
   493  000060                     ??_SetDDRamAddr:
   494  000060                     ?___awmod:
   495                           	opt stack 0
   496  000060                     ?___ftpack:
   497                           	opt stack 0
   498  000060                     ?___ftneg:
   499                           	opt stack 0
   500  000060                     ?__tdiv_to_l_:
   501                           	opt stack 0
   502  000060                     ?__div_to_l_:
   503                           	opt stack 0
   504  000060                     ?___lldiv:
   505                           	opt stack 0
   506  000060                     ?___llmod:
   507                           	opt stack 0
   508  000060                     Delay10KTCYx@unit:
   509                           	opt stack 0
   510  000060                     _isdigit$3265:
   511                           	opt stack 0
   512  000060                     putrsXLCD@buffer:
   513                           	opt stack 0
   514  000060                     putsXLCD@buffer:
   515                           	opt stack 0
   516  000060                     TMR0_WriteTimer@timerVal:
   517                           	opt stack 0
   518  000060                     ___awmod@dividend:
   519                           	opt stack 0
   520  000060                     __div_to_l_@f1:
   521                           	opt stack 0
   522  000060                     ___ftpack@arg:
   523                           	opt stack 0
   524  000060                     __tdiv_to_l_@f1:
   525                           	opt stack 0
   526  000060                     ___ftge@ff1:
   527                           	opt stack 0
   528  000060                     ___ftneg@f1:
   529                           	opt stack 0
   530  000060                     ___lldiv@dividend:
   531                           	opt stack 0
   532  000060                     ___llmod@dividend:
   533                           	opt stack 0
   534                           
   535                           ; 4 bytes @ 0x0
   536  000060                     	ds	1
   537  000061                     isdigit@c:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x1
   541  000061                     	ds	1
   542  000062                     ___awmod@divisor:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x2
   546  000062                     	ds	1
   547  000063                     OpenXLCD@lcdtype:
   548                           	opt stack 0
   549  000063                     ___ftpack@exp:
   550                           	opt stack 0
   551  000063                     __div_to_l_@f2:
   552                           	opt stack 0
   553  000063                     __tdiv_to_l_@f2:
   554                           	opt stack 0
   555  000063                     ___ftge@ff2:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x3
   559  000063                     	ds	1
   560  000064                     ___awmod@counter:
   561                           	opt stack 0
   562  000064                     ___ftpack@sign:
   563                           	opt stack 0
   564  000064                     ___lldiv@divisor:
   565                           	opt stack 0
   566  000064                     ___llmod@divisor:
   567                           	opt stack 0
   568                           
   569                           ; 4 bytes @ 0x4
   570  000064                     	ds	1
   571  000065                     ??___ftpack:
   572  000065                     ___awmod@sign:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x5
   576  000065                     	ds	1
   577  000066                     ??__tdiv_to_l_:
   578  000066                     ??___ftge:
   579  000066                     ?___awdiv:
   580                           	opt stack 0
   581  000066                     ___awdiv@dividend:
   582                           	opt stack 0
   583  000066                     __div_to_l_@quot:
   584                           	opt stack 0
   585                           
   586                           ; 4 bytes @ 0x6
   587  000066                     	ds	2
   588  000068                     ?___lltoft:
   589                           	opt stack 0
   590  000068                     ___awdiv@divisor:
   591                           	opt stack 0
   592  000068                     ___lldiv@quotient:
   593                           	opt stack 0
   594  000068                     ___lltoft@c:
   595                           	opt stack 0
   596                           
   597                           ; 4 bytes @ 0x8
   598  000068                     	ds	1
   599  000069                     __tdiv_to_l_@quot:
   600                           	opt stack 0
   601                           
   602                           ; 4 bytes @ 0x9
   603  000069                     	ds	1
   604  00006A                     ___awdiv@counter:
   605                           	opt stack 0
   606  00006A                     __div_to_l_@cntr:
   607                           	opt stack 0
   608                           
   609                           ; 1 bytes @ 0xA
   610  00006A                     	ds	1
   611  00006B                     ___awdiv@sign:
   612                           	opt stack 0
   613  00006B                     __div_to_l_@exp1:
   614                           	opt stack 0
   615                           
   616                           ; 1 bytes @ 0xB
   617  00006B                     	ds	1
   618  00006C                     ??___lltoft:
   619  00006C                     ___lldiv@counter:
   620                           	opt stack 0
   621  00006C                     ___awdiv@quotient:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0xC
   625  00006C                     	ds	1
   626  00006D                     __tdiv_to_l_@cntr:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0xD
   630  00006D                     	ds	1
   631  00006E                     ?___wmul:
   632                           	opt stack 0
   633  00006E                     __tdiv_to_l_@exp1:
   634                           	opt stack 0
   635  00006E                     ___wmul@multiplier:
   636                           	opt stack 0
   637                           
   638                           ; 2 bytes @ 0xE
   639  00006E                     	ds	2
   640  000070                     ___wmul@multiplicand:
   641                           	opt stack 0
   642                           
   643                           ; 2 bytes @ 0x10
   644  000070                     	ds	2
   645  000072                     ___wmul@product:
   646                           	opt stack 0
   647                           
   648                           ; 2 bytes @ 0x12
   649  000072                     	ds	2
   650  000074                     ?___ftmul:
   651                           	opt stack 0
   652  000074                     ___ftmul@f1:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x14
   656  000074                     	ds	3
   657  000077                     ___ftmul@f2:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x17
   661  000077                     	ds	3
   662  00007A                     ??___ftmul:
   663                           
   664                           ; 1 bytes @ 0x1A
   665  00007A                     	ds	3
   666  00007D                     ___ftmul@exp:
   667                           	opt stack 0
   668                           
   669                           ; 1 bytes @ 0x1D
   670  00007D                     	ds	1
   671  00007E                     ___ftmul@f3_as_product:
   672                           	opt stack 0
   673                           
   674                           ; 3 bytes @ 0x1E
   675  00007E                     	ds	3
   676  000081                     ___ftmul@cntr:
   677                           	opt stack 0
   678                           
   679                           ; 1 bytes @ 0x21
   680  000081                     	ds	1
   681  000082                     ___ftmul@sign:
   682                           	opt stack 0
   683                           
   684                           ; 1 bytes @ 0x22
   685  000082                     	ds	1
   686  000083                     ?_fround:
   687                           	opt stack 0
   688  000083                     ?_scale:
   689                           	opt stack 0
   690                           
   691                           ; 3 bytes @ 0x23
   692  000083                     	ds	3
   693  000086                     _fround$3832:
   694                           	opt stack 0
   695  000086                     _scale$3833:
   696                           	opt stack 0
   697                           
   698                           ; 3 bytes @ 0x26
   699  000086                     	ds	3
   700  000089                     scale@scl:
   701                           	opt stack 0
   702  000089                     _fround$3831:
   703                           	opt stack 0
   704                           
   705                           ; 3 bytes @ 0x29
   706  000089                     	ds	1
   707  00008A                     ?___fttol:
   708                           	opt stack 0
   709  00008A                     ___fttol@f1:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0x2A
   713  00008A                     	ds	2
   714  00008C                     fround@prec:
   715                           	opt stack 0
   716                           
   717                           ; 1 bytes @ 0x2C
   718  00008C                     	ds	1
   719  00008D                     ?___ftadd:
   720                           	opt stack 0
   721  00008D                     ___ftadd@f1:
   722                           	opt stack 0
   723                           
   724                           ; 3 bytes @ 0x2D
   725  00008D                     	ds	1
   726  00008E                     ??___fttol:
   727                           
   728                           ; 1 bytes @ 0x2E
   729  00008E                     	ds	2
   730  000090                     ___ftadd@f2:
   731                           	opt stack 0
   732                           
   733                           ; 3 bytes @ 0x30
   734  000090                     	ds	3
   735  000093                     ??___ftadd:
   736  000093                     ___fttol@sign1:
   737                           	opt stack 0
   738                           
   739                           ; 1 bytes @ 0x33
   740  000093                     	ds	1
   741  000094                     ___fttol@lval:
   742                           	opt stack 0
   743                           
   744                           ; 4 bytes @ 0x34
   745  000094                     	ds	2
   746  000096                     ___ftadd@sign:
   747                           	opt stack 0
   748                           
   749                           ; 1 bytes @ 0x36
   750  000096                     	ds	1
   751  000097                     ___ftadd@exp2:
   752                           	opt stack 0
   753                           
   754                           ; 1 bytes @ 0x37
   755  000097                     	ds	1
   756  000098                     ___ftadd@exp1:
   757                           	opt stack 0
   758  000098                     ___fttol@exp1:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x38
   762  000098                     	ds	1
   763  000099                     ?___ftsub:
   764                           	opt stack 0
   765  000099                     ___ftsub@f1:
   766                           	opt stack 0
   767                           
   768                           ; 3 bytes @ 0x39
   769  000099                     	ds	3
   770  00009C                     ___ftsub@f2:
   771                           	opt stack 0
   772                           
   773                           ; 3 bytes @ 0x3C
   774  00009C                     	ds	3
   775  00009F                     ?_sprintf:
   776                           	opt stack 0
   777  00009F                     sprintf@sp:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x3F
   781  00009F                     	ds	2
   782  0000A1                     sprintf@f:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x41
   786  0000A1                     	ds	5
   787  0000A6                     ??_sprintf:
   788                           
   789                           ; 1 bytes @ 0x46
   790  0000A6                     	ds	6
   791  0000AC                     _sprintf$3834:
   792                           	opt stack 0
   793                           
   794                           ; 3 bytes @ 0x4C
   795  0000AC                     	ds	3
   796  0000AF                     sprintf@ap:
   797                           	opt stack 0
   798                           
   799                           ; 2 bytes @ 0x4F
   800  0000AF                     	ds	2
   801  0000B1                     sprintf@flag:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x51
   805  0000B1                     	ds	2
   806  0000B3                     sprintf@val:
   807                           	opt stack 0
   808                           
   809                           ; 4 bytes @ 0x53
   810  0000B3                     	ds	4
   811  0000B7                     sprintf@exp:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x57
   815  0000B7                     	ds	2
   816  0000B9                     sprintf@tmpval:
   817                           	opt stack 0
   818                           
   819                           ; 4 bytes @ 0x59
   820  0000B9                     	ds	4
   821  0000BD                     sprintf@prec:
   822                           	opt stack 0
   823                           
   824                           ; 2 bytes @ 0x5D
   825  0000BD                     	ds	2
   826  0000BF                     sprintf@fval:
   827                           	opt stack 0
   828                           
   829                           ; 3 bytes @ 0x5F
   830  0000BF                     	ds	3
   831  0000C2                     sprintf@c:
   832                           	opt stack 0
   833                           
   834                           ; 1 bytes @ 0x62
   835  0000C2                     	ds	1
   836  0000C3                     ??_main:
   837                           
   838                           ; 1 bytes @ 0x63
   839  0000C3                     	ds	2
   840  0000C5                     main@dist:
   841                           	opt stack 0
   842                           
   843                           ; 10 bytes @ 0x65
   844  0000C5                     	ds	10
   845                           tblptru	equ	0xFF8
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           
   849                           	psect	cstackCOMRAM
   850  000001                     __pcstackCOMRAM:
   851                           	opt stack 0
   852  000001                     ??_I2C1_ISR:
   853  000001                     ?i2___ftpack:
   854                           	opt stack 0
   855  000001                     TMR0_Read8bitTimer@readVal:
   856                           	opt stack 0
   857  000001                     TMR0_Write8bitTimer@timerVal:
   858                           	opt stack 0
   859  000001                     i2___ftpack@arg:
   860                           	opt stack 0
   861                           
   862                           ; 3 bytes @ 0x0
   863  000001                     	ds	3
   864  000004                     i2___ftpack@exp:
   865                           	opt stack 0
   866                           
   867                           ; 1 bytes @ 0x3
   868  000004                     	ds	1
   869  000005                     i2___ftpack@sign:
   870                           	opt stack 0
   871                           
   872                           ; 1 bytes @ 0x4
   873  000005                     	ds	1
   874  000006                     ??i2___ftpack:
   875                           
   876                           ; 1 bytes @ 0x5
   877  000006                     	ds	3
   878  000009                     ?___lwtoft:
   879                           	opt stack 0
   880  000009                     ___lwtoft@c:
   881                           	opt stack 0
   882                           
   883                           ; 2 bytes @ 0x8
   884  000009                     	ds	3
   885  00000C                     ??_PIN_MANAGER_INT0:
   886  00000C                     
   887                           ; 1 bytes @ 0xB
   888  00000C                     	ds	1
   889  00000D                     ??_INTERRUPT_InterruptManager:
   890                           
   891                           ; 1 bytes @ 0xC
   892  00000D                     	ds	18
   893  00001F                     INTERRUPT_InterruptManager@__portb__:
   894                           	opt stack 0
   895                           
   896                           ; 1 bytes @ 0x1E
   897  00001F                     	ds	1
   898  000020                     ??_DelayPORXLCD:
   899  000020                     ??_Delay10KTCYx:
   900  000020                     ??_isdigit:
   901  000020                     SetDDRamAddr@DDaddr:
   902                           	opt stack 0
   903  000020                     WriteCmdXLCD@cmd:
   904                           	opt stack 0
   905  000020                     WriteDataXLCD@data:
   906                           	opt stack 0
   907  000020                     ___llmod@counter:
   908                           	opt stack 0
   909  000020                     ___lltoft@exp:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x1F
   913  000020                     	ds	1
   914  000021                     tblptru	equ	0xFF8
   915                           postinc0	equ	0xFEE
   916                           wreg	equ	0xFE8
   917                           
   918                           ; 1 bytes @ 0x20
   919 ;;
   920 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   921 ;;
   922 ;; *************** function _main *****************
   923 ;; Defined at:
   924 ;;		line 56 in file "main.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;  dist           10  101[BANK0 ] unsigned char [10]
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   938 ;;      Params:         0       0       0       0       0       0       0       0       0
   939 ;;      Locals:         0      10       0       0       0       0       0       0       0
   940 ;;      Temps:          0       2       0       0       0       0       0       0       0
   941 ;;      Totals:         0      12       0       0       0       0       0       0       0
   942 ;;Total ram usage:       12 bytes
   943 ;; Hardware stack levels required when called:    9
   944 ;; This function calls:
   945 ;;		_BusyXLCD
   946 ;;		_SYSTEM_Initialize
   947 ;;		_SetDDRamAddr
   948 ;;		_putrsXLCD
   949 ;;		_putsXLCD
   950 ;;		_sprintf
   951 ;; This function is called by:
   952 ;;		Startup code after reset
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           	psect	text0
   957  00273C                     __ptext0:
   958                           	opt stack 0
   959  00273C                     _main:
   960                           	opt stack 22
   961                           
   962                           ;main.c: 58: unsigned char dist[10];
   963                           ;main.c: 60: SYSTEM_Initialize();
   964                           
   965                           ;incstack = 0
   966  00273C  EC6D  F017         	call	_SYSTEM_Initialize	;wreg free
   967                           
   968                           ;main.c: 64: (INTCONbits.GIE = 1);
   969  002740  8EF2               	bsf	intcon,7,c	;volatile
   970                           
   971                           ;main.c: 67: (INTCONbits.PEIE = 1);
   972  002742  8CF2               	bsf	intcon,6,c	;volatile
   973  002744  EC48  F016         	call	_BusyXLCD	;wreg free
   974  002748  0900               	iorlw	0
   975  00274A  A4D8               	btfss	status,2,c
   976  00274C  D7FB               	goto	l612
   977                           
   978                           ;main.c: 77: putrsXLCD("Distancia: ");
   979  00274E  0E77               	movlw	low STR_1
   980  002750  0100               	movlb	0	; () banked
   981  002752  6F60               	movwf	putrsXLCD@buffer& (0+255),b
   982  002754  0E08               	movlw	high STR_1
   983  002756  0100               	movlb	0	; () banked
   984  002758  6F61               	movwf	(putrsXLCD@buffer+1)& (0+255),b
   985  00275A  EC80  F016         	call	_putrsXLCD	;wreg free
   986  00275E  EC48  F016         	call	_BusyXLCD	;wreg free
   987  002762  0900               	iorlw	0
   988  002764  A4D8               	btfss	status,2,c
   989  002766  D7FB               	goto	l615
   990                           
   991                           ;main.c: 79: SetDDRamAddr(0x40);
   992  002768  0E40               	movlw	64
   993  00276A  EC77  F015         	call	_SetDDRamAddr
   994  00276E                     
   995                           ;main.c: 84: {
   996                           ;main.c: 86: PORTBbits.RB5=1;
   997  00276E  8A81               	bsf	3969,5,c	;volatile
   998                           
   999                           ;main.c: 87: _delay((unsigned long)((10)*(4000000ul/4000000.0)));
  1000  002770  0E03               	movlw	3
  1001  002772                     u7037:
  1002  002772  2EE8               	decfsz	wreg,f,c
  1003  002774  D7FE               	bra	u7037
  1004  002776  F000               	nop	
  1005                           
  1006                           ;main.c: 88: PORTBbits.RB5=0;
  1007  002778  9A81               	bcf	3969,5,c	;volatile
  1008  00277A  EC48  F016         	call	_BusyXLCD	;wreg free
  1009  00277E  0900               	iorlw	0
  1010  002780  A4D8               	btfss	status,2,c
  1011  002782  D7FB               	goto	l619
  1012                           
  1013                           ;main.c: 95: SetDDRamAddr(0x40);
  1014  002784  0E40               	movlw	64
  1015  002786  EC77  F015         	call	_SetDDRamAddr
  1016                           
  1017                           ;main.c: 96: sprintf(dist, "%.2f cm   ", distancia);
  1018  00278A  0EC5               	movlw	low main@dist
  1019  00278C  0100               	movlb	0	; () banked
  1020  00278E  6F9F               	movwf	sprintf@sp& (0+255),b
  1021  002790  0E00               	movlw	high main@dist
  1022  002792  0100               	movlb	0	; () banked
  1023  002794  6FA0               	movwf	(sprintf@sp+1)& (0+255),b
  1024  002796  0E83               	movlw	low STR_2
  1025  002798  0100               	movlb	0	; () banked
  1026  00279A  6FA1               	movwf	sprintf@f& (0+255),b
  1027  00279C  0E08               	movlw	high STR_2
  1028  00279E  0100               	movlb	0	; () banked
  1029  0027A0  6FA2               	movwf	(sprintf@f+1)& (0+255),b
  1030  0027A2  C0D7  F0A3         	movff	_distancia,?_sprintf+4
  1031  0027A6  C0D8  F0A4         	movff	_distancia+1,?_sprintf+5
  1032  0027AA  C0D9  F0A5         	movff	_distancia+2,?_sprintf+6
  1033  0027AE  EC48  F004         	call	_sprintf	;wreg free
  1034  0027B2  EC48  F016         	call	_BusyXLCD	;wreg free
  1035  0027B6  0900               	iorlw	0
  1036  0027B8  A4D8               	btfss	status,2,c
  1037  0027BA  D7FB               	goto	l622
  1038                           
  1039                           ;main.c: 99: putsXLCD(dist);
  1040  0027BC  0EC5               	movlw	low main@dist
  1041  0027BE  0100               	movlb	0	; () banked
  1042  0027C0  6F60               	movwf	putsXLCD@buffer& (0+255),b
  1043  0027C2  0E00               	movlw	high main@dist
  1044  0027C4  0100               	movlb	0	; () banked
  1045  0027C6  6F61               	movwf	(putsXLCD@buffer+1)& (0+255),b
  1046  0027C8  ECCC  F016         	call	_putsXLCD	;wreg free
  1047                           
  1048                           ;main.c: 101: _delay((unsigned long)((250)*(4000000ul/4000.0)));
  1049  0027CC  0E02               	movlw	2
  1050  0027CE  0100               	movlb	0	; () banked
  1051  0027D0  6FC4               	movwf	(??_main+1)& (0+255),b
  1052  0027D2  0E45               	movlw	69
  1053  0027D4  0100               	movlb	0	; () banked
  1054  0027D6  6FC3               	movwf	??_main& (0+255),b
  1055  0027D8  0EA9               	movlw	169
  1056  0027DA                     u7047:
  1057  0027DA  2EE8               	decfsz	wreg,f,c
  1058  0027DC  D7FE               	bra	u7047
  1059  0027DE  2FC3               	decfsz	??_main& (0+255),f,b
  1060  0027E0  D7FC               	bra	u7047
  1061  0027E2  2FC4               	decfsz	(??_main+1)& (0+255),f,b
  1062  0027E4  D7FA               	bra	u7047
  1063  0027E6  D000               	nop2	
  1064  0027E8  D7C2               	goto	l617
  1065  0027EA                     __end_of_main:
  1066                           	opt stack 0
  1067                           tblptru	equ	0xFF8
  1068                           intcon	equ	0xFF2
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           status	equ	0xFD8
  1072                           
  1073 ;; *************** function _sprintf *****************
  1074 ;; Defined at:
  1075 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  1076 ;; Parameters:    Size  Location     Type
  1077 ;;  sp              2   63[BANK0 ] PTR unsigned char 
  1078 ;;		 -> main@dist(10), 
  1079 ;;  f               2   65[BANK0 ] PTR const unsigned char 
  1080 ;;		 -> STR_2(11), 
  1081 ;; Auto vars:     Size  Location     Type
  1082 ;;  tmpval          4   89[BANK0 ] struct .
  1083 ;;  val             4   83[BANK0 ] unsigned long 
  1084 ;;  fval            3   95[BANK0 ] unsigned long 
  1085 ;;  cp              3    0        PTR const unsigned char 
  1086 ;;  prec            2   93[BANK0 ] int 
  1087 ;;  exp             2   87[BANK0 ] int 
  1088 ;;  flag            2   81[BANK0 ] unsigned short 
  1089 ;;  ap              2   79[BANK0 ] PTR void [1]
  1090 ;;		 -> ?_sprintf(2), 
  1091 ;;  len             2    0        unsigned int 
  1092 ;;  width           2    0        int 
  1093 ;;  c               1   98[BANK0 ] char 
  1094 ;;  d               1    0        unsigned char 
  1095 ;; Return value:  Size  Location     Type
  1096 ;;                  2   63[BANK0 ] int 
  1097 ;; Registers used:
  1098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1099 ;; Tracked objects:
  1100 ;;		On entry : 0/0
  1101 ;;		On exit  : 0/0
  1102 ;;		Unchanged: 0/0
  1103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1104 ;;      Params:         0       7       0       0       0       0       0       0       0
  1105 ;;      Locals:         0      23       0       0       0       0       0       0       0
  1106 ;;      Temps:          0       6       0       0       0       0       0       0       0
  1107 ;;      Totals:         0      36       0       0       0       0       0       0       0
  1108 ;;Total ram usage:       36 bytes
  1109 ;; Hardware stack levels used:    1
  1110 ;; Hardware stack levels required when called:    7
  1111 ;; This function calls:
  1112 ;;		___awdiv
  1113 ;;		___ftadd
  1114 ;;		___ftge
  1115 ;;		___ftmul
  1116 ;;		___ftneg
  1117 ;;		___ftsub
  1118 ;;		___fttol
  1119 ;;		___lldiv
  1120 ;;		___llmod
  1121 ;;		___lltoft
  1122 ;;		___wmul
  1123 ;;		__div_to_l_
  1124 ;;		__tdiv_to_l_
  1125 ;;		_fround
  1126 ;;		_isdigit
  1127 ;;		_scale
  1128 ;; This function is called by:
  1129 ;;		_main
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           	psect	text1
  1134  000890                     __ptext1:
  1135                           	opt stack 0
  1136  000890                     _sprintf:
  1137                           	opt stack 23
  1138                           
  1139                           ;doprnt.c: 494: va_list ap;
  1140                           ;doprnt.c: 499: signed char c;
  1141                           ;doprnt.c: 501: int width;
  1142                           ;doprnt.c: 504: int prec;
  1143                           ;doprnt.c: 508: unsigned short flag;
  1144                           ;doprnt.c: 515: char d;
  1145                           ;doprnt.c: 516: double fval;
  1146                           ;doprnt.c: 517: int exp;
  1147                           ;doprnt.c: 523: union {
  1148                           ;doprnt.c: 524: unsigned long vd;
  1149                           ;doprnt.c: 525: double integ;
  1150                           ;doprnt.c: 526: } tmpval;
  1151                           ;doprnt.c: 528: unsigned long val;
  1152                           ;doprnt.c: 529: unsigned len;
  1153                           ;doprnt.c: 530: const char * cp;
  1154                           ;doprnt.c: 533: *ap = __va_start();
  1155                           
  1156                           ;incstack = 0
  1157  000890  0EA3               	movlw	low (?_sprintf+4)
  1158  000892  0100               	movlb	0	; () banked
  1159  000894  6FAF               	movwf	sprintf@ap& (0+255),b
  1160  000896  0E00               	movlw	high (?_sprintf+4)
  1161  000898  0100               	movlb	0	; () banked
  1162  00089A  6FB0               	movwf	(sprintf@ap+1)& (0+255),b
  1163                           
  1164                           ;doprnt.c: 536: while(c = *f++) {
  1165  00089C  D3F5               	goto	l1652
  1166  00089E                     
  1167                           ; BSR set to: 0
  1168                           ;doprnt.c: 538: if(c != '%')
  1169                           
  1170                           ; BSR set to: 0
  1171  00089E  0E25               	movlw	37
  1172  0008A0  0100               	movlb	0	; () banked
  1173  0008A2  19C2               	xorwf	sprintf@c& (0+255),w,b
  1174  0008A4  B4D8               	btfsc	status,2,c
  1175  0008A6  D007               	goto	l1598
  1176                           
  1177                           ; BSR set to: 0
  1178                           ;doprnt.c: 540: {
  1179                           ;doprnt.c: 541: ((*sp++ = (c)));
  1180  0008A8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1181  0008AC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1182  0008B0  C0C2  FFDF         	movff	sprintf@c,indf2
  1183  0008B4  D3E6               	goto	l7036
  1184  0008B6                     l1598:
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;doprnt.c: 543: }
  1188                           ;doprnt.c: 548: flag = 0;
  1189                           
  1190                           ; BSR set to: 0
  1191  0008B6  0E00               	movlw	0
  1192  0008B8  0100               	movlb	0	; () banked
  1193  0008BA  6FB2               	movwf	(sprintf@flag+1)& (0+255),b
  1194  0008BC  0E00               	movlw	0
  1195  0008BE  6FB1               	movwf	sprintf@flag& (0+255),b
  1196                           
  1197                           ; BSR set to: 0
  1198                           ;doprnt.c: 611: if(*f == '.') {
  1199  0008C0  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1200  0008C4  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1201  0008C8                     	if	0	;tblptru may be non-zero
  1202  0008C8                     	endif
  1203  0008C8                     	if	0	;tblptru may be non-zero
  1204  0008C8                     	endif
  1205  0008C8  0008               	tblrd		*
  1206  0008CA  50F5               	movf	tablat,w,c
  1207  0008CC  0A2E               	xorlw	46
  1208  0008CE  A4D8               	btfss	status,2,c
  1209  0008D0  D039               	goto	l1599
  1210                           
  1211                           ; BSR set to: 0
  1212                           ;doprnt.c: 612: flag |= 0x4000;
  1213  0008D2  0100               	movlb	0	; () banked
  1214  0008D4  8DB2               	bsf	(sprintf@flag+1)& (0+255),6,b
  1215                           
  1216                           ;doprnt.c: 613: f++;
  1217  0008D6  0100               	movlb	0	; () banked
  1218  0008D8  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1219  0008DA  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1220                           
  1221                           ; BSR set to: 0
  1222                           ;doprnt.c: 620: {
  1223                           ;doprnt.c: 621: prec = 0;
  1224  0008DC  0E00               	movlw	0
  1225  0008DE  0100               	movlb	0	; () banked
  1226  0008E0  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  1227  0008E2  0E00               	movlw	0
  1228  0008E4  6FBD               	movwf	sprintf@prec& (0+255),b
  1229                           
  1230                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1231  0008E6  D023               	goto	l1600
  1232  0008E8                     
  1233                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1234                           
  1235                           ; BSR set to: 0
  1236  0008E8  C0BD  F06E         	movff	sprintf@prec,___wmul@multiplier
  1237  0008EC  C0BE  F06F         	movff	sprintf@prec+1,___wmul@multiplier+1
  1238  0008F0  0E00               	movlw	0
  1239  0008F2  0100               	movlb	0	; () banked
  1240  0008F4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1241  0008F6  0E0A               	movlw	10
  1242  0008F8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1243  0008FA  EC65  F016         	call	___wmul	;wreg free
  1244  0008FE  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1245  000902  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1246  000906                     	if	0	;tblptru may be non-zero
  1247  000906                     	endif
  1248  000906                     	if	0	;tblptru may be non-zero
  1249  000906                     	endif
  1250  000906  0008               	tblrd		*
  1251  000908  50F5               	movf	tablat,w,c
  1252  00090A  0100               	movlb	0	; () banked
  1253  00090C  276E               	addwf	?___wmul& (0+255),f,b
  1254  00090E  0E00               	movlw	0
  1255  000910  0100               	movlb	0	; () banked
  1256  000912  236F               	addwfc	(?___wmul+1)& (0+255),f,b
  1257  000914  0ED0               	movlw	208
  1258  000916  0100               	movlb	0	; () banked
  1259  000918  256E               	addwf	?___wmul& (0+255),w,b
  1260  00091A  0100               	movlb	0	; () banked
  1261  00091C  6FBD               	movwf	sprintf@prec& (0+255),b
  1262  00091E  0EFF               	movlw	255
  1263  000920  0100               	movlb	0	; () banked
  1264  000922  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  1265  000924  0100               	movlb	0	; () banked
  1266  000926  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  1267                           
  1268                           ; BSR set to: 0
  1269  000928  0100               	movlb	0	; () banked
  1270  00092A  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1271  00092C  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1272  00092E                     l1600:
  1273                           
  1274                           ; BSR set to: 0
  1275                           
  1276                           ; BSR set to: 0
  1277  00092E  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1278  000932  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1279  000936                     	if	0	;tblptru may be non-zero
  1280  000936                     	endif
  1281  000936                     	if	0	;tblptru may be non-zero
  1282  000936                     	endif
  1283  000936  0008               	tblrd		*
  1284  000938  50F5               	movf	tablat,w,c
  1285  00093A  EC12  F017         	call	_isdigit
  1286  00093E  A0D8               	btfss	status,0,c
  1287  000940  D00C               	goto	l1604
  1288  000942  D7D2               	goto	l1601
  1289  000944                     l1599:
  1290                           
  1291                           ;doprnt.c: 626: prec = 0;
  1292  000944  0E00               	movlw	0
  1293  000946  0100               	movlb	0	; () banked
  1294  000948  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  1295  00094A  0E00               	movlw	0
  1296  00094C  6FBD               	movwf	sprintf@prec& (0+255),b
  1297                           
  1298                           ; BSR set to: 0
  1299                           ;doprnt.c: 628: flag |= 0x1000;
  1300  00094E  0100               	movlb	0	; () banked
  1301  000950  89B2               	bsf	(sprintf@flag+1)& (0+255),4,b
  1302                           
  1303                           ; BSR set to: 0
  1304                           ;doprnt.c: 630: }
  1305                           ;doprnt.c: 635: switch(c = *f++) {
  1306  000952  D003               	goto	l1604
  1307  000954                     
  1308                           ; BSR set to: 0
  1309                           ;doprnt.c: 663: flag |= 0x400;
  1310                           
  1311                           ; BSR set to: 0
  1312  000954  0100               	movlb	0	; () banked
  1313  000956  85B2               	bsf	(sprintf@flag+1)& (0+255),2,b
  1314                           
  1315                           ;doprnt.c: 664: break;
  1316  000958  D013               	goto	l1608
  1317  00095A                     l1604:
  1318                           
  1319                           ; BSR set to: 0
  1320  00095A  C0A1  FFF6         	movff	sprintf@f,tblptrl
  1321  00095E  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  1322  000962  0100               	movlb	0	; () banked
  1323  000964  4BA1               	infsnz	sprintf@f& (0+255),f,b
  1324  000966  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  1325  000968                     	if	0	;tblptru may be non-zero
  1326  000968                     	endif
  1327  000968                     	if	0	;tblptru may be non-zero
  1328  000968                     	endif
  1329  000968  0008               	tblrd		*
  1330  00096A  CFF5 F0C2          	movff	tablat,sprintf@c
  1331  00096E  0100               	movlb	0	; () banked
  1332  000970  51C2               	movf	sprintf@c& (0+255),w,b
  1333                           
  1334                           ; Switch size 1, requested type "space"
  1335                           ; Number of cases is 2, Range of values is 0 to 102
  1336                           ; switch strategies available:
  1337                           ; Name         Instructions Cycles
  1338                           ; simple_byte            7     4 (average)
  1339                           ;	Chosen strategy is simple_byte
  1340  000972  0A00               	xorlw	0	; case 0
  1341  000974  B4D8               	btfsc	status,2,c
  1342  000976  D397               	goto	u6970
  1343  000978  0A66               	xorlw	102	; case 102
  1344  00097A  B4D8               	btfsc	status,2,c
  1345  00097C  D7EB               	goto	l1607
  1346  00097E  D384               	goto	l1652
  1347  000980                     l1608:
  1348                           
  1349                           ; BSR set to: 0
  1350                           ;doprnt.c: 825: if(flag & (0x700)) {
  1351                           
  1352                           ; BSR set to: 0
  1353  000980  0E07               	movlw	7
  1354  000982  0100               	movlb	0	; () banked
  1355  000984  15B2               	andwf	(sprintf@flag+1)& (0+255),w,b
  1356  000986  B4D8               	btfsc	status,2,c
  1357  000988  D327               	goto	l1610
  1358                           
  1359                           ; BSR set to: 0
  1360                           ;doprnt.c: 827: if(flag & 0x1000)
  1361  00098A  0100               	movlb	0	; () banked
  1362  00098C  A9B2               	btfss	(sprintf@flag+1)& (0+255),4,b
  1363  00098E  D005               	goto	l1611
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;doprnt.c: 829: prec = 6;
  1367  000990  0E00               	movlw	0
  1368  000992  0100               	movlb	0	; () banked
  1369  000994  6FBE               	movwf	(sprintf@prec+1)& (0+255),b
  1370  000996  0E06               	movlw	6
  1371  000998  6FBD               	movwf	sprintf@prec& (0+255),b
  1372  00099A                     l1611:
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1376                           
  1377                           ; BSR set to: 0
  1378  00099A  C0AF  FFD9         	movff	sprintf@ap,fsr2l
  1379  00099E  C0B0  FFDA         	movff	sprintf@ap+1,fsr2h
  1380  0009A2  CFDE F0BF          	movff	postinc2,sprintf@fval
  1381  0009A6  CFDE F0C0          	movff	postinc2,sprintf@fval+1
  1382  0009AA  CFDD F0C1          	movff	postdec2,sprintf@fval+2
  1383                           
  1384                           ; BSR set to: 0
  1385  0009AE  0E03               	movlw	3
  1386  0009B0  0100               	movlb	0	; () banked
  1387  0009B2  27AF               	addwf	sprintf@ap& (0+255),f,b
  1388  0009B4  0E00               	movlw	0
  1389  0009B6  23B0               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;doprnt.c: 831: if(fval < 0.0) {
  1393  0009B8  0100               	movlb	0	; () banked
  1394  0009BA  AFC1               	btfss	(sprintf@fval+2)& (0+255),7,b
  1395  0009BC  D011               	goto	l1612
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;doprnt.c: 832: fval = -fval;
  1399  0009BE  C0BF  F060         	movff	sprintf@fval,___ftneg@f1
  1400  0009C2  C0C0  F061         	movff	sprintf@fval+1,___ftneg@f1+1
  1401  0009C6  C0C1  F062         	movff	sprintf@fval+2,___ftneg@f1+2
  1402  0009CA  ECB4  F016         	call	___ftneg	;wreg free
  1403  0009CE  C060  F0BF         	movff	?___ftneg,sprintf@fval
  1404  0009D2  C061  F0C0         	movff	?___ftneg+1,sprintf@fval+1
  1405  0009D6  C062  F0C1         	movff	?___ftneg+2,sprintf@fval+2
  1406                           
  1407                           ;doprnt.c: 833: flag |= 0x03;
  1408  0009DA  0E03               	movlw	3
  1409  0009DC  0100               	movlb	0	; () banked
  1410  0009DE  13B1               	iorwf	sprintf@flag& (0+255),f,b
  1411  0009E0                     l1612:
  1412                           
  1413                           ; BSR set to: 0
  1414                           ;doprnt.c: 834: }
  1415                           ;doprnt.c: 835: exp = 0;
  1416                           
  1417                           ; BSR set to: 0
  1418  0009E0  0E00               	movlw	0
  1419  0009E2  0100               	movlb	0	; () banked
  1420  0009E4  6FB8               	movwf	(sprintf@exp+1)& (0+255),b
  1421  0009E6  0E00               	movlw	0
  1422  0009E8  6FB7               	movwf	sprintf@exp& (0+255),b
  1423                           
  1424                           ; BSR set to: 0
  1425                           ;doprnt.c: 836: if( fval!=0) {
  1426  0009EA  0100               	movlb	0	; () banked
  1427  0009EC  51BF               	movf	sprintf@fval& (0+255),w,b
  1428  0009EE  0100               	movlb	0	; () banked
  1429  0009F0  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1430  0009F2  0100               	movlb	0	; () banked
  1431  0009F4  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1432  0009F6  B4D8               	btfsc	status,2,c
  1433  0009F8  D09B               	goto	l1617
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1437  0009FA  0E82               	movlw	130
  1438  0009FC  0100               	movlb	0	; () banked
  1439  0009FE  6FA6               	movwf	??_sprintf& (0+255),b
  1440  000A00  0EFF               	movlw	255
  1441  000A02  0100               	movlb	0	; () banked
  1442  000A04  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  1443  000A06  C0BF  F0A8         	movff	sprintf@fval,??_sprintf+2
  1444  000A0A  C0C0  F0A9         	movff	sprintf@fval+1,??_sprintf+3
  1445  000A0E  C0C1  F0AA         	movff	sprintf@fval+2,??_sprintf+4
  1446  000A12  C0C2  F0AB         	movff	sprintf@fval+3,??_sprintf+5
  1447  000A16  0E10               	movlw	16
  1448  000A18  D006               	goto	u6720
  1449  000A1A                     u6725:
  1450  000A1A  0100               	movlb	0	; () banked
  1451  000A1C  90D8               	bcf	status,0,c
  1452  000A1E  33AB               	rrcf	(??_sprintf+5)& (0+255),f,b
  1453  000A20  33AA               	rrcf	(??_sprintf+4)& (0+255),f,b
  1454  000A22  33A9               	rrcf	(??_sprintf+3)& (0+255),f,b
  1455  000A24  33A8               	rrcf	(??_sprintf+2)& (0+255),f,b
  1456  000A26                     u6720:
  1457  000A26  2EE8               	decfsz	wreg,f,c
  1458  000A28  D7F8               	goto	u6725
  1459  000A2A  0100               	movlb	0	; () banked
  1460  000A2C  51A8               	movf	(??_sprintf+2)& (0+255),w,b
  1461  000A2E  0100               	movlb	0	; () banked
  1462  000A30  25A6               	addwf	??_sprintf& (0+255),w,b
  1463  000A32  0100               	movlb	0	; () banked
  1464  000A34  6FB7               	movwf	sprintf@exp& (0+255),b
  1465  000A36  0E00               	movlw	0
  1466  000A38  0100               	movlb	0	; () banked
  1467  000A3A  21A7               	addwfc	(??_sprintf+1)& (0+255),w,b
  1468  000A3C  0100               	movlb	0	; () banked
  1469  000A3E  6FB8               	movwf	(sprintf@exp+1)& (0+255),b
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;doprnt.c: 838: exp--;
  1473  000A40  0100               	movlb	0	; () banked
  1474  000A42  07B7               	decf	sprintf@exp& (0+255),f,b
  1475  000A44  A0D8               	btfss	status,0,c
  1476  000A46  07B8               	decf	(sprintf@exp+1)& (0+255),f,b
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;doprnt.c: 839: exp *= 3;
  1480  000A48  C0B7  F06E         	movff	sprintf@exp,___wmul@multiplier
  1481  000A4C  C0B8  F06F         	movff	sprintf@exp+1,___wmul@multiplier+1
  1482  000A50  0E00               	movlw	0
  1483  000A52  0100               	movlb	0	; () banked
  1484  000A54  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1485  000A56  0E03               	movlw	3
  1486  000A58  6F70               	movwf	___wmul@multiplicand& (0+255),b
  1487  000A5A  EC65  F016         	call	___wmul	;wreg free
  1488  000A5E  C06E  F0B7         	movff	?___wmul,sprintf@exp
  1489  000A62  C06F  F0B8         	movff	?___wmul+1,sprintf@exp+1
  1490                           
  1491                           ;doprnt.c: 840: exp /= 10;
  1492  000A66  C0B7  F066         	movff	sprintf@exp,___awdiv@dividend
  1493  000A6A  C0B8  F067         	movff	sprintf@exp+1,___awdiv@dividend+1
  1494  000A6E  0E00               	movlw	0
  1495  000A70  0100               	movlb	0	; () banked
  1496  000A72  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  1497  000A74  0E0A               	movlw	10
  1498  000A76  6F68               	movwf	___awdiv@divisor& (0+255),b
  1499  000A78  ECE1  F012         	call	___awdiv	;wreg free
  1500  000A7C  C066  F0B7         	movff	?___awdiv,sprintf@exp
  1501  000A80  C067  F0B8         	movff	?___awdiv+1,sprintf@exp+1
  1502                           
  1503                           ;doprnt.c: 841: if(exp < 0)
  1504  000A84  0100               	movlb	0	; () banked
  1505  000A86  AFB8               	btfss	(sprintf@exp+1)& (0+255),7,b
  1506  000A88  D004               	goto	l1614
  1507                           
  1508                           ; BSR set to: 0
  1509                           ;doprnt.c: 842: exp--;
  1510  000A8A  0100               	movlb	0	; () banked
  1511  000A8C  07B7               	decf	sprintf@exp& (0+255),f,b
  1512  000A8E  A0D8               	btfss	status,0,c
  1513  000A90  07B8               	decf	(sprintf@exp+1)& (0+255),f,b
  1514  000A92                     l1614:
  1515                           
  1516                           ; BSR set to: 0
  1517                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1518                           
  1519                           ; BSR set to: 0
  1520  000A92  0100               	movlb	0	; () banked
  1521  000A94  51B7               	movf	sprintf@exp& (0+255),w,b
  1522  000A96  0800               	sublw	0
  1523  000A98  EC5A  F008         	call	_scale
  1524  000A9C  C083  F0B9         	movff	?_scale,sprintf@tmpval
  1525  000AA0  C084  F0BA         	movff	?_scale+1,sprintf@tmpval+1
  1526  000AA4  C085  F0BB         	movff	?_scale+2,sprintf@tmpval+2
  1527                           
  1528                           ;doprnt.c: 847: tmpval.integ *= fval;
  1529  000AA8  C0B9  F074         	movff	sprintf@tmpval,___ftmul@f1
  1530  000AAC  C0BA  F075         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1531  000AB0  C0BB  F076         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1532  000AB4  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  1533  000AB8  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  1534  000ABC  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  1535  000AC0  ECA6  F010         	call	___ftmul	;wreg free
  1536  000AC4  C074  F0B9         	movff	?___ftmul,sprintf@tmpval
  1537  000AC8  C075  F0BA         	movff	?___ftmul+1,sprintf@tmpval+1
  1538  000ACC  C076  F0BB         	movff	?___ftmul+2,sprintf@tmpval+2
  1539                           
  1540                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1541  000AD0  C0B9  F060         	movff	sprintf@tmpval,___ftge@ff1
  1542  000AD4  C0BA  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1543  000AD8  C0BB  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1544  000ADC  0E00               	movlw	0
  1545  000ADE  0100               	movlb	0	; () banked
  1546  000AE0  6F63               	movwf	___ftge@ff2& (0+255),b
  1547  000AE2  0E80               	movlw	128
  1548  000AE4  0100               	movlb	0	; () banked
  1549  000AE6  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1550  000AE8  0E3F               	movlw	63
  1551  000AEA  0100               	movlb	0	; () banked
  1552  000AEC  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1553  000AEE  EC7D  F012         	call	___ftge	;wreg free
  1554  000AF2  0100               	movlb	0	; () banked
  1555  000AF4  B0D8               	btfsc	status,0,c
  1556  000AF6  D005               	goto	l1615
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;doprnt.c: 849: exp--;
  1560  000AF8  0100               	movlb	0	; () banked
  1561  000AFA  07B7               	decf	sprintf@exp& (0+255),f,b
  1562  000AFC  A0D8               	btfss	status,0,c
  1563  000AFE  07B8               	decf	(sprintf@exp+1)& (0+255),f,b
  1564  000B00  D017               	goto	l1617
  1565  000B02                     l1615:
  1566                           
  1567                           ; BSR set to: 0
  1568                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1569                           
  1570                           ; BSR set to: 0
  1571  000B02  C0B9  F060         	movff	sprintf@tmpval,___ftge@ff1
  1572  000B06  C0BA  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1573  000B0A  C0BB  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1574  000B0E  0E00               	movlw	0
  1575  000B10  0100               	movlb	0	; () banked
  1576  000B12  6F63               	movwf	___ftge@ff2& (0+255),b
  1577  000B14  0E20               	movlw	32
  1578  000B16  0100               	movlb	0	; () banked
  1579  000B18  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1580  000B1A  0E41               	movlw	65
  1581  000B1C  0100               	movlb	0	; () banked
  1582  000B1E  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1583  000B20  EC7D  F012         	call	___ftge	;wreg free
  1584  000B24  0100               	movlb	0	; () banked
  1585  000B26  A0D8               	btfss	status,0,c
  1586  000B28  D003               	goto	l1617
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;doprnt.c: 851: exp++;
  1590  000B2A  0100               	movlb	0	; () banked
  1591  000B2C  4BB7               	infsnz	sprintf@exp& (0+255),f,b
  1592  000B2E  2BB8               	incf	(sprintf@exp+1)& (0+255),f,b
  1593  000B30                     l1617:
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;doprnt.c: 852: }
  1597                           ;doprnt.c: 1112: if(prec <= 12)
  1598                           
  1599                           ; BSR set to: 0
  1600                           
  1601                           ; BSR set to: 0
  1602                           
  1603                           ; BSR set to: 0
  1604  000B30  0100               	movlb	0	; () banked
  1605  000B32  BFBE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  1606  000B34  D008               	goto	u6760
  1607  000B36  0100               	movlb	0	; () banked
  1608  000B38  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  1609  000B3A  E11D               	bnz	l6918
  1610  000B3C  0E0D               	movlw	13
  1611  000B3E  0100               	movlb	0	; () banked
  1612  000B40  5DBD               	subwf	sprintf@prec& (0+255),w,b
  1613  000B42  B0D8               	btfsc	status,0,c
  1614  000B44  D018               	goto	l1618
  1615  000B46                     u6760:
  1616                           
  1617                           ; BSR set to: 0
  1618                           ;doprnt.c: 1113: fval += fround(prec);
  1619  000B46  C0BF  F08D         	movff	sprintf@fval,___ftadd@f1
  1620  000B4A  C0C0  F08E         	movff	sprintf@fval+1,___ftadd@f1+1
  1621  000B4E  C0C1  F08F         	movff	sprintf@fval+2,___ftadd@f1+2
  1622  000B52  0100               	movlb	0	; () banked
  1623  000B54  51BD               	movf	sprintf@prec& (0+255),w,b
  1624  000B56  ECBD  F00A         	call	_fround
  1625  000B5A  C083  F090         	movff	?_fround,___ftadd@f2
  1626  000B5E  C084  F091         	movff	?_fround+1,___ftadd@f2+1
  1627  000B62  C085  F092         	movff	?_fround+2,___ftadd@f2+2
  1628  000B66  EC19  F00C         	call	___ftadd	;wreg free
  1629  000B6A  C08D  F0BF         	movff	?___ftadd,sprintf@fval
  1630  000B6E  C08E  F0C0         	movff	?___ftadd+1,sprintf@fval+1
  1631  000B72  C08F  F0C1         	movff	?___ftadd+2,sprintf@fval+2
  1632  000B76                     l1618:
  1633  000B76                     l6918:
  1634                           
  1635                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1636  000B76  0100               	movlb	0	; () banked
  1637  000B78  BFB8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1638  000B7A  D008               	goto	u6770
  1639  000B7C  0100               	movlb	0	; () banked
  1640  000B7E  51B8               	movf	(sprintf@exp+1)& (0+255),w,b
  1641  000B80  E12A               	bnz	l6926
  1642  000B82  0E0A               	movlw	10
  1643  000B84  0100               	movlb	0	; () banked
  1644  000B86  5DB7               	subwf	sprintf@exp& (0+255),w,b
  1645  000B88  B0D8               	btfsc	status,0,c
  1646  000B8A  D025               	goto	u6800
  1647  000B8C                     u6770:
  1648                           
  1649                           ; BSR set to: 0
  1650  000B8C  0100               	movlb	0	; () banked
  1651  000B8E  51BF               	movf	sprintf@fval& (0+255),w,b
  1652  000B90  0100               	movlb	0	; () banked
  1653  000B92  11C0               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1654  000B94  0100               	movlb	0	; () banked
  1655  000B96  11C1               	iorwf	(sprintf@fval+2)& (0+255),w,b
  1656  000B98  B4D8               	btfsc	status,2,c
  1657  000B9A  D063               	goto	l1619
  1658                           
  1659                           ; BSR set to: 0
  1660  000B9C  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  1661  000BA0  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  1662  000BA4  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  1663  000BA8  EC55  F011         	call	___fttol	;wreg free
  1664  000BAC  0100               	movlb	0	; () banked
  1665  000BAE  518A               	movf	?___fttol& (0+255),w,b
  1666  000BB0  0100               	movlb	0	; () banked
  1667  000BB2  118B               	iorwf	(?___fttol+1)& (0+255),w,b
  1668  000BB4  0100               	movlb	0	; () banked
  1669  000BB6  118C               	iorwf	(?___fttol+2)& (0+255),w,b
  1670  000BB8  0100               	movlb	0	; () banked
  1671  000BBA  118D               	iorwf	(?___fttol+3)& (0+255),w,b
  1672  000BBC  A4D8               	btfss	status,2,c
  1673  000BBE  D051               	goto	l1619
  1674                           
  1675                           ; BSR set to: 0
  1676  000BC0  0100               	movlb	0	; () banked
  1677  000BC2  BFB8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  1678  000BC4  D04E               	goto	l1619
  1679  000BC6  0100               	movlb	0	; () banked
  1680  000BC8  51B8               	movf	(sprintf@exp+1)& (0+255),w,b
  1681  000BCA  E105               	bnz	l6926
  1682  000BCC  0E02               	movlw	2
  1683  000BCE  0100               	movlb	0	; () banked
  1684  000BD0  5DB7               	subwf	sprintf@exp& (0+255),w,b
  1685  000BD2  A0D8               	btfss	status,0,c
  1686  000BD4  D046               	goto	l1619
  1687  000BD6                     u6800:
  1688  000BD6                     l6926:
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1692  000BD6  C0B9  F060         	movff	sprintf@tmpval,___ftge@ff1
  1693  000BDA  C0BA  F061         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1694  000BDE  C0BB  F062         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1695  000BE2  0E70               	movlw	112
  1696  000BE4  0100               	movlb	0	; () banked
  1697  000BE6  6F63               	movwf	___ftge@ff2& (0+255),b
  1698  000BE8  0E89               	movlw	137
  1699  000BEA  0100               	movlb	0	; () banked
  1700  000BEC  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  1701  000BEE  0E40               	movlw	64
  1702  000BF0  0100               	movlb	0	; () banked
  1703  000BF2  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  1704  000BF4  EC7D  F012         	call	___ftge	;wreg free
  1705  000BF8  0100               	movlb	0	; () banked
  1706  000BFA  B0D8               	btfsc	status,0,c
  1707  000BFC  D003               	goto	l1622
  1708                           
  1709                           ; BSR set to: 0
  1710                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1711  000BFE  0100               	movlb	0	; () banked
  1712  000C00  0EF7               	movlw	247
  1713  000C02  D002               	goto	L1
  1714  000C04                     l1622:
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1718                           
  1719                           ; BSR set to: 0
  1720  000C04  0100               	movlb	0	; () banked
  1721  000C06  0EF8               	movlw	248
  1722  000C08                     L1:
  1723  000C08  27B7               	addwf	sprintf@exp& (0+255),f,b
  1724  000C0A  0EFF               	movlw	255
  1725  000C0C  23B8               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1726                           
  1727                           ; BSR set to: 0
  1728                           ;doprnt.c: 1124: }
  1729                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1730                           
  1731                           ; BSR set to: 0
  1732  000C0E  0100               	movlb	0	; () banked
  1733  000C10  51B7               	movf	sprintf@exp& (0+255),w,b
  1734  000C12  EC5A  F008         	call	_scale
  1735  000C16  C083  F0B9         	movff	?_scale,sprintf@tmpval
  1736  000C1A  C084  F0BA         	movff	?_scale+1,sprintf@tmpval+1
  1737  000C1E  C085  F0BB         	movff	?_scale+2,sprintf@tmpval+2
  1738                           
  1739                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1740  000C22  C0BF  F060         	movff	sprintf@fval,__tdiv_to_l_@f1
  1741  000C26  C0C0  F061         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1742  000C2A  C0C1  F062         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1743  000C2E  C0B9  F063         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1744  000C32  C0BA  F064         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1745  000C36  C0BB  F065         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1746  000C3A  EC60  F00E         	call	__tdiv_to_l_	;wreg free
  1747  000C3E  C060  F0B3         	movff	?__tdiv_to_l_,sprintf@val
  1748  000C42  C061  F0B4         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1749  000C46  C062  F0B5         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1750  000C4A  C063  F0B6         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1751                           
  1752                           ;doprnt.c: 1129: fval = 0.0;
  1753  000C4E  0E00               	movlw	0
  1754  000C50  0100               	movlb	0	; () banked
  1755  000C52  6FBF               	movwf	sprintf@fval& (0+255),b
  1756  000C54  0E00               	movlw	0
  1757  000C56  0100               	movlb	0	; () banked
  1758  000C58  6FC0               	movwf	(sprintf@fval+1)& (0+255),b
  1759  000C5A  0E00               	movlw	0
  1760  000C5C  0100               	movlb	0	; () banked
  1761  000C5E  6FC1               	movwf	(sprintf@fval+2)& (0+255),b
  1762                           
  1763                           ;doprnt.c: 1130: } else {
  1764  000C60  D033               	goto	l1628
  1765  000C62                     l1619:
  1766                           
  1767                           ; BSR set to: 0
  1768                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1769                           
  1770                           ; BSR set to: 0
  1771  000C62  C0BF  F08A         	movff	sprintf@fval,___fttol@f1
  1772  000C66  C0C0  F08B         	movff	sprintf@fval+1,___fttol@f1+1
  1773  000C6A  C0C1  F08C         	movff	sprintf@fval+2,___fttol@f1+2
  1774  000C6E  EC55  F011         	call	___fttol	;wreg free
  1775  000C72  C08A  F0B3         	movff	?___fttol,sprintf@val
  1776  000C76  C08B  F0B4         	movff	?___fttol+1,sprintf@val+1
  1777  000C7A  C08C  F0B5         	movff	?___fttol+2,sprintf@val+2
  1778  000C7E  C08D  F0B6         	movff	?___fttol+3,sprintf@val+3
  1779                           
  1780                           ;doprnt.c: 1132: fval -= (double)val;
  1781  000C82  C0BF  F099         	movff	sprintf@fval,___ftsub@f1
  1782  000C86  C0C0  F09A         	movff	sprintf@fval+1,___ftsub@f1+1
  1783  000C8A  C0C1  F09B         	movff	sprintf@fval+2,___ftsub@f1+2
  1784  000C8E  C0B3  F068         	movff	sprintf@val,___lltoft@c
  1785  000C92  C0B4  F069         	movff	sprintf@val+1,___lltoft@c+1
  1786  000C96  C0B5  F06A         	movff	sprintf@val+2,___lltoft@c+2
  1787  000C9A  C0B6  F06B         	movff	sprintf@val+3,___lltoft@c+3
  1788  000C9E  EC3B  F015         	call	___lltoft	;wreg free
  1789  000CA2  C068  F09C         	movff	?___lltoft,___ftsub@f2
  1790  000CA6  C069  F09D         	movff	?___lltoft+1,___ftsub@f2+1
  1791  000CAA  C06A  F09E         	movff	?___lltoft+2,___ftsub@f2+2
  1792  000CAE  ECA6  F015         	call	___ftsub	;wreg free
  1793  000CB2  C099  F0BF         	movff	?___ftsub,sprintf@fval
  1794  000CB6  C09A  F0C0         	movff	?___ftsub+1,sprintf@fval+1
  1795  000CBA  C09B  F0C1         	movff	?___ftsub+2,sprintf@fval+2
  1796                           
  1797                           ;doprnt.c: 1133: exp = 0;
  1798  000CBE  0E00               	movlw	0
  1799  000CC0  0100               	movlb	0	; () banked
  1800  000CC2  6FB8               	movwf	(sprintf@exp+1)& (0+255),b
  1801  000CC4  0E00               	movlw	0
  1802  000CC6  6FB7               	movwf	sprintf@exp& (0+255),b
  1803  000CC8                     l1628:
  1804                           
  1805                           ; BSR set to: 0
  1806                           ;doprnt.c: 1134: }
  1807                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1808                           
  1809                           ; BSR set to: 0
  1810  000CC8  0E01               	movlw	1
  1811  000CCA  0100               	movlb	0	; () banked
  1812  000CCC  6FC2               	movwf	sprintf@c& (0+255),b
  1813  000CCE                     l6946:
  1814                           
  1815                           ; BSR set to: 0
  1816  000CCE  0E0A               	movlw	10
  1817  000CD0  0100               	movlb	0	; () banked
  1818  000CD2  19C2               	xorwf	sprintf@c& (0+255),w,b
  1819  000CD4  B4D8               	btfsc	status,2,c
  1820  000CD6  D01E               	goto	u6840
  1821                           
  1822                           ; BSR set to: 0
  1823                           ;doprnt.c: 1137: if(val < dpowers[c])
  1824                           
  1825                           ; BSR set to: 0
  1826                           
  1827                           ; BSR set to: 0
  1828  000CD8  0100               	movlb	0	; () banked
  1829  000CDA  51C2               	movf	sprintf@c& (0+255),w,b
  1830  000CDC  0D04               	mullw	4
  1831  000CDE  0E01               	movlw	low _dpowers
  1832  000CE0  24F3               	addwf	prodl,w,c
  1833  000CE2  6EF6               	movwf	tblptrl,c
  1834  000CE4  0E08               	movlw	high _dpowers
  1835  000CE6  20F4               	addwfc	prodh,w,c
  1836  000CE8  6EF7               	movwf	tblptrh,c
  1837  000CEA                     	if	0	;There are less than 3 active tblptr bytes
  1838  000CEA                     	endif
  1839  000CEA  0009               	tblrd		*+
  1840  000CEC  50F5               	movf	tablat,w,c
  1841  000CEE  0100               	movlb	0	; () banked
  1842  000CF0  5DB3               	subwf	sprintf@val& (0+255),w,b
  1843  000CF2  0009               	tblrd		*+
  1844  000CF4  50F5               	movf	tablat,w,c
  1845  000CF6  0100               	movlb	0	; () banked
  1846  000CF8  59B4               	subwfb	(sprintf@val+1)& (0+255),w,b
  1847  000CFA  0009               	tblrd		*+
  1848  000CFC  50F5               	movf	tablat,w,c
  1849  000CFE  0100               	movlb	0	; () banked
  1850  000D00  59B5               	subwfb	(sprintf@val+2)& (0+255),w,b
  1851  000D02  0009               	tblrd		*+
  1852  000D04  50F5               	movf	tablat,w,c
  1853  000D06  0100               	movlb	0	; () banked
  1854  000D08  59B6               	subwfb	(sprintf@val+3)& (0+255),w,b
  1855  000D0A  A0D8               	btfss	status,0,c
  1856  000D0C  D003               	goto	u6840
  1857                           
  1858                           ; BSR set to: 0
  1859                           
  1860                           ; BSR set to: 0
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;doprnt.c: 1138: break;
  1864  000D0E  0100               	movlb	0	; () banked
  1865  000D10  2BC2               	incf	sprintf@c& (0+255),f,b
  1866  000D12  D7DD               	goto	l6946
  1867  000D14                     u6840:
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;doprnt.c: 1175: {
  1871                           ;doprnt.c: 1188: if(flag & 0x03)
  1872                           
  1873                           ; BSR set to: 0
  1874  000D14  0E03               	movlw	3
  1875  000D16  0100               	movlb	0	; () banked
  1876  000D18  15B1               	andwf	sprintf@flag& (0+255),w,b
  1877  000D1A  0100               	movlb	0	; () banked
  1878  000D1C  6FA6               	movwf	??_sprintf& (0+255),b
  1879  000D1E  0E00               	movlw	0
  1880  000D20  0100               	movlb	0	; () banked
  1881  000D22  15B2               	andwf	(sprintf@flag+1)& (0+255),w,b
  1882  000D24  0100               	movlb	0	; () banked
  1883  000D26  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  1884  000D28  0100               	movlb	0	; () banked
  1885  000D2A  51A6               	movf	??_sprintf& (0+255),w,b
  1886  000D2C  0100               	movlb	0	; () banked
  1887  000D2E  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  1888  000D30  B4D8               	btfsc	status,2,c
  1889  000D32  D053               	goto	l1633
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1893  000D34  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1894  000D38  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1895  000D3C  0E2D               	movlw	45
  1896  000D3E  D049               	goto	L2
  1897  000D40                     
  1898                           ; BSR set to: 0
  1899                           ;doprnt.c: 1200: {
  1900                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1901                           
  1902                           ; BSR set to: 0
  1903  000D40  C0B3  F060         	movff	sprintf@val,___lldiv@dividend
  1904  000D44  C0B4  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  1905  000D48  C0B5  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  1906  000D4C  C0B6  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  1907  000D50  0100               	movlb	0	; () banked
  1908  000D52  51C2               	movf	sprintf@c& (0+255),w,b
  1909  000D54  0D04               	mullw	4
  1910  000D56  0E01               	movlw	low _dpowers
  1911  000D58  24F3               	addwf	prodl,w,c
  1912  000D5A  6EF6               	movwf	tblptrl,c
  1913  000D5C  0E08               	movlw	high _dpowers
  1914  000D5E  20F4               	addwfc	prodh,w,c
  1915  000D60  6EF7               	movwf	tblptrh,c
  1916  000D62                     	if	0	;There are less than 3 active tblptr bytes
  1917  000D62                     	endif
  1918  000D62  0009               	tblrd		*+
  1919  000D64  CFF5 F064          	movff	tablat,___lldiv@divisor
  1920  000D68  0009               	tblrd		*+
  1921  000D6A  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  1922  000D6E  0009               	tblrd		*+
  1923  000D70  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  1924  000D74  000A               	tblrd		*-
  1925  000D76  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  1926  000D7A  EC40  F013         	call	___lldiv	;wreg free
  1927  000D7E  C060  F0B9         	movff	?___lldiv,sprintf@tmpval
  1928  000D82  C061  F0BA         	movff	?___lldiv+1,sprintf@tmpval+1
  1929  000D86  C062  F0BB         	movff	?___lldiv+2,sprintf@tmpval+2
  1930  000D8A  C063  F0BC         	movff	?___lldiv+3,sprintf@tmpval+3
  1931                           
  1932                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1933  000D8E  C0B9  F060         	movff	sprintf@tmpval,___llmod@dividend
  1934  000D92  C0BA  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1935  000D96  C0BB  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1936  000D9A  C0BC  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1937  000D9E  0E0A               	movlw	10
  1938  000DA0  0100               	movlb	0	; () banked
  1939  000DA2  6F64               	movwf	___llmod@divisor& (0+255),b
  1940  000DA4  0E00               	movlw	0
  1941  000DA6  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  1942  000DA8  0E00               	movlw	0
  1943  000DAA  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  1944  000DAC  0E00               	movlw	0
  1945  000DAE  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  1946  000DB0  ECF1  F014         	call	___llmod	;wreg free
  1947  000DB4  C060  F0B9         	movff	?___llmod,sprintf@tmpval
  1948  000DB8  C061  F0BA         	movff	?___llmod+1,sprintf@tmpval+1
  1949  000DBC  C062  F0BB         	movff	?___llmod+2,sprintf@tmpval+2
  1950  000DC0  C063  F0BC         	movff	?___llmod+3,sprintf@tmpval+3
  1951                           
  1952                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1953  000DC4  0100               	movlb	0	; () banked
  1954  000DC6  51B9               	movf	sprintf@tmpval& (0+255),w,b
  1955  000DC8  0F30               	addlw	48
  1956  000DCA  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1957  000DCE  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1958  000DD2                     L2:
  1959  000DD2  6EDF               	movwf	indf2,c
  1960                           
  1961                           ; BSR set to: 0
  1962  000DD4  0100               	movlb	0	; () banked
  1963  000DD6  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1964  000DD8  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1965  000DDA                     l1633:
  1966                           
  1967                           ; BSR set to: 0
  1968                           
  1969                           ; BSR set to: 0
  1970  000DDA  0100               	movlb	0	; () banked
  1971  000DDC  07C2               	decf	sprintf@c& (0+255),f,b
  1972  000DDE  0100               	movlb	0	; () banked
  1973  000DE0  29C2               	incf	sprintf@c& (0+255),w,b
  1974  000DE2  B4D8               	btfsc	status,2,c
  1975  000DE4  D00E               	goto	l1636
  1976  000DE6  D7AC               	goto	l1634
  1977  000DE8                     l6974:
  1978                           
  1979                           ; BSR set to: 0
  1980                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1981  000DE8  C09F  FFD9         	movff	sprintf@sp,fsr2l
  1982  000DEC  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  1983  000DF0  0E30               	movlw	48
  1984  000DF2  6EDF               	movwf	indf2,c
  1985                           
  1986                           ; BSR set to: 0
  1987  000DF4  0100               	movlb	0	; () banked
  1988  000DF6  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  1989  000DF8  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  1990                           
  1991                           ; BSR set to: 0
  1992                           ;doprnt.c: 1209: exp--;
  1993  000DFA  0100               	movlb	0	; () banked
  1994  000DFC  07B7               	decf	sprintf@exp& (0+255),f,b
  1995  000DFE  A0D8               	btfss	status,0,c
  1996  000E00  07B8               	decf	(sprintf@exp+1)& (0+255),f,b
  1997  000E02                     l1636:
  1998                           
  1999                           ; BSR set to: 0
  2000                           
  2001                           ; BSR set to: 0
  2002  000E02  0100               	movlb	0	; () banked
  2003  000E04  BFB8               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2004  000E06  D007               	goto	u6870
  2005  000E08  0100               	movlb	0	; () banked
  2006  000E0A  51B8               	movf	(sprintf@exp+1)& (0+255),w,b
  2007  000E0C  E1ED               	bnz	l6974
  2008  000E0E  0100               	movlb	0	; () banked
  2009  000E10  05B7               	decf	sprintf@exp& (0+255),w,b
  2010  000E12  B0D8               	btfsc	status,0,c
  2011  000E14  D7E9               	goto	l1637
  2012  000E16                     u6870:
  2013                           
  2014                           ; BSR set to: 0
  2015                           ;doprnt.c: 1210: }
  2016                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2017                           
  2018                           ; BSR set to: 0
  2019  000E16  0100               	movlb	0	; () banked
  2020  000E18  BFBE               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2021  000E1A  D00C               	goto	l1639
  2022  000E1C  0100               	movlb	0	; () banked
  2023  000E1E  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2024  000E20  E105               	bnz	u6880
  2025  000E22  0E09               	movlw	9
  2026  000E24  0100               	movlb	0	; () banked
  2027  000E26  5DBD               	subwf	sprintf@prec& (0+255),w,b
  2028  000E28  A0D8               	btfss	status,0,c
  2029  000E2A  D004               	goto	l1639
  2030  000E2C                     u6880:
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2034  000E2C  0E08               	movlw	8
  2035  000E2E  0100               	movlb	0	; () banked
  2036  000E30  6FC2               	movwf	sprintf@c& (0+255),b
  2037  000E32  D002               	goto	l1640
  2038  000E34                     l1639:
  2039                           
  2040                           ; BSR set to: 0
  2041                           ;doprnt.c: 1213: else
  2042                           ;doprnt.c: 1214: c = prec;
  2043  000E34  C0BD  F0C2         	movff	sprintf@prec,sprintf@c
  2044  000E38                     l1640:
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;doprnt.c: 1215: prec -= c;
  2048                           
  2049                           ; BSR set to: 0
  2050  000E38  0100               	movlb	0	; () banked
  2051  000E3A  51C2               	movf	sprintf@c& (0+255),w,b
  2052  000E3C  0100               	movlb	0	; () banked
  2053  000E3E  5FBD               	subwf	sprintf@prec& (0+255),f,b
  2054  000E40  0E00               	movlw	0
  2055  000E42  0100               	movlb	0	; () banked
  2056  000E44  BFC2               	btfsc	sprintf@c& (0+255),7,b
  2057  000E46  0EFF               	movlw	255
  2058  000E48  0100               	movlb	0	; () banked
  2059  000E4A  5BBE               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;doprnt.c: 1219: if(c)
  2063  000E4C  0100               	movlb	0	; () banked
  2064  000E4E  51C2               	movf	sprintf@c& (0+255),w,b
  2065  000E50  0100               	movlb	0	; () banked
  2066  000E52  B4D8               	btfsc	status,2,c
  2067  000E54  D009               	goto	l1641
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  2071  000E56  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2072  000E5A  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2073  000E5E  0E2E               	movlw	46
  2074  000E60  6EDF               	movwf	indf2,c
  2075                           
  2076                           ; BSR set to: 0
  2077  000E62  0100               	movlb	0	; () banked
  2078  000E64  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2079  000E66  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2080  000E68                     l1641:
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2084                           
  2085                           ; BSR set to: 0
  2086  000E68  0100               	movlb	0	; () banked
  2087  000E6A  51C2               	movf	sprintf@c& (0+255),w,b
  2088  000E6C  EC5A  F008         	call	_scale
  2089  000E70  C083  F0AC         	movff	?_scale,_sprintf$3834
  2090  000E74  C084  F0AD         	movff	?_scale+1,_sprintf$3834+1
  2091  000E78  C085  F0AE         	movff	?_scale+2,_sprintf$3834+2
  2092                           
  2093                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2094  000E7C  C0BF  F077         	movff	sprintf@fval,___ftmul@f2
  2095  000E80  C0C0  F078         	movff	sprintf@fval+1,___ftmul@f2+1
  2096  000E84  C0C1  F079         	movff	sprintf@fval+2,___ftmul@f2+2
  2097  000E88  C0AC  F074         	movff	_sprintf$3834,___ftmul@f1
  2098  000E8C  C0AD  F075         	movff	_sprintf$3834+1,___ftmul@f1+1
  2099  000E90  C0AE  F076         	movff	_sprintf$3834+2,___ftmul@f1+2
  2100  000E94  ECA6  F010         	call	___ftmul	;wreg free
  2101  000E98  C074  F08A         	movff	?___ftmul,___fttol@f1
  2102  000E9C  C075  F08B         	movff	?___ftmul+1,___fttol@f1+1
  2103  000EA0  C076  F08C         	movff	?___ftmul+2,___fttol@f1+2
  2104  000EA4  EC55  F011         	call	___fttol	;wreg free
  2105  000EA8  C08A  F0B3         	movff	?___fttol,sprintf@val
  2106  000EAC  C08B  F0B4         	movff	?___fttol+1,sprintf@val+1
  2107  000EB0  C08C  F0B5         	movff	?___fttol+2,sprintf@val+2
  2108  000EB4  C08D  F0B6         	movff	?___fttol+3,sprintf@val+3
  2109                           
  2110                           ;doprnt.c: 1228: while(c--) {
  2111  000EB8  D074               	goto	l1642
  2112  000EBA                     
  2113                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2114  000EBA  C0B3  F060         	movff	sprintf@val,___lldiv@dividend
  2115  000EBE  C0B4  F061         	movff	sprintf@val+1,___lldiv@dividend+1
  2116  000EC2  C0B5  F062         	movff	sprintf@val+2,___lldiv@dividend+2
  2117  000EC6  C0B6  F063         	movff	sprintf@val+3,___lldiv@dividend+3
  2118  000ECA  0100               	movlb	0	; () banked
  2119  000ECC  51C2               	movf	sprintf@c& (0+255),w,b
  2120  000ECE  0D04               	mullw	4
  2121  000ED0  0E01               	movlw	low _dpowers
  2122  000ED2  24F3               	addwf	prodl,w,c
  2123  000ED4  6EF6               	movwf	tblptrl,c
  2124  000ED6  0E08               	movlw	high _dpowers
  2125  000ED8  20F4               	addwfc	prodh,w,c
  2126  000EDA  6EF7               	movwf	tblptrh,c
  2127  000EDC                     	if	0	;There are less than 3 active tblptr bytes
  2128  000EDC                     	endif
  2129  000EDC  0009               	tblrd		*+
  2130  000EDE  CFF5 F064          	movff	tablat,___lldiv@divisor
  2131  000EE2  0009               	tblrd		*+
  2132  000EE4  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  2133  000EE8  0009               	tblrd		*+
  2134  000EEA  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  2135  000EEE  000A               	tblrd		*-
  2136  000EF0  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  2137  000EF4  EC40  F013         	call	___lldiv	;wreg free
  2138  000EF8  C060  F0B9         	movff	?___lldiv,sprintf@tmpval
  2139  000EFC  C061  F0BA         	movff	?___lldiv+1,sprintf@tmpval+1
  2140  000F00  C062  F0BB         	movff	?___lldiv+2,sprintf@tmpval+2
  2141  000F04  C063  F0BC         	movff	?___lldiv+3,sprintf@tmpval+3
  2142                           
  2143                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2144  000F08  C0B9  F060         	movff	sprintf@tmpval,___llmod@dividend
  2145  000F0C  C0BA  F061         	movff	sprintf@tmpval+1,___llmod@dividend+1
  2146  000F10  C0BB  F062         	movff	sprintf@tmpval+2,___llmod@dividend+2
  2147  000F14  C0BC  F063         	movff	sprintf@tmpval+3,___llmod@dividend+3
  2148  000F18  0E0A               	movlw	10
  2149  000F1A  0100               	movlb	0	; () banked
  2150  000F1C  6F64               	movwf	___llmod@divisor& (0+255),b
  2151  000F1E  0E00               	movlw	0
  2152  000F20  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  2153  000F22  0E00               	movlw	0
  2154  000F24  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  2155  000F26  0E00               	movlw	0
  2156  000F28  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  2157  000F2A  ECF1  F014         	call	___llmod	;wreg free
  2158  000F2E  C060  F0B9         	movff	?___llmod,sprintf@tmpval
  2159  000F32  C061  F0BA         	movff	?___llmod+1,sprintf@tmpval+1
  2160  000F36  C062  F0BB         	movff	?___llmod+2,sprintf@tmpval+2
  2161  000F3A  C063  F0BC         	movff	?___llmod+3,sprintf@tmpval+3
  2162                           
  2163                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  2164  000F3E  0100               	movlb	0	; () banked
  2165  000F40  51B9               	movf	sprintf@tmpval& (0+255),w,b
  2166  000F42  0F30               	addlw	48
  2167  000F44  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2168  000F48  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2169  000F4C  6EDF               	movwf	indf2,c
  2170                           
  2171                           ; BSR set to: 0
  2172  000F4E  0100               	movlb	0	; () banked
  2173  000F50  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2174  000F52  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;doprnt.c: 1232: val %= dpowers[c];
  2178  000F54  C0B3  F060         	movff	sprintf@val,___llmod@dividend
  2179  000F58  C0B4  F061         	movff	sprintf@val+1,___llmod@dividend+1
  2180  000F5C  C0B5  F062         	movff	sprintf@val+2,___llmod@dividend+2
  2181  000F60  C0B6  F063         	movff	sprintf@val+3,___llmod@dividend+3
  2182  000F64  0100               	movlb	0	; () banked
  2183  000F66  51C2               	movf	sprintf@c& (0+255),w,b
  2184  000F68  0D04               	mullw	4
  2185  000F6A  0E01               	movlw	low _dpowers
  2186  000F6C  24F3               	addwf	prodl,w,c
  2187  000F6E  6EF6               	movwf	tblptrl,c
  2188  000F70  0E08               	movlw	high _dpowers
  2189  000F72  20F4               	addwfc	prodh,w,c
  2190  000F74  6EF7               	movwf	tblptrh,c
  2191  000F76                     	if	0	;There are less than 3 active tblptr bytes
  2192  000F76                     	endif
  2193  000F76  0009               	tblrd		*+
  2194  000F78  CFF5 F064          	movff	tablat,___llmod@divisor
  2195  000F7C  0009               	tblrd		*+
  2196  000F7E  CFF5 F065          	movff	tablat,___llmod@divisor+1
  2197  000F82  0009               	tblrd		*+
  2198  000F84  CFF5 F066          	movff	tablat,___llmod@divisor+2
  2199  000F88  000A               	tblrd		*-
  2200  000F8A  CFF5 F067          	movff	tablat,___llmod@divisor+3
  2201  000F8E  ECF1  F014         	call	___llmod	;wreg free
  2202  000F92  C060  F0B3         	movff	?___llmod,sprintf@val
  2203  000F96  C061  F0B4         	movff	?___llmod+1,sprintf@val+1
  2204  000F9A  C062  F0B5         	movff	?___llmod+2,sprintf@val+2
  2205  000F9E  C063  F0B6         	movff	?___llmod+3,sprintf@val+3
  2206  000FA2                     l1642:
  2207  000FA2  0100               	movlb	0	; () banked
  2208  000FA4  07C2               	decf	sprintf@c& (0+255),f,b
  2209  000FA6  0100               	movlb	0	; () banked
  2210  000FA8  29C2               	incf	sprintf@c& (0+255),w,b
  2211  000FAA  B4D8               	btfsc	status,2,c
  2212  000FAC  D00E               	goto	l1645
  2213  000FAE  D785               	goto	l1643
  2214  000FB0                     
  2215                           ; BSR set to: 0
  2216                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  2217                           
  2218                           ; BSR set to: 0
  2219  000FB0  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2220  000FB4  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2221  000FB8  0E30               	movlw	48
  2222  000FBA  6EDF               	movwf	indf2,c
  2223                           
  2224                           ; BSR set to: 0
  2225  000FBC  0100               	movlb	0	; () banked
  2226  000FBE  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2227  000FC0  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 1237: prec--;
  2231  000FC2  0100               	movlb	0	; () banked
  2232  000FC4  07BD               	decf	sprintf@prec& (0+255),f,b
  2233  000FC6  A0D8               	btfss	status,0,c
  2234  000FC8  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  2235  000FCA                     l1645:
  2236                           
  2237                           ; BSR set to: 0
  2238                           
  2239                           ; BSR set to: 0
  2240  000FCA  0100               	movlb	0	; () banked
  2241  000FCC  51BD               	movf	sprintf@prec& (0+255),w,b
  2242  000FCE  0100               	movlb	0	; () banked
  2243  000FD0  11BE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2244  000FD2  B4D8               	btfsc	status,2,c
  2245  000FD4  D059               	goto	l1652
  2246  000FD6  D7EC               	goto	l1646
  2247  000FD8                     l1610:
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;doprnt.c: 1246: }
  2251                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2252                           
  2253                           ; BSR set to: 0
  2254  000FD8  0100               	movlb	0	; () banked
  2255  000FDA  51BD               	movf	sprintf@prec& (0+255),w,b
  2256  000FDC  0100               	movlb	0	; () banked
  2257  000FDE  11BE               	iorwf	(sprintf@prec+1)& (0+255),w,b
  2258  000FE0  A4D8               	btfss	status,2,c
  2259  000FE2  D00D               	goto	l1648
  2260                           
  2261                           ; BSR set to: 0
  2262  000FE4  0100               	movlb	0	; () banked
  2263  000FE6  51B3               	movf	sprintf@val& (0+255),w,b
  2264  000FE8  0100               	movlb	0	; () banked
  2265  000FEA  11B4               	iorwf	(sprintf@val+1)& (0+255),w,b
  2266  000FEC  0100               	movlb	0	; () banked
  2267  000FEE  11B5               	iorwf	(sprintf@val+2)& (0+255),w,b
  2268  000FF0  0100               	movlb	0	; () banked
  2269  000FF2  11B6               	iorwf	(sprintf@val+3)& (0+255),w,b
  2270  000FF4  A4D8               	btfss	status,2,c
  2271  000FF6  D003               	goto	l1648
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;doprnt.c: 1291: prec++;
  2275  000FF8  0100               	movlb	0	; () banked
  2276  000FFA  4BBD               	infsnz	sprintf@prec& (0+255),f,b
  2277  000FFC  2BBE               	incf	(sprintf@prec+1)& (0+255),f,b
  2278  000FFE                     l1648:
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;doprnt.c: 1339: if(c < prec)
  2282                           
  2283                           ; BSR set to: 0
  2284  000FFE  0E80               	movlw	128
  2285  001000  0100               	movlb	0	; () banked
  2286  001002  BFC2               	btfsc	sprintf@c& (0+255),7,b
  2287  001004  0E7F               	movlw	127
  2288  001006  0100               	movlb	0	; () banked
  2289  001008  6FA6               	movwf	??_sprintf& (0+255),b
  2290  00100A  0100               	movlb	0	; () banked
  2291  00100C  51BD               	movf	sprintf@prec& (0+255),w,b
  2292  00100E  0100               	movlb	0	; () banked
  2293  001010  5DC2               	subwf	sprintf@c& (0+255),w,b
  2294  001012  0100               	movlb	0	; () banked
  2295  001014  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2296  001016  0A80               	xorlw	128
  2297  001018  0100               	movlb	0	; () banked
  2298  00101A  59A6               	subwfb	??_sprintf& (0+255),w,b
  2299  00101C  B0D8               	btfsc	status,0,c
  2300  00101E  D003               	goto	l1649
  2301                           
  2302                           ; BSR set to: 0
  2303                           ;doprnt.c: 1340: c = prec;
  2304  001020  C0BD  F0C2         	movff	sprintf@prec,sprintf@c
  2305  001024  D018               	goto	l1651
  2306  001026                     l1649:
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;doprnt.c: 1341: else if(prec < c)
  2310                           
  2311                           ; BSR set to: 0
  2312  001026  0100               	movlb	0	; () banked
  2313  001028  51BE               	movf	(sprintf@prec+1)& (0+255),w,b
  2314  00102A  0A80               	xorlw	128
  2315  00102C  0100               	movlb	0	; () banked
  2316  00102E  6FA6               	movwf	??_sprintf& (0+255),b
  2317  001030  0100               	movlb	0	; () banked
  2318  001032  51C2               	movf	sprintf@c& (0+255),w,b
  2319  001034  0100               	movlb	0	; () banked
  2320  001036  5DBD               	subwf	sprintf@prec& (0+255),w,b
  2321  001038  0E80               	movlw	128
  2322  00103A  0100               	movlb	0	; () banked
  2323  00103C  BFC2               	btfsc	sprintf@c& (0+255),7,b
  2324  00103E  0E7F               	movlw	127
  2325  001040  0100               	movlb	0	; () banked
  2326  001042  59A6               	subwfb	??_sprintf& (0+255),w,b
  2327  001044  B0D8               	btfsc	status,0,c
  2328  001046  D007               	goto	l1651
  2329                           
  2330                           ; BSR set to: 0
  2331                           ;doprnt.c: 1342: prec = c;
  2332  001048  0100               	movlb	0	; () banked
  2333  00104A  51C2               	movf	sprintf@c& (0+255),w,b
  2334  00104C  0100               	movlb	0	; () banked
  2335  00104E  6FBD               	movwf	sprintf@prec& (0+255),b
  2336  001050  6BBE               	clrf	(sprintf@prec+1)& (0+255),b
  2337  001052  BFBD               	btfsc	sprintf@prec& (0+255),7,b
  2338  001054  07BE               	decf	(sprintf@prec+1)& (0+255),f,b
  2339  001056                     l1651:
  2340                           
  2341                           ; BSR set to: 0
  2342                           ;doprnt.c: 1422: {
  2343                           ;doprnt.c: 1438: if(flag & 0x03)
  2344                           
  2345                           ; BSR set to: 0
  2346                           
  2347                           ; BSR set to: 0
  2348  001056  0E03               	movlw	3
  2349  001058  0100               	movlb	0	; () banked
  2350  00105A  15B1               	andwf	sprintf@flag& (0+255),w,b
  2351  00105C  0100               	movlb	0	; () banked
  2352  00105E  6FA6               	movwf	??_sprintf& (0+255),b
  2353  001060  0E00               	movlw	0
  2354  001062  0100               	movlb	0	; () banked
  2355  001064  15B2               	andwf	(sprintf@flag+1)& (0+255),w,b
  2356  001066  0100               	movlb	0	; () banked
  2357  001068  6FA7               	movwf	(??_sprintf+1)& (0+255),b
  2358  00106A  0100               	movlb	0	; () banked
  2359  00106C  51A6               	movf	??_sprintf& (0+255),w,b
  2360  00106E  0100               	movlb	0	; () banked
  2361  001070  11A7               	iorwf	(??_sprintf+1)& (0+255),w,b
  2362  001072  B4D8               	btfsc	status,2,c
  2363  001074  D009               	goto	l1652
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2367  001076  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2368  00107A  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2369  00107E  0E2D               	movlw	45
  2370  001080  6EDF               	movwf	indf2,c
  2371  001082                     l7036:
  2372                           
  2373                           ; BSR set to: 0
  2374  001082  0100               	movlb	0	; () banked
  2375  001084  4B9F               	infsnz	sprintf@sp& (0+255),f,b
  2376  001086  2BA0               	incf	(sprintf@sp+1)& (0+255),f,b
  2377  001088                     l1652:
  2378                           
  2379                           ; BSR set to: 0
  2380                           
  2381                           ; BSR set to: 0
  2382                           
  2383                           ; BSR set to: 0
  2384  001088  C0A1  FFF6         	movff	sprintf@f,tblptrl
  2385  00108C  C0A2  FFF7         	movff	sprintf@f+1,tblptrh
  2386  001090  0100               	movlb	0	; () banked
  2387  001092  4BA1               	infsnz	sprintf@f& (0+255),f,b
  2388  001094  2BA2               	incf	(sprintf@f+1)& (0+255),f,b
  2389  001096                     	if	0	;tblptru may be non-zero
  2390  001096                     	endif
  2391  001096                     	if	0	;tblptru may be non-zero
  2392  001096                     	endif
  2393  001096  0008               	tblrd		*
  2394  001098  CFF5 F0C2          	movff	tablat,sprintf@c
  2395  00109C  0100               	movlb	0	; () banked
  2396  00109E  51C2               	movf	sprintf@c& (0+255),w,b
  2397  0010A0  A4D8               	btfss	status,2,c
  2398  0010A2  EF4F  F004         	goto	l1597
  2399  0010A6                     u6970:
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;doprnt.c: 1538: *sp = 0;
  2403                           
  2404                           ; BSR set to: 0
  2405                           
  2406                           ;doprnt.c: 1469: }
  2407                           ;doprnt.c: 1533: }
  2408                           ;doprnt.c: 1535: alldone:
  2409                           
  2410                           ; BSR set to: 0
  2411  0010A6  C09F  FFD9         	movff	sprintf@sp,fsr2l
  2412  0010AA  C0A0  FFDA         	movff	sprintf@sp+1,fsr2h
  2413  0010AE  0E00               	movlw	0
  2414  0010B0  6EDF               	movwf	indf2,c
  2415  0010B2  0012               	return	
  2416  0010B4                     __end_of_sprintf:
  2417                           	opt stack 0
  2418                           tblptru	equ	0xFF8
  2419                           tblptrh	equ	0xFF7
  2420                           tblptrl	equ	0xFF6
  2421                           tablat	equ	0xFF5
  2422                           prodh	equ	0xFF4
  2423                           prodl	equ	0xFF3
  2424                           intcon	equ	0xFF2
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           indf2	equ	0xFDF
  2428                           postinc2	equ	0xFDE
  2429                           postdec2	equ	0xFDD
  2430                           fsr2h	equ	0xFDA
  2431                           fsr2l	equ	0xFD9
  2432                           status	equ	0xFD8
  2433                           
  2434 ;; *************** function _scale *****************
  2435 ;; Defined at:
  2436 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;  scl             1    wreg     char 
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;  scl             1   41[BANK0 ] char 
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  3   35[BANK0 ] char 
  2443 ;; Registers used:
  2444 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2450 ;;      Params:         0       3       0       0       0       0       0       0       0
  2451 ;;      Locals:         0       4       0       0       0       0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2453 ;;      Totals:         0       7       0       0       0       0       0       0       0
  2454 ;;Total ram usage:        7 bytes
  2455 ;; Hardware stack levels used:    1
  2456 ;; Hardware stack levels required when called:    6
  2457 ;; This function calls:
  2458 ;;		___awdiv
  2459 ;;		___awmod
  2460 ;;		___ftmul
  2461 ;;		___wmul
  2462 ;; This function is called by:
  2463 ;;		_sprintf
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text2
  2468  0010B4                     __ptext2:
  2469                           	opt stack 0
  2470  0010B4                     _scale:
  2471                           	opt stack 23
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;incstack = 0
  2475                           ;scale@scl stored from wreg
  2476  0010B4  0100               	movlb	0	; () banked
  2477  0010B6  6F89               	movwf	scale@scl& (0+255),b
  2478                           
  2479                           ;doprnt.c: 428: if(scl < 0) {
  2480  0010B8  0100               	movlb	0	; () banked
  2481  0010BA  AF89               	btfss	scale@scl& (0+255),7,b
  2482  0010BC  D130               	goto	l1586
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;doprnt.c: 429: scl = -scl;
  2486  0010BE  0100               	movlb	0	; () banked
  2487  0010C0  6D89               	negf	scale@scl& (0+255),b
  2488                           
  2489                           ;doprnt.c: 430: if(scl>=110)
  2490  0010C2  0100               	movlb	0	; () banked
  2491  0010C4  5189               	movf	scale@scl& (0+255),w,b
  2492  0010C6  0A80               	xorlw	128
  2493  0010C8  0F12               	addlw	-238
  2494  0010CA  A0D8               	btfss	status,0,c
  2495  0010CC  D0AC               	goto	l1587
  2496                           
  2497                           ; BSR set to: 0
  2498                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2499  0010CE  0E00               	movlw	0
  2500  0010D0  0100               	movlb	0	; () banked
  2501  0010D2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2502  0010D4  0E03               	movlw	3
  2503  0010D6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2504  0010D8  0E00               	movlw	0
  2505  0010DA  0100               	movlb	0	; () banked
  2506  0010DC  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2507  0010DE  0E0A               	movlw	10
  2508  0010E0  6F68               	movwf	___awdiv@divisor& (0+255),b
  2509  0010E2  0E00               	movlw	0
  2510  0010E4  0100               	movlb	0	; () banked
  2511  0010E6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2512  0010E8  0E64               	movlw	100
  2513  0010EA  6F62               	movwf	___awmod@divisor& (0+255),b
  2514  0010EC  0100               	movlb	0	; () banked
  2515  0010EE  5189               	movf	scale@scl& (0+255),w,b
  2516  0010F0  0100               	movlb	0	; () banked
  2517  0010F2  6F60               	movwf	___awmod@dividend& (0+255),b
  2518  0010F4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2519  0010F6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2520  0010F8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2521  0010FA  ECA0  F014         	call	___awmod	;wreg free
  2522  0010FE  C060  F066         	movff	?___awmod,___awdiv@dividend
  2523  001102  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  2524  001106  ECE1  F012         	call	___awdiv	;wreg free
  2525  00110A  0E09               	movlw	9
  2526  00110C  0100               	movlb	0	; () banked
  2527  00110E  2566               	addwf	?___awdiv& (0+255),w,b
  2528  001110  0100               	movlb	0	; () banked
  2529  001112  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2530  001114  0E00               	movlw	0
  2531  001116  0100               	movlb	0	; () banked
  2532  001118  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2533  00111A  0100               	movlb	0	; () banked
  2534  00111C  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2535  00111E  EC65  F016         	call	___wmul	;wreg free
  2536  001122  0E50               	movlw	low __npowers_
  2537  001124  0100               	movlb	0	; () banked
  2538  001126  256E               	addwf	?___wmul& (0+255),w,b
  2539  001128  6EF6               	movwf	tblptrl,c
  2540  00112A  0E08               	movlw	high __npowers_
  2541  00112C  0100               	movlb	0	; () banked
  2542  00112E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2543  001130  6EF7               	movwf	tblptrh,c
  2544  001132                     	if	0	;There are less than 3 active tblptr bytes
  2545  001132                     	endif
  2546  001132  0009               	tblrd		*+
  2547  001134  CFF5 F077          	movff	tablat,___ftmul@f2
  2548  001138  0009               	tblrd		*+
  2549  00113A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2550  00113E  000A               	tblrd		*-
  2551  001140  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2552  001144  0E00               	movlw	0
  2553  001146  0100               	movlb	0	; () banked
  2554  001148  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2555  00114A  0E64               	movlw	100
  2556  00114C  6F68               	movwf	___awdiv@divisor& (0+255),b
  2557  00114E  0100               	movlb	0	; () banked
  2558  001150  5189               	movf	scale@scl& (0+255),w,b
  2559  001152  0100               	movlb	0	; () banked
  2560  001154  6F66               	movwf	___awdiv@dividend& (0+255),b
  2561  001156  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2562  001158  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2563  00115A  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2564  00115C  ECE1  F012         	call	___awdiv	;wreg free
  2565  001160  0E12               	movlw	18
  2566  001162  0100               	movlb	0	; () banked
  2567  001164  2566               	addwf	?___awdiv& (0+255),w,b
  2568  001166  0100               	movlb	0	; () banked
  2569  001168  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2570  00116A  0E00               	movlw	0
  2571  00116C  0100               	movlb	0	; () banked
  2572  00116E  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2573  001170  0100               	movlb	0	; () banked
  2574  001172  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2575  001174  0E00               	movlw	0
  2576  001176  0100               	movlb	0	; () banked
  2577  001178  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2578  00117A  0E03               	movlw	3
  2579  00117C  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2580  00117E  EC65  F016         	call	___wmul	;wreg free
  2581  001182  0E50               	movlw	low __npowers_
  2582  001184  0100               	movlb	0	; () banked
  2583  001186  256E               	addwf	?___wmul& (0+255),w,b
  2584  001188  6EF6               	movwf	tblptrl,c
  2585  00118A  0E08               	movlw	high __npowers_
  2586  00118C  0100               	movlb	0	; () banked
  2587  00118E  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2588  001190  6EF7               	movwf	tblptrh,c
  2589  001192                     	if	0	;There are less than 3 active tblptr bytes
  2590  001192                     	endif
  2591  001192  0009               	tblrd		*+
  2592  001194  CFF5 F074          	movff	tablat,___ftmul@f1
  2593  001198  0009               	tblrd		*+
  2594  00119A  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2595  00119E  000A               	tblrd		*-
  2596  0011A0  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2597  0011A4  ECA6  F010         	call	___ftmul	;wreg free
  2598  0011A8  C074  F086         	movff	?___ftmul,_scale$3833
  2599  0011AC  C075  F087         	movff	?___ftmul+1,_scale$3833+1
  2600  0011B0  C076  F088         	movff	?___ftmul+2,_scale$3833+2
  2601                           
  2602                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2603  0011B4  C086  F074         	movff	_scale$3833,___ftmul@f1
  2604  0011B8  C087  F075         	movff	_scale$3833+1,___ftmul@f1+1
  2605  0011BC  C088  F076         	movff	_scale$3833+2,___ftmul@f1+2
  2606  0011C0  0E00               	movlw	0
  2607  0011C2  0100               	movlb	0	; () banked
  2608  0011C4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2609  0011C6  0E03               	movlw	3
  2610  0011C8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2611  0011CA  0E00               	movlw	0
  2612  0011CC  0100               	movlb	0	; () banked
  2613  0011CE  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2614  0011D0  0E0A               	movlw	10
  2615  0011D2  6F62               	movwf	___awmod@divisor& (0+255),b
  2616  0011D4  0100               	movlb	0	; () banked
  2617  0011D6  5189               	movf	scale@scl& (0+255),w,b
  2618  0011D8  0100               	movlb	0	; () banked
  2619  0011DA  6F60               	movwf	___awmod@dividend& (0+255),b
  2620  0011DC  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2621  0011DE  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2622  0011E0  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2623  0011E2  ECA0  F014         	call	___awmod	;wreg free
  2624  0011E6  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2625  0011EA  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2626  0011EE  EC65  F016         	call	___wmul	;wreg free
  2627  0011F2  0E50               	movlw	low __npowers_
  2628  0011F4  0100               	movlb	0	; () banked
  2629  0011F6  256E               	addwf	?___wmul& (0+255),w,b
  2630  0011F8  6EF6               	movwf	tblptrl,c
  2631  0011FA  0E08               	movlw	high __npowers_
  2632  0011FC  0100               	movlb	0	; () banked
  2633  0011FE  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2634  001200  6EF7               	movwf	tblptrh,c
  2635  001202                     	if	0	;There are less than 3 active tblptr bytes
  2636  001202                     	endif
  2637  001202  0009               	tblrd		*+
  2638  001204  CFF5 F077          	movff	tablat,___ftmul@f2
  2639  001208  0009               	tblrd		*+
  2640  00120A  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2641  00120E  000A               	tblrd		*-
  2642  001210  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2643  001214  ECA6  F010         	call	___ftmul	;wreg free
  2644  001218  C074  F083         	movff	?___ftmul,?_scale
  2645  00121C  C075  F084         	movff	?___ftmul+1,?_scale+1
  2646  001220  C076  F085         	movff	?___ftmul+2,?_scale+2
  2647  001224  0012               	return	
  2648  001226                     l1587:
  2649                           
  2650                           ;doprnt.c: 432: else if(scl > 10)
  2651  001226  0100               	movlb	0	; () banked
  2652  001228  5189               	movf	scale@scl& (0+255),w,b
  2653  00122A  0A80               	xorlw	128
  2654  00122C  0F75               	addlw	-139
  2655  00122E  A0D8               	btfss	status,0,c
  2656  001230  D063               	goto	l1590
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2660  001232  0E00               	movlw	0
  2661  001234  0100               	movlb	0	; () banked
  2662  001236  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2663  001238  0E0A               	movlw	10
  2664  00123A  6F68               	movwf	___awdiv@divisor& (0+255),b
  2665  00123C  0100               	movlb	0	; () banked
  2666  00123E  5189               	movf	scale@scl& (0+255),w,b
  2667  001240  0100               	movlb	0	; () banked
  2668  001242  6F66               	movwf	___awdiv@dividend& (0+255),b
  2669  001244  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2670  001246  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2671  001248  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2672  00124A  ECE1  F012         	call	___awdiv	;wreg free
  2673  00124E  0E09               	movlw	9
  2674  001250  0100               	movlb	0	; () banked
  2675  001252  2566               	addwf	?___awdiv& (0+255),w,b
  2676  001254  0100               	movlb	0	; () banked
  2677  001256  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2678  001258  0E00               	movlw	0
  2679  00125A  0100               	movlb	0	; () banked
  2680  00125C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2681  00125E  0100               	movlb	0	; () banked
  2682  001260  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2683  001262  0E00               	movlw	0
  2684  001264  0100               	movlb	0	; () banked
  2685  001266  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2686  001268  0E03               	movlw	3
  2687  00126A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2688  00126C  EC65  F016         	call	___wmul	;wreg free
  2689  001270  0E50               	movlw	low __npowers_
  2690  001272  0100               	movlb	0	; () banked
  2691  001274  256E               	addwf	?___wmul& (0+255),w,b
  2692  001276  6EF6               	movwf	tblptrl,c
  2693  001278  0E08               	movlw	high __npowers_
  2694  00127A  0100               	movlb	0	; () banked
  2695  00127C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2696  00127E  6EF7               	movwf	tblptrh,c
  2697  001280                     	if	0	;There are less than 3 active tblptr bytes
  2698  001280                     	endif
  2699  001280  0009               	tblrd		*+
  2700  001282  CFF5 F074          	movff	tablat,___ftmul@f1
  2701  001286  0009               	tblrd		*+
  2702  001288  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2703  00128C  000A               	tblrd		*-
  2704  00128E  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2705  001292  0E00               	movlw	0
  2706  001294  0100               	movlb	0	; () banked
  2707  001296  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2708  001298  0E03               	movlw	3
  2709  00129A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2710  00129C  0E00               	movlw	0
  2711  00129E  0100               	movlb	0	; () banked
  2712  0012A0  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2713  0012A2  0E0A               	movlw	10
  2714  0012A4  6F62               	movwf	___awmod@divisor& (0+255),b
  2715  0012A6  0100               	movlb	0	; () banked
  2716  0012A8  5189               	movf	scale@scl& (0+255),w,b
  2717  0012AA  0100               	movlb	0	; () banked
  2718  0012AC  6F60               	movwf	___awmod@dividend& (0+255),b
  2719  0012AE  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2720  0012B0  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2721  0012B2  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2722  0012B4  ECA0  F014         	call	___awmod	;wreg free
  2723  0012B8  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2724  0012BC  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2725  0012C0  EC65  F016         	call	___wmul	;wreg free
  2726  0012C4  0E50               	movlw	low __npowers_
  2727  0012C6  0100               	movlb	0	; () banked
  2728  0012C8  256E               	addwf	?___wmul& (0+255),w,b
  2729  0012CA  6EF6               	movwf	tblptrl,c
  2730  0012CC  0E08               	movlw	high __npowers_
  2731  0012CE  0100               	movlb	0	; () banked
  2732  0012D0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2733  0012D2  6EF7               	movwf	tblptrh,c
  2734  0012D4                     	if	0	;There are less than 3 active tblptr bytes
  2735  0012D4                     	endif
  2736  0012D4  0009               	tblrd		*+
  2737  0012D6  CFF5 F077          	movff	tablat,___ftmul@f2
  2738  0012DA  0009               	tblrd		*+
  2739  0012DC  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2740  0012E0  000A               	tblrd		*-
  2741  0012E2  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2742  0012E6  ECA6  F010         	call	___ftmul	;wreg free
  2743  0012EA  C074  F083         	movff	?___ftmul,?_scale
  2744  0012EE  C075  F084         	movff	?___ftmul+1,?_scale+1
  2745  0012F2  C076  F085         	movff	?___ftmul+2,?_scale+2
  2746  0012F6  0012               	return	
  2747  0012F8                     l1590:
  2748                           
  2749                           ;doprnt.c: 434: return _npowers_[scl];
  2750  0012F8  0100               	movlb	0	; () banked
  2751  0012FA  5189               	movf	scale@scl& (0+255),w,b
  2752  0012FC  0D03               	mullw	3
  2753  0012FE  0E50               	movlw	low __npowers_
  2754  001300  24F3               	addwf	prodl,w,c
  2755  001302  6EF6               	movwf	tblptrl,c
  2756  001304  0E08               	movlw	high __npowers_
  2757  001306  20F4               	addwfc	prodh,w,c
  2758  001308  6EF7               	movwf	tblptrh,c
  2759  00130A                     	if	0	;There are less than 3 active tblptr bytes
  2760  00130A                     	endif
  2761  00130A  0009               	tblrd		*+
  2762  00130C  CFF5 F083          	movff	tablat,?_scale
  2763  001310  0009               	tblrd		*+
  2764  001312  CFF5 F084          	movff	tablat,?_scale+1
  2765  001316  000A               	tblrd		*-
  2766  001318  CFF5 F085          	movff	tablat,?_scale+2
  2767                           
  2768                           ; BSR set to: 0
  2769  00131C  0012               	return	
  2770  00131E                     l1586:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;doprnt.c: 435: }
  2774                           ;doprnt.c: 436: if(scl>=110)
  2775                           
  2776                           ; BSR set to: 0
  2777  00131E  0100               	movlb	0	; () banked
  2778  001320  5189               	movf	scale@scl& (0+255),w,b
  2779  001322  0A80               	xorlw	128
  2780  001324  0F12               	addlw	-238
  2781  001326  A0D8               	btfss	status,0,c
  2782  001328  D0AC               	goto	l1591
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2786  00132A  0E00               	movlw	0
  2787  00132C  0100               	movlb	0	; () banked
  2788  00132E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2789  001330  0E03               	movlw	3
  2790  001332  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2791  001334  0E00               	movlw	0
  2792  001336  0100               	movlb	0	; () banked
  2793  001338  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2794  00133A  0E0A               	movlw	10
  2795  00133C  6F68               	movwf	___awdiv@divisor& (0+255),b
  2796  00133E  0E00               	movlw	0
  2797  001340  0100               	movlb	0	; () banked
  2798  001342  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2799  001344  0E64               	movlw	100
  2800  001346  6F62               	movwf	___awmod@divisor& (0+255),b
  2801  001348  0100               	movlb	0	; () banked
  2802  00134A  5189               	movf	scale@scl& (0+255),w,b
  2803  00134C  0100               	movlb	0	; () banked
  2804  00134E  6F60               	movwf	___awmod@dividend& (0+255),b
  2805  001350  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2806  001352  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2807  001354  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2808  001356  ECA0  F014         	call	___awmod	;wreg free
  2809  00135A  C060  F066         	movff	?___awmod,___awdiv@dividend
  2810  00135E  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  2811  001362  ECE1  F012         	call	___awdiv	;wreg free
  2812  001366  0E09               	movlw	9
  2813  001368  0100               	movlb	0	; () banked
  2814  00136A  2566               	addwf	?___awdiv& (0+255),w,b
  2815  00136C  0100               	movlb	0	; () banked
  2816  00136E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2817  001370  0E00               	movlw	0
  2818  001372  0100               	movlb	0	; () banked
  2819  001374  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2820  001376  0100               	movlb	0	; () banked
  2821  001378  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2822  00137A  EC65  F016         	call	___wmul	;wreg free
  2823  00137E  0E29               	movlw	low __powers_
  2824  001380  0100               	movlb	0	; () banked
  2825  001382  256E               	addwf	?___wmul& (0+255),w,b
  2826  001384  6EF6               	movwf	tblptrl,c
  2827  001386  0E08               	movlw	high __powers_
  2828  001388  0100               	movlb	0	; () banked
  2829  00138A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2830  00138C  6EF7               	movwf	tblptrh,c
  2831  00138E                     	if	0	;There are less than 3 active tblptr bytes
  2832  00138E                     	endif
  2833  00138E  0009               	tblrd		*+
  2834  001390  CFF5 F077          	movff	tablat,___ftmul@f2
  2835  001394  0009               	tblrd		*+
  2836  001396  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2837  00139A  000A               	tblrd		*-
  2838  00139C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2839  0013A0  0E00               	movlw	0
  2840  0013A2  0100               	movlb	0	; () banked
  2841  0013A4  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2842  0013A6  0E64               	movlw	100
  2843  0013A8  6F68               	movwf	___awdiv@divisor& (0+255),b
  2844  0013AA  0100               	movlb	0	; () banked
  2845  0013AC  5189               	movf	scale@scl& (0+255),w,b
  2846  0013AE  0100               	movlb	0	; () banked
  2847  0013B0  6F66               	movwf	___awdiv@dividend& (0+255),b
  2848  0013B2  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2849  0013B4  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2850  0013B6  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2851  0013B8  ECE1  F012         	call	___awdiv	;wreg free
  2852  0013BC  0E12               	movlw	18
  2853  0013BE  0100               	movlb	0	; () banked
  2854  0013C0  2566               	addwf	?___awdiv& (0+255),w,b
  2855  0013C2  0100               	movlb	0	; () banked
  2856  0013C4  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2857  0013C6  0E00               	movlw	0
  2858  0013C8  0100               	movlb	0	; () banked
  2859  0013CA  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2860  0013CC  0100               	movlb	0	; () banked
  2861  0013CE  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2862  0013D0  0E00               	movlw	0
  2863  0013D2  0100               	movlb	0	; () banked
  2864  0013D4  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2865  0013D6  0E03               	movlw	3
  2866  0013D8  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2867  0013DA  EC65  F016         	call	___wmul	;wreg free
  2868  0013DE  0E29               	movlw	low __powers_
  2869  0013E0  0100               	movlb	0	; () banked
  2870  0013E2  256E               	addwf	?___wmul& (0+255),w,b
  2871  0013E4  6EF6               	movwf	tblptrl,c
  2872  0013E6  0E08               	movlw	high __powers_
  2873  0013E8  0100               	movlb	0	; () banked
  2874  0013EA  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2875  0013EC  6EF7               	movwf	tblptrh,c
  2876  0013EE                     	if	0	;There are less than 3 active tblptr bytes
  2877  0013EE                     	endif
  2878  0013EE  0009               	tblrd		*+
  2879  0013F0  CFF5 F074          	movff	tablat,___ftmul@f1
  2880  0013F4  0009               	tblrd		*+
  2881  0013F6  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2882  0013FA  000A               	tblrd		*-
  2883  0013FC  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2884  001400  ECA6  F010         	call	___ftmul	;wreg free
  2885  001404  C074  F086         	movff	?___ftmul,_scale$3833
  2886  001408  C075  F087         	movff	?___ftmul+1,_scale$3833+1
  2887  00140C  C076  F088         	movff	?___ftmul+2,_scale$3833+2
  2888                           
  2889                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2890  001410  C086  F074         	movff	_scale$3833,___ftmul@f1
  2891  001414  C087  F075         	movff	_scale$3833+1,___ftmul@f1+1
  2892  001418  C088  F076         	movff	_scale$3833+2,___ftmul@f1+2
  2893  00141C  0E00               	movlw	0
  2894  00141E  0100               	movlb	0	; () banked
  2895  001420  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2896  001422  0E03               	movlw	3
  2897  001424  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2898  001426  0E00               	movlw	0
  2899  001428  0100               	movlb	0	; () banked
  2900  00142A  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  2901  00142C  0E0A               	movlw	10
  2902  00142E  6F62               	movwf	___awmod@divisor& (0+255),b
  2903  001430  0100               	movlb	0	; () banked
  2904  001432  5189               	movf	scale@scl& (0+255),w,b
  2905  001434  0100               	movlb	0	; () banked
  2906  001436  6F60               	movwf	___awmod@dividend& (0+255),b
  2907  001438  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  2908  00143A  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  2909  00143C  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  2910  00143E  ECA0  F014         	call	___awmod	;wreg free
  2911  001442  C060  F06E         	movff	?___awmod,___wmul@multiplier
  2912  001446  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  2913  00144A  EC65  F016         	call	___wmul	;wreg free
  2914  00144E  0E29               	movlw	low __powers_
  2915  001450  0100               	movlb	0	; () banked
  2916  001452  256E               	addwf	?___wmul& (0+255),w,b
  2917  001454  6EF6               	movwf	tblptrl,c
  2918  001456  0E08               	movlw	high __powers_
  2919  001458  0100               	movlb	0	; () banked
  2920  00145A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2921  00145C  6EF7               	movwf	tblptrh,c
  2922  00145E                     	if	0	;There are less than 3 active tblptr bytes
  2923  00145E                     	endif
  2924  00145E  0009               	tblrd		*+
  2925  001460  CFF5 F077          	movff	tablat,___ftmul@f2
  2926  001464  0009               	tblrd		*+
  2927  001466  CFF5 F078          	movff	tablat,___ftmul@f2+1
  2928  00146A  000A               	tblrd		*-
  2929  00146C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  2930  001470  ECA6  F010         	call	___ftmul	;wreg free
  2931  001474  C074  F083         	movff	?___ftmul,?_scale
  2932  001478  C075  F084         	movff	?___ftmul+1,?_scale+1
  2933  00147C  C076  F085         	movff	?___ftmul+2,?_scale+2
  2934  001480  0012               	return	
  2935  001482                     l1591:
  2936                           
  2937                           ;doprnt.c: 438: else if(scl > 10)
  2938  001482  0100               	movlb	0	; () banked
  2939  001484  5189               	movf	scale@scl& (0+255),w,b
  2940  001486  0A80               	xorlw	128
  2941  001488  0F75               	addlw	-139
  2942  00148A  A0D8               	btfss	status,0,c
  2943  00148C  D063               	goto	l1593
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2947  00148E  0E00               	movlw	0
  2948  001490  0100               	movlb	0	; () banked
  2949  001492  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  2950  001494  0E0A               	movlw	10
  2951  001496  6F68               	movwf	___awdiv@divisor& (0+255),b
  2952  001498  0100               	movlb	0	; () banked
  2953  00149A  5189               	movf	scale@scl& (0+255),w,b
  2954  00149C  0100               	movlb	0	; () banked
  2955  00149E  6F66               	movwf	___awdiv@dividend& (0+255),b
  2956  0014A0  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  2957  0014A2  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
  2958  0014A4  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
  2959  0014A6  ECE1  F012         	call	___awdiv	;wreg free
  2960  0014AA  0E09               	movlw	9
  2961  0014AC  0100               	movlb	0	; () banked
  2962  0014AE  2566               	addwf	?___awdiv& (0+255),w,b
  2963  0014B0  0100               	movlb	0	; () banked
  2964  0014B2  6F6E               	movwf	___wmul@multiplier& (0+255),b
  2965  0014B4  0E00               	movlw	0
  2966  0014B6  0100               	movlb	0	; () banked
  2967  0014B8  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  2968  0014BA  0100               	movlb	0	; () banked
  2969  0014BC  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  2970  0014BE  0E00               	movlw	0
  2971  0014C0  0100               	movlb	0	; () banked
  2972  0014C2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2973  0014C4  0E03               	movlw	3
  2974  0014C6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2975  0014C8  EC65  F016         	call	___wmul	;wreg free
  2976  0014CC  0E29               	movlw	low __powers_
  2977  0014CE  0100               	movlb	0	; () banked
  2978  0014D0  256E               	addwf	?___wmul& (0+255),w,b
  2979  0014D2  6EF6               	movwf	tblptrl,c
  2980  0014D4  0E08               	movlw	high __powers_
  2981  0014D6  0100               	movlb	0	; () banked
  2982  0014D8  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  2983  0014DA  6EF7               	movwf	tblptrh,c
  2984  0014DC                     	if	0	;There are less than 3 active tblptr bytes
  2985  0014DC                     	endif
  2986  0014DC  0009               	tblrd		*+
  2987  0014DE  CFF5 F074          	movff	tablat,___ftmul@f1
  2988  0014E2  0009               	tblrd		*+
  2989  0014E4  CFF5 F075          	movff	tablat,___ftmul@f1+1
  2990  0014E8  000A               	tblrd		*-
  2991  0014EA  CFF5 F076          	movff	tablat,___ftmul@f1+2
  2992  0014EE  0E00               	movlw	0
  2993  0014F0  0100               	movlb	0	; () banked
  2994  0014F2  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2995  0014F4  0E03               	movlw	3
  2996  0014F6  6F70               	movwf	___wmul@multiplicand& (0+255),b
  2997  0014F8  0E00               	movlw	0
  2998  0014FA  0100               	movlb	0	; () banked
  2999  0014FC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3000  0014FE  0E0A               	movlw	10
  3001  001500  6F62               	movwf	___awmod@divisor& (0+255),b
  3002  001502  0100               	movlb	0	; () banked
  3003  001504  5189               	movf	scale@scl& (0+255),w,b
  3004  001506  0100               	movlb	0	; () banked
  3005  001508  6F60               	movwf	___awmod@dividend& (0+255),b
  3006  00150A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3007  00150C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
  3008  00150E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
  3009  001510  ECA0  F014         	call	___awmod	;wreg free
  3010  001514  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3011  001518  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3012  00151C  EC65  F016         	call	___wmul	;wreg free
  3013  001520  0E29               	movlw	low __powers_
  3014  001522  0100               	movlb	0	; () banked
  3015  001524  256E               	addwf	?___wmul& (0+255),w,b
  3016  001526  6EF6               	movwf	tblptrl,c
  3017  001528  0E08               	movlw	high __powers_
  3018  00152A  0100               	movlb	0	; () banked
  3019  00152C  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3020  00152E  6EF7               	movwf	tblptrh,c
  3021  001530                     	if	0	;There are less than 3 active tblptr bytes
  3022  001530                     	endif
  3023  001530  0009               	tblrd		*+
  3024  001532  CFF5 F077          	movff	tablat,___ftmul@f2
  3025  001536  0009               	tblrd		*+
  3026  001538  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3027  00153C  000A               	tblrd		*-
  3028  00153E  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3029  001542  ECA6  F010         	call	___ftmul	;wreg free
  3030  001546  C074  F083         	movff	?___ftmul,?_scale
  3031  00154A  C075  F084         	movff	?___ftmul+1,?_scale+1
  3032  00154E  C076  F085         	movff	?___ftmul+2,?_scale+2
  3033  001552  0012               	return	
  3034  001554                     l1593:
  3035                           
  3036                           ;doprnt.c: 440: return _powers_[scl];
  3037  001554  0100               	movlb	0	; () banked
  3038  001556  5189               	movf	scale@scl& (0+255),w,b
  3039  001558  0D03               	mullw	3
  3040  00155A  0E29               	movlw	low __powers_
  3041  00155C  24F3               	addwf	prodl,w,c
  3042  00155E  6EF6               	movwf	tblptrl,c
  3043  001560  0E08               	movlw	high __powers_
  3044  001562  20F4               	addwfc	prodh,w,c
  3045  001564  6EF7               	movwf	tblptrh,c
  3046  001566                     	if	0	;There are less than 3 active tblptr bytes
  3047  001566                     	endif
  3048  001566  0009               	tblrd		*+
  3049  001568  CFF5 F083          	movff	tablat,?_scale
  3050  00156C  0009               	tblrd		*+
  3051  00156E  CFF5 F084          	movff	tablat,?_scale+1
  3052  001572  000A               	tblrd		*-
  3053  001574  CFF5 F085          	movff	tablat,?_scale+2
  3054  001578  0012               	return	
  3055  00157A                     __end_of_scale:
  3056                           	opt stack 0
  3057                           tblptru	equ	0xFF8
  3058                           tblptrh	equ	0xFF7
  3059                           tblptrl	equ	0xFF6
  3060                           tablat	equ	0xFF5
  3061                           prodh	equ	0xFF4
  3062                           prodl	equ	0xFF3
  3063                           intcon	equ	0xFF2
  3064                           postinc0	equ	0xFEE
  3065                           wreg	equ	0xFE8
  3066                           indf2	equ	0xFDF
  3067                           postinc2	equ	0xFDE
  3068                           postdec2	equ	0xFDD
  3069                           fsr2h	equ	0xFDA
  3070                           fsr2l	equ	0xFD9
  3071                           status	equ	0xFD8
  3072                           
  3073 ;; *************** function _isdigit *****************
  3074 ;; Defined at:
  3075 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\isdigit.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  c               1    wreg     unsigned char 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  c               1    1[BANK0 ] unsigned char 
  3080 ;; Return value:  Size  Location     Type
  3081 ;;		None               void
  3082 ;; Registers used:
  3083 ;;		wreg, status,2, status,0
  3084 ;; Tracked objects:
  3085 ;;		On entry : 0/0
  3086 ;;		On exit  : 0/0
  3087 ;;		Unchanged: 0/0
  3088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3089 ;;      Params:         0       0       0       0       0       0       0       0       0
  3090 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3091 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3092 ;;      Totals:         1       2       0       0       0       0       0       0       0
  3093 ;;Total ram usage:        3 bytes
  3094 ;; Hardware stack levels used:    1
  3095 ;; Hardware stack levels required when called:    4
  3096 ;; This function calls:
  3097 ;;		Nothing
  3098 ;; This function is called by:
  3099 ;;		_sprintf
  3100 ;; This function uses a non-reentrant model
  3101 ;;
  3102                           
  3103                           	psect	text3
  3104  002E24                     __ptext3:
  3105                           	opt stack 0
  3106  002E24                     _isdigit:
  3107                           	opt stack 25
  3108                           
  3109                           ;incstack = 0
  3110                           ;isdigit@c stored from wreg
  3111  002E24  0100               	movlb	0	; () banked
  3112  002E26  6F61               	movwf	isdigit@c& (0+255),b
  3113  002E28  0E00               	movlw	0
  3114  002E2A  0100               	movlb	0	; () banked
  3115  002E2C  6F60               	movwf	_isdigit$3265& (0+255),b
  3116                           
  3117                           ; BSR set to: 0
  3118  002E2E  0E3A               	movlw	58
  3119  002E30  0100               	movlb	0	; () banked
  3120  002E32  6161               	cpfslt	isdigit@c& (0+255),b
  3121  002E34  D007               	goto	l2025
  3122                           
  3123                           ; BSR set to: 0
  3124  002E36  0E2F               	movlw	47
  3125  002E38  0100               	movlb	0	; () banked
  3126  002E3A  6561               	cpfsgt	isdigit@c& (0+255),b
  3127  002E3C  D003               	goto	l2025
  3128                           
  3129                           ; BSR set to: 0
  3130  002E3E  0E01               	movlw	1
  3131  002E40  0100               	movlb	0	; () banked
  3132  002E42  6F60               	movwf	_isdigit$3265& (0+255),b
  3133  002E44                     l2025:
  3134                           
  3135                           ; BSR set to: 0
  3136                           
  3137                           ; BSR set to: 0
  3138  002E44  C060  F020         	movff	_isdigit$3265,??_isdigit
  3139  002E48  3020               	rrcf	??_isdigit,w,c
  3140  002E4A  0012               	return	
  3141  002E4C                     __end_of_isdigit:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           prodh	equ	0xFF4
  3148                           prodl	equ	0xFF3
  3149                           intcon	equ	0xFF2
  3150                           postinc0	equ	0xFEE
  3151                           wreg	equ	0xFE8
  3152                           indf2	equ	0xFDF
  3153                           postinc2	equ	0xFDE
  3154                           postdec2	equ	0xFDD
  3155                           fsr2h	equ	0xFDA
  3156                           fsr2l	equ	0xFD9
  3157                           status	equ	0xFD8
  3158                           
  3159 ;; *************** function _fround *****************
  3160 ;; Defined at:
  3161 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;  prec            1    wreg     unsigned char 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;  prec            1   44[BANK0 ] unsigned char 
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  3   35[BANK0 ] unsigned char 
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3175 ;;      Params:         0       3       0       0       0       0       0       0       0
  3176 ;;      Locals:         0       7       0       0       0       0       0       0       0
  3177 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3178 ;;      Totals:         0      10       0       0       0       0       0       0       0
  3179 ;;Total ram usage:       10 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    6
  3182 ;; This function calls:
  3183 ;;		___awdiv
  3184 ;;		___awmod
  3185 ;;		___ftmul
  3186 ;;		___wmul
  3187 ;; This function is called by:
  3188 ;;		_sprintf
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text4
  3193  00157A                     __ptext4:
  3194                           	opt stack 0
  3195  00157A                     _fround:
  3196                           	opt stack 23
  3197                           
  3198                           ; BSR set to: 0
  3199                           ;incstack = 0
  3200                           ;fround@prec stored from wreg
  3201  00157A  0100               	movlb	0	; () banked
  3202  00157C  6F8C               	movwf	fround@prec& (0+255),b
  3203                           
  3204                           ;doprnt.c: 413: if(prec>=110)
  3205  00157E  0E6D               	movlw	109
  3206  001580  0100               	movlb	0	; () banked
  3207  001582  658C               	cpfsgt	fround@prec& (0+255),b
  3208  001584  D0BA               	goto	l1580
  3209                           
  3210                           ; BSR set to: 0
  3211                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3212  001586  0E00               	movlw	0
  3213  001588  0100               	movlb	0	; () banked
  3214  00158A  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3215  00158C  0E03               	movlw	3
  3216  00158E  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3217  001590  0E00               	movlw	0
  3218  001592  0100               	movlb	0	; () banked
  3219  001594  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3220  001596  0E0A               	movlw	10
  3221  001598  6F68               	movwf	___awdiv@divisor& (0+255),b
  3222  00159A  0E00               	movlw	0
  3223  00159C  0100               	movlb	0	; () banked
  3224  00159E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3225  0015A0  0E64               	movlw	100
  3226  0015A2  6F62               	movwf	___awmod@divisor& (0+255),b
  3227  0015A4  C08C  F060         	movff	fround@prec,___awmod@dividend
  3228  0015A8  0100               	movlb	0	; () banked
  3229  0015AA  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3230  0015AC  ECA0  F014         	call	___awmod	;wreg free
  3231  0015B0  C060  F066         	movff	?___awmod,___awdiv@dividend
  3232  0015B4  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
  3233  0015B8  ECE1  F012         	call	___awdiv	;wreg free
  3234  0015BC  0E09               	movlw	9
  3235  0015BE  0100               	movlb	0	; () banked
  3236  0015C0  2566               	addwf	?___awdiv& (0+255),w,b
  3237  0015C2  0100               	movlb	0	; () banked
  3238  0015C4  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3239  0015C6  0E00               	movlw	0
  3240  0015C8  0100               	movlb	0	; () banked
  3241  0015CA  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3242  0015CC  0100               	movlb	0	; () banked
  3243  0015CE  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3244  0015D0  EC65  F016         	call	___wmul	;wreg free
  3245  0015D4  0E50               	movlw	low __npowers_
  3246  0015D6  0100               	movlb	0	; () banked
  3247  0015D8  256E               	addwf	?___wmul& (0+255),w,b
  3248  0015DA  6EF6               	movwf	tblptrl,c
  3249  0015DC  0E08               	movlw	high __npowers_
  3250  0015DE  0100               	movlb	0	; () banked
  3251  0015E0  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3252  0015E2  6EF7               	movwf	tblptrh,c
  3253  0015E4                     	if	0	;There are less than 3 active tblptr bytes
  3254  0015E4                     	endif
  3255  0015E4  0009               	tblrd		*+
  3256  0015E6  CFF5 F077          	movff	tablat,___ftmul@f2
  3257  0015EA  0009               	tblrd		*+
  3258  0015EC  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3259  0015F0  000A               	tblrd		*-
  3260  0015F2  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3261  0015F6  0E00               	movlw	0
  3262  0015F8  0100               	movlb	0	; () banked
  3263  0015FA  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3264  0015FC  0E64               	movlw	100
  3265  0015FE  6F68               	movwf	___awdiv@divisor& (0+255),b
  3266  001600  C08C  F066         	movff	fround@prec,___awdiv@dividend
  3267  001604  0100               	movlb	0	; () banked
  3268  001606  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3269  001608  ECE1  F012         	call	___awdiv	;wreg free
  3270  00160C  0E12               	movlw	18
  3271  00160E  0100               	movlb	0	; () banked
  3272  001610  2566               	addwf	?___awdiv& (0+255),w,b
  3273  001612  0100               	movlb	0	; () banked
  3274  001614  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3275  001616  0E00               	movlw	0
  3276  001618  0100               	movlb	0	; () banked
  3277  00161A  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3278  00161C  0100               	movlb	0	; () banked
  3279  00161E  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3280  001620  0E00               	movlw	0
  3281  001622  0100               	movlb	0	; () banked
  3282  001624  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3283  001626  0E03               	movlw	3
  3284  001628  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3285  00162A  EC65  F016         	call	___wmul	;wreg free
  3286  00162E  0E50               	movlw	low __npowers_
  3287  001630  0100               	movlb	0	; () banked
  3288  001632  256E               	addwf	?___wmul& (0+255),w,b
  3289  001634  6EF6               	movwf	tblptrl,c
  3290  001636  0E08               	movlw	high __npowers_
  3291  001638  0100               	movlb	0	; () banked
  3292  00163A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3293  00163C  6EF7               	movwf	tblptrh,c
  3294  00163E                     	if	0	;There are less than 3 active tblptr bytes
  3295  00163E                     	endif
  3296  00163E  0009               	tblrd		*+
  3297  001640  CFF5 F074          	movff	tablat,___ftmul@f1
  3298  001644  0009               	tblrd		*+
  3299  001646  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3300  00164A  000A               	tblrd		*-
  3301  00164C  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3302  001650  ECA6  F010         	call	___ftmul	;wreg free
  3303  001654  C074  F089         	movff	?___ftmul,_fround$3831
  3304  001658  C075  F08A         	movff	?___ftmul+1,_fround$3831+1
  3305  00165C  C076  F08B         	movff	?___ftmul+2,_fround$3831+2
  3306                           
  3307                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3308  001660  0E00               	movlw	0
  3309  001662  0100               	movlb	0	; () banked
  3310  001664  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3311  001666  0E03               	movlw	3
  3312  001668  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3313  00166A  0E00               	movlw	0
  3314  00166C  0100               	movlb	0	; () banked
  3315  00166E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3316  001670  0E0A               	movlw	10
  3317  001672  6F62               	movwf	___awmod@divisor& (0+255),b
  3318  001674  C08C  F060         	movff	fround@prec,___awmod@dividend
  3319  001678  0100               	movlb	0	; () banked
  3320  00167A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3321  00167C  ECA0  F014         	call	___awmod	;wreg free
  3322  001680  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3323  001684  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3324  001688  EC65  F016         	call	___wmul	;wreg free
  3325  00168C  0E50               	movlw	low __npowers_
  3326  00168E  0100               	movlb	0	; () banked
  3327  001690  256E               	addwf	?___wmul& (0+255),w,b
  3328  001692  6EF6               	movwf	tblptrl,c
  3329  001694  0E08               	movlw	high __npowers_
  3330  001696  0100               	movlb	0	; () banked
  3331  001698  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3332  00169A  6EF7               	movwf	tblptrh,c
  3333  00169C                     	if	0	;There are less than 3 active tblptr bytes
  3334  00169C                     	endif
  3335  00169C  0009               	tblrd		*+
  3336  00169E  CFF5 F077          	movff	tablat,___ftmul@f2
  3337  0016A2  0009               	tblrd		*+
  3338  0016A4  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3339  0016A8  000A               	tblrd		*-
  3340  0016AA  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3341  0016AE  C089  F074         	movff	_fround$3831,___ftmul@f1
  3342  0016B2  C08A  F075         	movff	_fround$3831+1,___ftmul@f1+1
  3343  0016B6  C08B  F076         	movff	_fround$3831+2,___ftmul@f1+2
  3344  0016BA  ECA6  F010         	call	___ftmul	;wreg free
  3345  0016BE  C074  F086         	movff	?___ftmul,_fround$3832
  3346  0016C2  C075  F087         	movff	?___ftmul+1,_fround$3832+1
  3347  0016C6  C076  F088         	movff	?___ftmul+2,_fround$3832+2
  3348                           
  3349                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3350  0016CA  C086  F074         	movff	_fround$3832,___ftmul@f1
  3351  0016CE  C087  F075         	movff	_fround$3832+1,___ftmul@f1+1
  3352  0016D2  C088  F076         	movff	_fround$3832+2,___ftmul@f1+2
  3353  0016D6  0E00               	movlw	0
  3354  0016D8  0100               	movlb	0	; () banked
  3355  0016DA  6F77               	movwf	___ftmul@f2& (0+255),b
  3356  0016DC  0E00               	movlw	0
  3357  0016DE  0100               	movlb	0	; () banked
  3358  0016E0  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  3359  0016E2  0E3F               	movlw	63
  3360  0016E4  0100               	movlb	0	; () banked
  3361  0016E6  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  3362  0016E8  ECA6  F010         	call	___ftmul	;wreg free
  3363  0016EC  C074  F083         	movff	?___ftmul,?_fround
  3364  0016F0  C075  F084         	movff	?___ftmul+1,?_fround+1
  3365  0016F4  C076  F085         	movff	?___ftmul+2,?_fround+2
  3366  0016F8  0012               	return	
  3367  0016FA                     l1580:
  3368                           
  3369                           ;doprnt.c: 415: else if(prec > 10)
  3370  0016FA  0E0A               	movlw	10
  3371  0016FC  0100               	movlb	0	; () banked
  3372  0016FE  658C               	cpfsgt	fround@prec& (0+255),b
  3373  001700  D074               	goto	l1583
  3374                           
  3375                           ; BSR set to: 0
  3376                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3377  001702  0E00               	movlw	0
  3378  001704  0100               	movlb	0	; () banked
  3379  001706  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3380  001708  0E03               	movlw	3
  3381  00170A  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3382  00170C  0E00               	movlw	0
  3383  00170E  0100               	movlb	0	; () banked
  3384  001710  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
  3385  001712  0E0A               	movlw	10
  3386  001714  6F62               	movwf	___awmod@divisor& (0+255),b
  3387  001716  C08C  F060         	movff	fround@prec,___awmod@dividend
  3388  00171A  0100               	movlb	0	; () banked
  3389  00171C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
  3390  00171E  ECA0  F014         	call	___awmod	;wreg free
  3391  001722  C060  F06E         	movff	?___awmod,___wmul@multiplier
  3392  001726  C061  F06F         	movff	?___awmod+1,___wmul@multiplier+1
  3393  00172A  EC65  F016         	call	___wmul	;wreg free
  3394  00172E  0E50               	movlw	low __npowers_
  3395  001730  0100               	movlb	0	; () banked
  3396  001732  256E               	addwf	?___wmul& (0+255),w,b
  3397  001734  6EF6               	movwf	tblptrl,c
  3398  001736  0E08               	movlw	high __npowers_
  3399  001738  0100               	movlb	0	; () banked
  3400  00173A  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3401  00173C  6EF7               	movwf	tblptrh,c
  3402  00173E                     	if	0	;There are less than 3 active tblptr bytes
  3403  00173E                     	endif
  3404  00173E  0009               	tblrd		*+
  3405  001740  CFF5 F077          	movff	tablat,___ftmul@f2
  3406  001744  0009               	tblrd		*+
  3407  001746  CFF5 F078          	movff	tablat,___ftmul@f2+1
  3408  00174A  000A               	tblrd		*-
  3409  00174C  CFF5 F079          	movff	tablat,___ftmul@f2+2
  3410  001750  0E00               	movlw	0
  3411  001752  0100               	movlb	0	; () banked
  3412  001754  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
  3413  001756  0E0A               	movlw	10
  3414  001758  6F68               	movwf	___awdiv@divisor& (0+255),b
  3415  00175A  C08C  F066         	movff	fround@prec,___awdiv@dividend
  3416  00175E  0100               	movlb	0	; () banked
  3417  001760  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
  3418  001762  ECE1  F012         	call	___awdiv	;wreg free
  3419  001766  0E09               	movlw	9
  3420  001768  0100               	movlb	0	; () banked
  3421  00176A  2566               	addwf	?___awdiv& (0+255),w,b
  3422  00176C  0100               	movlb	0	; () banked
  3423  00176E  6F6E               	movwf	___wmul@multiplier& (0+255),b
  3424  001770  0E00               	movlw	0
  3425  001772  0100               	movlb	0	; () banked
  3426  001774  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
  3427  001776  0100               	movlb	0	; () banked
  3428  001778  6F6F               	movwf	(___wmul@multiplier+1)& (0+255),b
  3429  00177A  0E00               	movlw	0
  3430  00177C  0100               	movlb	0	; () banked
  3431  00177E  6F71               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3432  001780  0E03               	movlw	3
  3433  001782  6F70               	movwf	___wmul@multiplicand& (0+255),b
  3434  001784  EC65  F016         	call	___wmul	;wreg free
  3435  001788  0E50               	movlw	low __npowers_
  3436  00178A  0100               	movlb	0	; () banked
  3437  00178C  256E               	addwf	?___wmul& (0+255),w,b
  3438  00178E  6EF6               	movwf	tblptrl,c
  3439  001790  0E08               	movlw	high __npowers_
  3440  001792  0100               	movlb	0	; () banked
  3441  001794  216F               	addwfc	(?___wmul+1)& (0+255),w,b
  3442  001796  6EF7               	movwf	tblptrh,c
  3443  001798                     	if	0	;There are less than 3 active tblptr bytes
  3444  001798                     	endif
  3445  001798  0009               	tblrd		*+
  3446  00179A  CFF5 F074          	movff	tablat,___ftmul@f1
  3447  00179E  0009               	tblrd		*+
  3448  0017A0  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3449  0017A4  000A               	tblrd		*-
  3450  0017A6  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3451  0017AA  ECA6  F010         	call	___ftmul	;wreg free
  3452  0017AE  C074  F089         	movff	?___ftmul,_fround$3831
  3453  0017B2  C075  F08A         	movff	?___ftmul+1,_fround$3831+1
  3454  0017B6  C076  F08B         	movff	?___ftmul+2,_fround$3831+2
  3455                           
  3456                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3457  0017BA  C089  F074         	movff	_fround$3831,___ftmul@f1
  3458  0017BE  C08A  F075         	movff	_fround$3831+1,___ftmul@f1+1
  3459  0017C2  C08B  F076         	movff	_fround$3831+2,___ftmul@f1+2
  3460  0017C6  0E00               	movlw	0
  3461  0017C8  0100               	movlb	0	; () banked
  3462  0017CA  6F77               	movwf	___ftmul@f2& (0+255),b
  3463  0017CC  0E00               	movlw	0
  3464  0017CE  0100               	movlb	0	; () banked
  3465  0017D0  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  3466  0017D2  0E3F               	movlw	63
  3467  0017D4  0100               	movlb	0	; () banked
  3468  0017D6  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  3469  0017D8  ECA6  F010         	call	___ftmul	;wreg free
  3470  0017DC  C074  F083         	movff	?___ftmul,?_fround
  3471  0017E0  C075  F084         	movff	?___ftmul+1,?_fround+1
  3472  0017E4  C076  F085         	movff	?___ftmul+2,?_fround+2
  3473  0017E8  0012               	return	
  3474  0017EA                     l1583:
  3475                           
  3476                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3477  0017EA  0100               	movlb	0	; () banked
  3478  0017EC  518C               	movf	fround@prec& (0+255),w,b
  3479  0017EE  0D03               	mullw	3
  3480  0017F0  0E50               	movlw	low __npowers_
  3481  0017F2  24F3               	addwf	prodl,w,c
  3482  0017F4  6EF6               	movwf	tblptrl,c
  3483  0017F6  0E08               	movlw	high __npowers_
  3484  0017F8  20F4               	addwfc	prodh,w,c
  3485  0017FA  6EF7               	movwf	tblptrh,c
  3486  0017FC                     	if	0	;There are less than 3 active tblptr bytes
  3487  0017FC                     	endif
  3488  0017FC  0009               	tblrd		*+
  3489  0017FE  CFF5 F074          	movff	tablat,___ftmul@f1
  3490  001802  0009               	tblrd		*+
  3491  001804  CFF5 F075          	movff	tablat,___ftmul@f1+1
  3492  001808  000A               	tblrd		*-
  3493  00180A  CFF5 F076          	movff	tablat,___ftmul@f1+2
  3494  00180E  0E00               	movlw	0
  3495  001810  0100               	movlb	0	; () banked
  3496  001812  6F77               	movwf	___ftmul@f2& (0+255),b
  3497  001814  0E00               	movlw	0
  3498  001816  0100               	movlb	0	; () banked
  3499  001818  6F78               	movwf	(___ftmul@f2+1)& (0+255),b
  3500  00181A  0E3F               	movlw	63
  3501  00181C  0100               	movlb	0	; () banked
  3502  00181E  6F79               	movwf	(___ftmul@f2+2)& (0+255),b
  3503  001820  ECA6  F010         	call	___ftmul	;wreg free
  3504  001824  C074  F083         	movff	?___ftmul,?_fround
  3505  001828  C075  F084         	movff	?___ftmul+1,?_fround+1
  3506  00182C  C076  F085         	movff	?___ftmul+2,?_fround+2
  3507  001830  0012               	return	
  3508  001832                     __end_of_fround:
  3509                           	opt stack 0
  3510                           tblptru	equ	0xFF8
  3511                           tblptrh	equ	0xFF7
  3512                           tblptrl	equ	0xFF6
  3513                           tablat	equ	0xFF5
  3514                           prodh	equ	0xFF4
  3515                           prodl	equ	0xFF3
  3516                           intcon	equ	0xFF2
  3517                           postinc0	equ	0xFEE
  3518                           wreg	equ	0xFE8
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           fsr2h	equ	0xFDA
  3523                           fsr2l	equ	0xFD9
  3524                           status	equ	0xFD8
  3525                           
  3526 ;; *************** function ___wmul *****************
  3527 ;; Defined at:
  3528 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
  3529 ;; Parameters:    Size  Location     Type
  3530 ;;  multiplier      2   14[BANK0 ] unsigned int 
  3531 ;;  multiplicand    2   16[BANK0 ] unsigned int 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;  product         2   18[BANK0 ] unsigned int 
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  2   14[BANK0 ] unsigned int 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0, prodl, prodh
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3543 ;;      Params:         0       4       0       0       0       0       0       0       0
  3544 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3545 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3546 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3547 ;;Total ram usage:        6 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    4
  3550 ;; This function calls:
  3551 ;;		Nothing
  3552 ;; This function is called by:
  3553 ;;		_fround
  3554 ;;		_scale
  3555 ;;		_sprintf
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           	psect	text5
  3560  002CCA                     __ptext5:
  3561                           	opt stack 0
  3562  002CCA                     ___wmul:
  3563                           	opt stack 24
  3564                           
  3565                           ;incstack = 0
  3566  002CCA  0100               	movlb	0	; () banked
  3567  002CCC  516E               	movf	___wmul@multiplier& (0+255),w,b
  3568  002CCE  0100               	movlb	0	; () banked
  3569  002CD0  0370               	mulwf	___wmul@multiplicand& (0+255),b
  3570  002CD2  CFF3 F072          	movff	prodl,___wmul@product
  3571  002CD6  CFF4 F073          	movff	prodh,___wmul@product+1
  3572  002CDA  0100               	movlb	0	; () banked
  3573  002CDC  516E               	movf	___wmul@multiplier& (0+255),w,b
  3574  002CDE  0100               	movlb	0	; () banked
  3575  002CE0  0371               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3576  002CE2  50F3               	movf	prodl,w,c
  3577  002CE4  0100               	movlb	0	; () banked
  3578  002CE6  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  3579  002CE8  0100               	movlb	0	; () banked
  3580  002CEA  516F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3581  002CEC  0100               	movlb	0	; () banked
  3582  002CEE  0370               	mulwf	___wmul@multiplicand& (0+255),b
  3583  002CF0  50F3               	movf	prodl,w,c
  3584  002CF2  0100               	movlb	0	; () banked
  3585  002CF4  2773               	addwf	(___wmul@product+1)& (0+255),f,b
  3586                           
  3587                           ; BSR set to: 0
  3588  002CF6  C072  F06E         	movff	___wmul@product,?___wmul
  3589  002CFA  C073  F06F         	movff	___wmul@product+1,?___wmul+1
  3590  002CFE  0012               	return	
  3591  002D00                     __end_of___wmul:
  3592                           	opt stack 0
  3593                           tblptru	equ	0xFF8
  3594                           tblptrh	equ	0xFF7
  3595                           tblptrl	equ	0xFF6
  3596                           tablat	equ	0xFF5
  3597                           prodh	equ	0xFF4
  3598                           prodl	equ	0xFF3
  3599                           intcon	equ	0xFF2
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           indf2	equ	0xFDF
  3603                           postinc2	equ	0xFDE
  3604                           postdec2	equ	0xFDD
  3605                           fsr2h	equ	0xFDA
  3606                           fsr2l	equ	0xFD9
  3607                           status	equ	0xFD8
  3608                           
  3609 ;; *************** function ___ftmul *****************
  3610 ;; Defined at:
  3611 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftmul.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;  f1              3   20[BANK0 ] float 
  3614 ;;  f2              3   23[BANK0 ] float 
  3615 ;; Auto vars:     Size  Location     Type
  3616 ;;  f3_as_produc    3   30[BANK0 ] unsigned um
  3617 ;;  sign            1   34[BANK0 ] unsigned char 
  3618 ;;  cntr            1   33[BANK0 ] unsigned char 
  3619 ;;  exp             1   29[BANK0 ] unsigned char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  3   20[BANK0 ] float 
  3622 ;; Registers used:
  3623 ;;		wreg, status,2, status,0, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3629 ;;      Params:         0       6       0       0       0       0       0       0       0
  3630 ;;      Locals:         0       6       0       0       0       0       0       0       0
  3631 ;;      Temps:          0       3       0       0       0       0       0       0       0
  3632 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3633 ;;Total ram usage:       15 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    5
  3636 ;; This function calls:
  3637 ;;		___ftpack
  3638 ;; This function is called by:
  3639 ;;		_fround
  3640 ;;		_scale
  3641 ;;		_sprintf
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text6
  3646  00214C                     __ptext6:
  3647                           	opt stack 0
  3648  00214C                     ___ftmul:
  3649                           	opt stack 23
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;incstack = 0
  3653  00214C  C076  F07A         	movff	___ftmul@f1+2,??___ftmul
  3654  002150  0100               	movlb	0	; () banked
  3655  002152  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  3656  002154  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  3657  002156  0100               	movlb	0	; () banked
  3658  002158  3575               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  3659  00215A  0100               	movlb	0	; () banked
  3660  00215C  377A               	rlcf	??___ftmul& (0+255),f,b
  3661  00215E  E301               	bnc	u6031
  3662  002160  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  3663  002162                     u6031:
  3664  002162  0100               	movlb	0	; () banked
  3665  002164  517A               	movf	??___ftmul& (0+255),w,b
  3666  002166  0100               	movlb	0	; () banked
  3667  002168  6F7D               	movwf	___ftmul@exp& (0+255),b
  3668  00216A  0100               	movlb	0	; () banked
  3669  00216C  517D               	movf	___ftmul@exp& (0+255),w,b
  3670  00216E  A4D8               	btfss	status,2,c
  3671  002170  D00A               	goto	l1989
  3672                           
  3673                           ; BSR set to: 0
  3674  002172  0E00               	movlw	0
  3675  002174  0100               	movlb	0	; () banked
  3676  002176  6F74               	movwf	?___ftmul& (0+255),b
  3677  002178  0E00               	movlw	0
  3678  00217A  0100               	movlb	0	; () banked
  3679  00217C  6F75               	movwf	(?___ftmul+1)& (0+255),b
  3680  00217E  0E00               	movlw	0
  3681  002180  0100               	movlb	0	; () banked
  3682  002182  6F76               	movwf	(?___ftmul+2)& (0+255),b
  3683                           
  3684                           ; BSR set to: 0
  3685  002184  0012               	return	
  3686  002186                     l1989:
  3687                           
  3688                           ; BSR set to: 0
  3689                           
  3690                           ; BSR set to: 0
  3691  002186  C079  F07A         	movff	___ftmul@f2+2,??___ftmul
  3692  00218A  0100               	movlb	0	; () banked
  3693  00218C  6B7B               	clrf	(??___ftmul+1)& (0+255),b
  3694  00218E  6B7C               	clrf	(??___ftmul+2)& (0+255),b
  3695  002190  0100               	movlb	0	; () banked
  3696  002192  3578               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  3697  002194  0100               	movlb	0	; () banked
  3698  002196  377A               	rlcf	??___ftmul& (0+255),f,b
  3699  002198  E301               	bnc	u6051
  3700  00219A  817B               	bsf	(??___ftmul+1)& (0+255),0,b
  3701  00219C                     u6051:
  3702  00219C  0100               	movlb	0	; () banked
  3703  00219E  517A               	movf	??___ftmul& (0+255),w,b
  3704  0021A0  0100               	movlb	0	; () banked
  3705  0021A2  6F82               	movwf	___ftmul@sign& (0+255),b
  3706  0021A4  0100               	movlb	0	; () banked
  3707  0021A6  5182               	movf	___ftmul@sign& (0+255),w,b
  3708  0021A8  A4D8               	btfss	status,2,c
  3709  0021AA  D00A               	goto	l1991
  3710                           
  3711                           ; BSR set to: 0
  3712  0021AC  0E00               	movlw	0
  3713  0021AE  0100               	movlb	0	; () banked
  3714  0021B0  6F74               	movwf	?___ftmul& (0+255),b
  3715  0021B2  0E00               	movlw	0
  3716  0021B4  0100               	movlb	0	; () banked
  3717  0021B6  6F75               	movwf	(?___ftmul+1)& (0+255),b
  3718  0021B8  0E00               	movlw	0
  3719  0021BA  0100               	movlb	0	; () banked
  3720  0021BC  6F76               	movwf	(?___ftmul+2)& (0+255),b
  3721                           
  3722                           ; BSR set to: 0
  3723  0021BE  0012               	return	
  3724  0021C0                     l1991:
  3725                           
  3726                           ; BSR set to: 0
  3727                           
  3728                           ; BSR set to: 0
  3729  0021C0  0100               	movlb	0	; () banked
  3730  0021C2  5182               	movf	___ftmul@sign& (0+255),w,b
  3731  0021C4  0F7B               	addlw	123
  3732  0021C6  0100               	movlb	0	; () banked
  3733  0021C8  277D               	addwf	___ftmul@exp& (0+255),f,b
  3734                           
  3735                           ; BSR set to: 0
  3736  0021CA  C076  F082         	movff	___ftmul@f1+2,___ftmul@sign
  3737  0021CE  0100               	movlb	0	; () banked
  3738  0021D0  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  3739  0021D2  0100               	movlb	0	; () banked
  3740  0021D4  1B82               	xorwf	___ftmul@sign& (0+255),f,b
  3741  0021D6  0E80               	movlw	128
  3742  0021D8  0100               	movlb	0	; () banked
  3743  0021DA  1782               	andwf	___ftmul@sign& (0+255),f,b
  3744                           
  3745                           ; BSR set to: 0
  3746  0021DC  0100               	movlb	0	; () banked
  3747  0021DE  8F75               	bsf	(___ftmul@f1+1)& (0+255),7,b
  3748                           
  3749                           ; BSR set to: 0
  3750  0021E0  0100               	movlb	0	; () banked
  3751  0021E2  8F78               	bsf	(___ftmul@f2+1)& (0+255),7,b
  3752                           
  3753                           ; BSR set to: 0
  3754  0021E4  0EFF               	movlw	255
  3755  0021E6  0100               	movlb	0	; () banked
  3756  0021E8  1777               	andwf	___ftmul@f2& (0+255),f,b
  3757  0021EA  0EFF               	movlw	255
  3758  0021EC  0100               	movlb	0	; () banked
  3759  0021EE  1778               	andwf	(___ftmul@f2+1)& (0+255),f,b
  3760  0021F0  0E00               	movlw	0
  3761  0021F2  0100               	movlb	0	; () banked
  3762  0021F4  1779               	andwf	(___ftmul@f2+2)& (0+255),f,b
  3763                           
  3764                           ; BSR set to: 0
  3765  0021F6  0E00               	movlw	0
  3766  0021F8  0100               	movlb	0	; () banked
  3767  0021FA  6F7E               	movwf	___ftmul@f3_as_product& (0+255),b
  3768  0021FC  0E00               	movlw	0
  3769  0021FE  0100               	movlb	0	; () banked
  3770  002200  6F7F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  3771  002202  0E00               	movlw	0
  3772  002204  0100               	movlb	0	; () banked
  3773  002206  6F80               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  3774                           
  3775                           ; BSR set to: 0
  3776  002208  0E07               	movlw	7
  3777  00220A  0100               	movlb	0	; () banked
  3778  00220C  6F81               	movwf	___ftmul@cntr& (0+255),b
  3779  00220E                     
  3780                           ; BSR set to: 0
  3781                           
  3782                           ; BSR set to: 0
  3783  00220E  0100               	movlb	0	; () banked
  3784  002210  A174               	btfss	___ftmul@f1& (0+255),0,b
  3785  002212  D00C               	goto	l1993
  3786                           
  3787                           ; BSR set to: 0
  3788  002214  0100               	movlb	0	; () banked
  3789  002216  5177               	movf	___ftmul@f2& (0+255),w,b
  3790  002218  0100               	movlb	0	; () banked
  3791  00221A  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3792  00221C  0100               	movlb	0	; () banked
  3793  00221E  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  3794  002220  0100               	movlb	0	; () banked
  3795  002222  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3796  002224  0100               	movlb	0	; () banked
  3797  002226  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  3798  002228  0100               	movlb	0	; () banked
  3799  00222A  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3800  00222C                     l1993:
  3801                           
  3802                           ; BSR set to: 0
  3803                           
  3804                           ; BSR set to: 0
  3805  00222C  0100               	movlb	0	; () banked
  3806  00222E  90D8               	bcf	status,0,c
  3807  002230  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3808  002232  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3809  002234  3374               	rrcf	___ftmul@f1& (0+255),f,b
  3810  002236  0100               	movlb	0	; () banked
  3811  002238  90D8               	bcf	status,0,c
  3812  00223A  3777               	rlcf	___ftmul@f2& (0+255),f,b
  3813  00223C  3778               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  3814  00223E  3779               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  3815                           
  3816                           ; BSR set to: 0
  3817  002240  0100               	movlb	0	; () banked
  3818  002242  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  3819  002244  D7E4               	goto	l1992
  3820                           
  3821                           ; BSR set to: 0
  3822                           
  3823                           ; BSR set to: 0
  3824  002246  0E09               	movlw	9
  3825  002248  0100               	movlb	0	; () banked
  3826  00224A  6F81               	movwf	___ftmul@cntr& (0+255),b
  3827  00224C                     
  3828                           ; BSR set to: 0
  3829                           
  3830                           ; BSR set to: 0
  3831  00224C  0100               	movlb	0	; () banked
  3832  00224E  A174               	btfss	___ftmul@f1& (0+255),0,b
  3833  002250  D00C               	goto	l1996
  3834                           
  3835                           ; BSR set to: 0
  3836  002252  0100               	movlb	0	; () banked
  3837  002254  5177               	movf	___ftmul@f2& (0+255),w,b
  3838  002256  0100               	movlb	0	; () banked
  3839  002258  277E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  3840  00225A  0100               	movlb	0	; () banked
  3841  00225C  5178               	movf	(___ftmul@f2+1)& (0+255),w,b
  3842  00225E  0100               	movlb	0	; () banked
  3843  002260  237F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  3844  002262  0100               	movlb	0	; () banked
  3845  002264  5179               	movf	(___ftmul@f2+2)& (0+255),w,b
  3846  002266  0100               	movlb	0	; () banked
  3847  002268  2380               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  3848  00226A                     l1996:
  3849                           
  3850                           ; BSR set to: 0
  3851                           
  3852                           ; BSR set to: 0
  3853  00226A  0100               	movlb	0	; () banked
  3854  00226C  90D8               	bcf	status,0,c
  3855  00226E  3376               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  3856  002270  3375               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  3857  002272  3374               	rrcf	___ftmul@f1& (0+255),f,b
  3858  002274  0100               	movlb	0	; () banked
  3859  002276  90D8               	bcf	status,0,c
  3860  002278  3380               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  3861  00227A  337F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  3862  00227C  337E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  3863                           
  3864                           ; BSR set to: 0
  3865  00227E  0100               	movlb	0	; () banked
  3866  002280  2F81               	decfsz	___ftmul@cntr& (0+255),f,b
  3867  002282  D7E4               	goto	l1995
  3868                           
  3869                           ; BSR set to: 0
  3870                           
  3871                           ; BSR set to: 0
  3872  002284  C07E  F060         	movff	___ftmul@f3_as_product,___ftpack@arg
  3873  002288  C07F  F061         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3874  00228C  C080  F062         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3875  002290  C07D  F063         	movff	___ftmul@exp,___ftpack@exp
  3876  002294  C082  F064         	movff	___ftmul@sign,___ftpack@sign
  3877  002298  ECF7  F011         	call	___ftpack	;wreg free
  3878  00229C  C060  F074         	movff	?___ftpack,?___ftmul
  3879  0022A0  C061  F075         	movff	?___ftpack+1,?___ftmul+1
  3880  0022A4  C062  F076         	movff	?___ftpack+2,?___ftmul+2
  3881  0022A8  0012               	return	
  3882  0022AA                     __end_of___ftmul:
  3883                           	opt stack 0
  3884                           tblptru	equ	0xFF8
  3885                           tblptrh	equ	0xFF7
  3886                           tblptrl	equ	0xFF6
  3887                           tablat	equ	0xFF5
  3888                           prodh	equ	0xFF4
  3889                           prodl	equ	0xFF3
  3890                           intcon	equ	0xFF2
  3891                           postinc0	equ	0xFEE
  3892                           wreg	equ	0xFE8
  3893                           indf2	equ	0xFDF
  3894                           postinc2	equ	0xFDE
  3895                           postdec2	equ	0xFDD
  3896                           fsr2h	equ	0xFDA
  3897                           fsr2l	equ	0xFD9
  3898                           status	equ	0xFD8
  3899                           
  3900 ;; *************** function ___awmod *****************
  3901 ;; Defined at:
  3902 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
  3903 ;; Parameters:    Size  Location     Type
  3904 ;;  dividend        2    0[BANK0 ] int 
  3905 ;;  divisor         2    2[BANK0 ] int 
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  sign            1    5[BANK0 ] unsigned char 
  3908 ;;  counter         1    4[BANK0 ] unsigned char 
  3909 ;; Return value:  Size  Location     Type
  3910 ;;                  2    0[BANK0 ] int 
  3911 ;; Registers used:
  3912 ;;		wreg, status,2, status,0
  3913 ;; Tracked objects:
  3914 ;;		On entry : 0/0
  3915 ;;		On exit  : 0/0
  3916 ;;		Unchanged: 0/0
  3917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3918 ;;      Params:         0       4       0       0       0       0       0       0       0
  3919 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3920 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3921 ;;      Totals:         0       6       0       0       0       0       0       0       0
  3922 ;;Total ram usage:        6 bytes
  3923 ;; Hardware stack levels used:    1
  3924 ;; Hardware stack levels required when called:    4
  3925 ;; This function calls:
  3926 ;;		Nothing
  3927 ;; This function is called by:
  3928 ;;		_fround
  3929 ;;		_scale
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932                           
  3933                           	psect	text7
  3934  002940                     __ptext7:
  3935                           	opt stack 0
  3936  002940                     ___awmod:
  3937                           	opt stack 24
  3938                           
  3939                           ;incstack = 0
  3940  002940  0E00               	movlw	0
  3941  002942  0100               	movlb	0	; () banked
  3942  002944  6F65               	movwf	___awmod@sign& (0+255),b
  3943                           
  3944                           ; BSR set to: 0
  3945  002946  0100               	movlb	0	; () banked
  3946  002948  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
  3947  00294A  D008               	goto	l1835
  3948                           
  3949                           ; BSR set to: 0
  3950  00294C  0100               	movlb	0	; () banked
  3951  00294E  6D60               	negf	___awmod@dividend& (0+255),b
  3952  002950  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  3953  002952  B0D8               	btfsc	status,0,c
  3954  002954  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  3955                           
  3956                           ; BSR set to: 0
  3957  002956  0E01               	movlw	1
  3958  002958  0100               	movlb	0	; () banked
  3959  00295A  6F65               	movwf	___awmod@sign& (0+255),b
  3960  00295C                     l1835:
  3961                           
  3962                           ; BSR set to: 0
  3963                           
  3964                           ; BSR set to: 0
  3965  00295C  0100               	movlb	0	; () banked
  3966  00295E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  3967  002960  D005               	goto	l1836
  3968                           
  3969                           ; BSR set to: 0
  3970  002962  0100               	movlb	0	; () banked
  3971  002964  6D62               	negf	___awmod@divisor& (0+255),b
  3972  002966  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
  3973  002968  B0D8               	btfsc	status,0,c
  3974  00296A  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
  3975  00296C                     l1836:
  3976                           
  3977                           ; BSR set to: 0
  3978                           
  3979                           ; BSR set to: 0
  3980  00296C  0100               	movlb	0	; () banked
  3981  00296E  5162               	movf	___awmod@divisor& (0+255),w,b
  3982  002970  0100               	movlb	0	; () banked
  3983  002972  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  3984  002974  B4D8               	btfsc	status,2,c
  3985  002976  D026               	goto	l1843
  3986                           
  3987                           ; BSR set to: 0
  3988  002978  0E01               	movlw	1
  3989  00297A  0100               	movlb	0	; () banked
  3990  00297C  6F64               	movwf	___awmod@counter& (0+255),b
  3991  00297E  D006               	goto	l1838
  3992  002980                     
  3993                           ; BSR set to: 0
  3994                           
  3995                           ; BSR set to: 0
  3996  002980  0100               	movlb	0	; () banked
  3997  002982  90D8               	bcf	status,0,c
  3998  002984  3762               	rlcf	___awmod@divisor& (0+255),f,b
  3999  002986  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  4000  002988  0100               	movlb	0	; () banked
  4001  00298A  2B64               	incf	___awmod@counter& (0+255),f,b
  4002  00298C                     l1838:
  4003                           
  4004                           ; BSR set to: 0
  4005                           
  4006                           ; BSR set to: 0
  4007  00298C  0100               	movlb	0	; () banked
  4008  00298E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
  4009  002990  D7F7               	goto	l1839
  4010  002992                     u6180:
  4011                           
  4012                           ; BSR set to: 0
  4013                           
  4014                           ; BSR set to: 0
  4015                           
  4016                           ; BSR set to: 0
  4017  002992  0100               	movlb	0	; () banked
  4018  002994  5162               	movf	___awmod@divisor& (0+255),w,b
  4019  002996  0100               	movlb	0	; () banked
  4020  002998  5D60               	subwf	___awmod@dividend& (0+255),w,b
  4021  00299A  0100               	movlb	0	; () banked
  4022  00299C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4023  00299E  0100               	movlb	0	; () banked
  4024  0029A0  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  4025  0029A2  A0D8               	btfss	status,0,c
  4026  0029A4  D008               	goto	l1842
  4027                           
  4028                           ; BSR set to: 0
  4029  0029A6  0100               	movlb	0	; () banked
  4030  0029A8  5162               	movf	___awmod@divisor& (0+255),w,b
  4031  0029AA  0100               	movlb	0	; () banked
  4032  0029AC  5F60               	subwf	___awmod@dividend& (0+255),f,b
  4033  0029AE  0100               	movlb	0	; () banked
  4034  0029B0  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
  4035  0029B2  0100               	movlb	0	; () banked
  4036  0029B4  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  4037  0029B6                     l1842:
  4038                           
  4039                           ; BSR set to: 0
  4040                           
  4041                           ; BSR set to: 0
  4042  0029B6  0100               	movlb	0	; () banked
  4043  0029B8  90D8               	bcf	status,0,c
  4044  0029BA  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  4045  0029BC  3362               	rrcf	___awmod@divisor& (0+255),f,b
  4046                           
  4047                           ; BSR set to: 0
  4048  0029BE  0100               	movlb	0	; () banked
  4049  0029C0  2F64               	decfsz	___awmod@counter& (0+255),f,b
  4050  0029C2  D7E7               	goto	u6180
  4051  0029C4                     l1843:
  4052                           
  4053                           ; BSR set to: 0
  4054                           
  4055                           ; BSR set to: 0
  4056                           
  4057                           ; BSR set to: 0
  4058  0029C4  0100               	movlb	0	; () banked
  4059  0029C6  5165               	movf	___awmod@sign& (0+255),w,b
  4060  0029C8  0100               	movlb	0	; () banked
  4061  0029CA  B4D8               	btfsc	status,2,c
  4062  0029CC  D005               	goto	l1844
  4063                           
  4064                           ; BSR set to: 0
  4065  0029CE  0100               	movlb	0	; () banked
  4066  0029D0  6D60               	negf	___awmod@dividend& (0+255),b
  4067  0029D2  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
  4068  0029D4  B0D8               	btfsc	status,0,c
  4069  0029D6  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
  4070  0029D8                     l1844:
  4071                           
  4072                           ; BSR set to: 0
  4073                           
  4074                           ; BSR set to: 0
  4075  0029D8  C060  F060         	movff	___awmod@dividend,?___awmod
  4076  0029DC  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
  4077  0029E0  0012               	return	
  4078  0029E2                     __end_of___awmod:
  4079                           	opt stack 0
  4080                           tblptru	equ	0xFF8
  4081                           tblptrh	equ	0xFF7
  4082                           tblptrl	equ	0xFF6
  4083                           tablat	equ	0xFF5
  4084                           prodh	equ	0xFF4
  4085                           prodl	equ	0xFF3
  4086                           intcon	equ	0xFF2
  4087                           postinc0	equ	0xFEE
  4088                           wreg	equ	0xFE8
  4089                           indf2	equ	0xFDF
  4090                           postinc2	equ	0xFDE
  4091                           postdec2	equ	0xFDD
  4092                           fsr2h	equ	0xFDA
  4093                           fsr2l	equ	0xFD9
  4094                           status	equ	0xFD8
  4095                           
  4096 ;; *************** function ___awdiv *****************
  4097 ;; Defined at:
  4098 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;  dividend        2    6[BANK0 ] int 
  4101 ;;  divisor         2    8[BANK0 ] int 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  quotient        2   12[BANK0 ] int 
  4104 ;;  sign            1   11[BANK0 ] unsigned char 
  4105 ;;  counter         1   10[BANK0 ] unsigned char 
  4106 ;; Return value:  Size  Location     Type
  4107 ;;                  2    6[BANK0 ] int 
  4108 ;; Registers used:
  4109 ;;		wreg, status,2, status,0
  4110 ;; Tracked objects:
  4111 ;;		On entry : 0/0
  4112 ;;		On exit  : 0/0
  4113 ;;		Unchanged: 0/0
  4114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4115 ;;      Params:         0       4       0       0       0       0       0       0       0
  4116 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4117 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4118 ;;      Totals:         0       8       0       0       0       0       0       0       0
  4119 ;;Total ram usage:        8 bytes
  4120 ;; Hardware stack levels used:    1
  4121 ;; Hardware stack levels required when called:    4
  4122 ;; This function calls:
  4123 ;;		Nothing
  4124 ;; This function is called by:
  4125 ;;		_fround
  4126 ;;		_scale
  4127 ;;		_sprintf
  4128 ;; This function uses a non-reentrant model
  4129 ;;
  4130                           
  4131                           	psect	text8
  4132  0025C2                     __ptext8:
  4133                           	opt stack 0
  4134  0025C2                     ___awdiv:
  4135                           	opt stack 24
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;incstack = 0
  4139  0025C2  0E00               	movlw	0
  4140  0025C4  0100               	movlb	0	; () banked
  4141  0025C6  6F6B               	movwf	___awdiv@sign& (0+255),b
  4142                           
  4143                           ; BSR set to: 0
  4144  0025C8  0100               	movlb	0	; () banked
  4145  0025CA  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4146  0025CC  D008               	goto	l1822
  4147                           
  4148                           ; BSR set to: 0
  4149  0025CE  0100               	movlb	0	; () banked
  4150  0025D0  6D68               	negf	___awdiv@divisor& (0+255),b
  4151  0025D2  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4152  0025D4  B0D8               	btfsc	status,0,c
  4153  0025D6  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4154                           
  4155                           ; BSR set to: 0
  4156  0025D8  0E01               	movlw	1
  4157  0025DA  0100               	movlb	0	; () banked
  4158  0025DC  6F6B               	movwf	___awdiv@sign& (0+255),b
  4159  0025DE                     l1822:
  4160                           
  4161                           ; BSR set to: 0
  4162                           
  4163                           ; BSR set to: 0
  4164  0025DE  0100               	movlb	0	; () banked
  4165  0025E0  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4166  0025E2  D008               	goto	l1823
  4167                           
  4168                           ; BSR set to: 0
  4169  0025E4  0100               	movlb	0	; () banked
  4170  0025E6  6D66               	negf	___awdiv@dividend& (0+255),b
  4171  0025E8  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4172  0025EA  B0D8               	btfsc	status,0,c
  4173  0025EC  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4174                           
  4175                           ; BSR set to: 0
  4176  0025EE  0E01               	movlw	1
  4177  0025F0  0100               	movlb	0	; () banked
  4178  0025F2  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
  4179  0025F4                     l1823:
  4180                           
  4181                           ; BSR set to: 0
  4182                           
  4183                           ; BSR set to: 0
  4184  0025F4  0E00               	movlw	0
  4185  0025F6  0100               	movlb	0	; () banked
  4186  0025F8  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
  4187  0025FA  0E00               	movlw	0
  4188  0025FC  6F6C               	movwf	___awdiv@quotient& (0+255),b
  4189                           
  4190                           ; BSR set to: 0
  4191  0025FE  0100               	movlb	0	; () banked
  4192  002600  5168               	movf	___awdiv@divisor& (0+255),w,b
  4193  002602  0100               	movlb	0	; () banked
  4194  002604  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4195  002606  B4D8               	btfsc	status,2,c
  4196  002608  D02C               	goto	l1830
  4197                           
  4198                           ; BSR set to: 0
  4199  00260A  0E01               	movlw	1
  4200  00260C  0100               	movlb	0	; () banked
  4201  00260E  6F6A               	movwf	___awdiv@counter& (0+255),b
  4202  002610  D006               	goto	l1825
  4203  002612                     
  4204                           ; BSR set to: 0
  4205                           
  4206                           ; BSR set to: 0
  4207  002612  0100               	movlb	0	; () banked
  4208  002614  90D8               	bcf	status,0,c
  4209  002616  3768               	rlcf	___awdiv@divisor& (0+255),f,b
  4210  002618  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4211  00261A  0100               	movlb	0	; () banked
  4212  00261C  2B6A               	incf	___awdiv@counter& (0+255),f,b
  4213  00261E                     l1825:
  4214                           
  4215                           ; BSR set to: 0
  4216                           
  4217                           ; BSR set to: 0
  4218  00261E  0100               	movlb	0	; () banked
  4219  002620  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4220  002622  D7F7               	goto	l1826
  4221  002624                     u6120:
  4222                           
  4223                           ; BSR set to: 0
  4224                           
  4225                           ; BSR set to: 0
  4226                           
  4227                           ; BSR set to: 0
  4228  002624  0100               	movlb	0	; () banked
  4229  002626  90D8               	bcf	status,0,c
  4230  002628  376C               	rlcf	___awdiv@quotient& (0+255),f,b
  4231  00262A  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4232                           
  4233                           ; BSR set to: 0
  4234  00262C  0100               	movlb	0	; () banked
  4235  00262E  5168               	movf	___awdiv@divisor& (0+255),w,b
  4236  002630  0100               	movlb	0	; () banked
  4237  002632  5D66               	subwf	___awdiv@dividend& (0+255),w,b
  4238  002634  0100               	movlb	0	; () banked
  4239  002636  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4240  002638  0100               	movlb	0	; () banked
  4241  00263A  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4242  00263C  A0D8               	btfss	status,0,c
  4243  00263E  D00A               	goto	l1829
  4244                           
  4245                           ; BSR set to: 0
  4246  002640  0100               	movlb	0	; () banked
  4247  002642  5168               	movf	___awdiv@divisor& (0+255),w,b
  4248  002644  0100               	movlb	0	; () banked
  4249  002646  5F66               	subwf	___awdiv@dividend& (0+255),f,b
  4250  002648  0100               	movlb	0	; () banked
  4251  00264A  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4252  00264C  0100               	movlb	0	; () banked
  4253  00264E  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4254                           
  4255                           ; BSR set to: 0
  4256  002650  0100               	movlb	0	; () banked
  4257  002652  816C               	bsf	___awdiv@quotient& (0+255),0,b
  4258  002654                     l1829:
  4259                           
  4260                           ; BSR set to: 0
  4261                           
  4262                           ; BSR set to: 0
  4263  002654  0100               	movlb	0	; () banked
  4264  002656  90D8               	bcf	status,0,c
  4265  002658  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4266  00265A  3368               	rrcf	___awdiv@divisor& (0+255),f,b
  4267                           
  4268                           ; BSR set to: 0
  4269  00265C  0100               	movlb	0	; () banked
  4270  00265E  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
  4271  002660  D7E1               	goto	u6120
  4272  002662                     l1830:
  4273                           
  4274                           ; BSR set to: 0
  4275                           
  4276                           ; BSR set to: 0
  4277                           
  4278                           ; BSR set to: 0
  4279  002662  0100               	movlb	0	; () banked
  4280  002664  516B               	movf	___awdiv@sign& (0+255),w,b
  4281  002666  0100               	movlb	0	; () banked
  4282  002668  B4D8               	btfsc	status,2,c
  4283  00266A  D005               	goto	l1831
  4284                           
  4285                           ; BSR set to: 0
  4286  00266C  0100               	movlb	0	; () banked
  4287  00266E  6D6C               	negf	___awdiv@quotient& (0+255),b
  4288  002670  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4289  002672  B0D8               	btfsc	status,0,c
  4290  002674  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4291  002676                     l1831:
  4292                           
  4293                           ; BSR set to: 0
  4294                           
  4295                           ; BSR set to: 0
  4296  002676  C06C  F066         	movff	___awdiv@quotient,?___awdiv
  4297  00267A  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
  4298  00267E  0012               	return	
  4299  002680                     __end_of___awdiv:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           intcon	equ	0xFF2
  4308                           postinc0	equ	0xFEE
  4309                           wreg	equ	0xFE8
  4310                           indf2	equ	0xFDF
  4311                           postinc2	equ	0xFDE
  4312                           postdec2	equ	0xFDD
  4313                           fsr2h	equ	0xFDA
  4314                           fsr2l	equ	0xFD9
  4315                           status	equ	0xFD8
  4316                           
  4317 ;; *************** function __tdiv_to_l_ *****************
  4318 ;; Defined at:
  4319 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
  4320 ;; Parameters:    Size  Location     Type
  4321 ;;  f1              3    0[BANK0 ] float 
  4322 ;;  f2              3    3[BANK0 ] float 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  quot            4    9[BANK0 ] unsigned long 
  4325 ;;  exp1            1   14[BANK0 ] unsigned char 
  4326 ;;  cntr            1   13[BANK0 ] unsigned char 
  4327 ;; Return value:  Size  Location     Type
  4328 ;;                  4    0[BANK0 ] unsigned long 
  4329 ;; Registers used:
  4330 ;;		wreg, status,2, status,0
  4331 ;; Tracked objects:
  4332 ;;		On entry : 0/0
  4333 ;;		On exit  : 0/0
  4334 ;;		Unchanged: 0/0
  4335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4336 ;;      Params:         0       6       0       0       0       0       0       0       0
  4337 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4338 ;;      Temps:          0       3       0       0       0       0       0       0       0
  4339 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4340 ;;Total ram usage:       15 bytes
  4341 ;; Hardware stack levels used:    1
  4342 ;; Hardware stack levels required when called:    4
  4343 ;; This function calls:
  4344 ;;		Nothing
  4345 ;; This function is called by:
  4346 ;;		_sprintf
  4347 ;; This function uses a non-reentrant model
  4348 ;;
  4349                           
  4350                           	psect	text9
  4351  001CC0                     __ptext9:
  4352                           	opt stack 0
  4353  001CC0                     __tdiv_to_l_:
  4354                           	opt stack 25
  4355                           
  4356                           ; BSR set to: 0
  4357                           ;incstack = 0
  4358  001CC0  C062  F066         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4359  001CC4  0100               	movlb	0	; () banked
  4360  001CC6  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  4361  001CC8  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  4362  001CCA  0100               	movlb	0	; () banked
  4363  001CCC  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  4364  001CCE  0100               	movlb	0	; () banked
  4365  001CD0  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  4366  001CD2  E301               	bnc	u6331
  4367  001CD4  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  4368  001CD6                     u6331:
  4369  001CD6  0100               	movlb	0	; () banked
  4370  001CD8  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  4371  001CDA  0100               	movlb	0	; () banked
  4372  001CDC  6F6E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  4373  001CDE  0100               	movlb	0	; () banked
  4374  001CE0  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4375  001CE2  A4D8               	btfss	status,2,c
  4376  001CE4  D00A               	goto	l1965
  4377                           
  4378                           ; BSR set to: 0
  4379  001CE6  0E00               	movlw	0
  4380  001CE8  0100               	movlb	0	; () banked
  4381  001CEA  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  4382  001CEC  0E00               	movlw	0
  4383  001CEE  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4384  001CF0  0E00               	movlw	0
  4385  001CF2  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4386  001CF4  0E00               	movlw	0
  4387  001CF6  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4388                           
  4389                           ; BSR set to: 0
  4390  001CF8  0012               	return	
  4391  001CFA                     l1965:
  4392                           
  4393                           ; BSR set to: 0
  4394                           
  4395                           ; BSR set to: 0
  4396  001CFA  C065  F066         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4397  001CFE  0100               	movlb	0	; () banked
  4398  001D00  6B67               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  4399  001D02  6B68               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  4400  001D04  0100               	movlb	0	; () banked
  4401  001D06  3564               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4402  001D08  0100               	movlb	0	; () banked
  4403  001D0A  3766               	rlcf	??__tdiv_to_l_& (0+255),f,b
  4404  001D0C  E301               	bnc	u6351
  4405  001D0E  8167               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  4406  001D10                     u6351:
  4407  001D10  0100               	movlb	0	; () banked
  4408  001D12  5166               	movf	??__tdiv_to_l_& (0+255),w,b
  4409  001D14  0100               	movlb	0	; () banked
  4410  001D16  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4411  001D18  0100               	movlb	0	; () banked
  4412  001D1A  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4413  001D1C  A4D8               	btfss	status,2,c
  4414  001D1E  D00A               	goto	l1967
  4415                           
  4416                           ; BSR set to: 0
  4417  001D20  0E00               	movlw	0
  4418  001D22  0100               	movlb	0	; () banked
  4419  001D24  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  4420  001D26  0E00               	movlw	0
  4421  001D28  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4422  001D2A  0E00               	movlw	0
  4423  001D2C  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4424  001D2E  0E00               	movlw	0
  4425  001D30  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4426                           
  4427                           ; BSR set to: 0
  4428  001D32  0012               	return	
  4429  001D34                     l1967:
  4430                           
  4431                           ; BSR set to: 0
  4432                           
  4433                           ; BSR set to: 0
  4434  001D34  0100               	movlb	0	; () banked
  4435  001D36  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  4436                           
  4437                           ; BSR set to: 0
  4438  001D38  0EFF               	movlw	255
  4439  001D3A  0100               	movlb	0	; () banked
  4440  001D3C  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  4441  001D3E  0EFF               	movlw	255
  4442  001D40  0100               	movlb	0	; () banked
  4443  001D42  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4444  001D44  0E00               	movlw	0
  4445  001D46  0100               	movlb	0	; () banked
  4446  001D48  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4447  001D4A  0100               	movlb	0	; () banked
  4448  001D4C  8F64               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  4449                           
  4450                           ; BSR set to: 0
  4451  001D4E  0EFF               	movlw	255
  4452  001D50  0100               	movlb	0	; () banked
  4453  001D52  1763               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  4454  001D54  0EFF               	movlw	255
  4455  001D56  0100               	movlb	0	; () banked
  4456  001D58  1764               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  4457  001D5A  0E00               	movlw	0
  4458  001D5C  0100               	movlb	0	; () banked
  4459  001D5E  1765               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  4460                           
  4461                           ; BSR set to: 0
  4462  001D60  0E00               	movlw	0
  4463  001D62  0100               	movlb	0	; () banked
  4464  001D64  6F69               	movwf	__tdiv_to_l_@quot& (0+255),b
  4465  001D66  0E00               	movlw	0
  4466  001D68  6F6A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  4467  001D6A  0E00               	movlw	0
  4468  001D6C  6F6B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  4469  001D6E  0E00               	movlw	0
  4470  001D70  6F6C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  4471                           
  4472                           ; BSR set to: 0
  4473  001D72  0E7F               	movlw	127
  4474  001D74  0100               	movlb	0	; () banked
  4475  001D76  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4476                           
  4477                           ; BSR set to: 0
  4478  001D78  0100               	movlb	0	; () banked
  4479  001D7A  516D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  4480  001D7C  0F98               	addlw	152
  4481  001D7E  0100               	movlb	0	; () banked
  4482  001D80  5F6E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  4483                           
  4484                           ; BSR set to: 0
  4485  001D82  0E18               	movlw	24
  4486  001D84  0100               	movlb	0	; () banked
  4487  001D86  6F6D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  4488  001D88                     l1968:
  4489                           
  4490                           ; BSR set to: 0
  4491  001D88  0100               	movlb	0	; () banked
  4492  001D8A  90D8               	bcf	status,0,c
  4493  001D8C  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4494  001D8E  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4495  001D90  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4496  001D92  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4497                           
  4498                           ; BSR set to: 0
  4499  001D94  0100               	movlb	0	; () banked
  4500  001D96  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  4501  001D98  0100               	movlb	0	; () banked
  4502  001D9A  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  4503  001D9C  0100               	movlb	0	; () banked
  4504  001D9E  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4505  001DA0  0100               	movlb	0	; () banked
  4506  001DA2  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  4507  001DA4  0100               	movlb	0	; () banked
  4508  001DA6  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  4509  001DA8  0100               	movlb	0	; () banked
  4510  001DAA  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  4511  001DAC  A0D8               	btfss	status,0,c
  4512  001DAE  D00E               	goto	l1969
  4513                           
  4514                           ; BSR set to: 0
  4515  001DB0  0100               	movlb	0	; () banked
  4516  001DB2  5163               	movf	__tdiv_to_l_@f2& (0+255),w,b
  4517  001DB4  0100               	movlb	0	; () banked
  4518  001DB6  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  4519  001DB8  0100               	movlb	0	; () banked
  4520  001DBA  5164               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  4521  001DBC  0100               	movlb	0	; () banked
  4522  001DBE  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4523  001DC0  0100               	movlb	0	; () banked
  4524  001DC2  5165               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  4525  001DC4  0100               	movlb	0	; () banked
  4526  001DC6  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4527                           
  4528                           ; BSR set to: 0
  4529  001DC8  0100               	movlb	0	; () banked
  4530  001DCA  8169               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  4531  001DCC                     l1969:
  4532                           
  4533                           ; BSR set to: 0
  4534  001DCC  0100               	movlb	0	; () banked
  4535  001DCE  90D8               	bcf	status,0,c
  4536  001DD0  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  4537  001DD2  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  4538  001DD4  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  4539                           
  4540                           ; BSR set to: 0
  4541  001DD6  0100               	movlb	0	; () banked
  4542  001DD8  2F6D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  4543  001DDA  D7D6               	goto	l1968
  4544                           
  4545                           ; BSR set to: 0
  4546                           
  4547                           ; BSR set to: 0
  4548  001DDC  0100               	movlb	0	; () banked
  4549  001DDE  AF6E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  4550  001DE0  D01A               	goto	l1971
  4551                           
  4552                           ; BSR set to: 0
  4553  001DE2  0100               	movlb	0	; () banked
  4554  001DE4  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4555  001DE6  0A80               	xorlw	128
  4556  001DE8  0F97               	addlw	151
  4557  001DEA  B0D8               	btfsc	status,0,c
  4558  001DEC  D00A               	goto	l1972
  4559                           
  4560                           ; BSR set to: 0
  4561  001DEE  0E00               	movlw	0
  4562  001DF0  0100               	movlb	0	; () banked
  4563  001DF2  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  4564  001DF4  0E00               	movlw	0
  4565  001DF6  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4566  001DF8  0E00               	movlw	0
  4567  001DFA  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4568  001DFC  0E00               	movlw	0
  4569  001DFE  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4570                           
  4571                           ; BSR set to: 0
  4572  001E00  0012               	return	
  4573  001E02                     l1972:
  4574                           
  4575                           ; BSR set to: 0
  4576                           
  4577                           ; BSR set to: 0
  4578                           
  4579                           ; BSR set to: 0
  4580  001E02  0100               	movlb	0	; () banked
  4581  001E04  90D8               	bcf	status,0,c
  4582  001E06  336C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4583  001E08  336B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4584  001E0A  336A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4585  001E0C  3369               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  4586                           
  4587                           ; BSR set to: 0
  4588  001E0E  0100               	movlb	0	; () banked
  4589  001E10  3F6E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  4590  001E12  D7F7               	goto	l1972
  4591                           
  4592                           ; BSR set to: 0
  4593  001E14  D01B               	goto	u6410
  4594  001E16                     l1971:
  4595                           
  4596                           ; BSR set to: 0
  4597                           
  4598                           ; BSR set to: 0
  4599  001E16  0E17               	movlw	23
  4600  001E18  0100               	movlb	0	; () banked
  4601  001E1A  656E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  4602  001E1C  D012               	goto	l1977
  4603                           
  4604                           ; BSR set to: 0
  4605  001E1E  0E00               	movlw	0
  4606  001E20  0100               	movlb	0	; () banked
  4607  001E22  6F60               	movwf	?__tdiv_to_l_& (0+255),b
  4608  001E24  0E00               	movlw	0
  4609  001E26  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  4610  001E28  0E00               	movlw	0
  4611  001E2A  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  4612  001E2C  0E00               	movlw	0
  4613  001E2E  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  4614                           
  4615                           ; BSR set to: 0
  4616  001E30  0012               	return	
  4617  001E32                     
  4618                           ; BSR set to: 0
  4619                           
  4620                           ; BSR set to: 0
  4621  001E32  0100               	movlb	0	; () banked
  4622  001E34  90D8               	bcf	status,0,c
  4623  001E36  3769               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  4624  001E38  376A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  4625  001E3A  376B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  4626  001E3C  376C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  4627  001E3E  0100               	movlb	0	; () banked
  4628  001E40  076E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  4629  001E42                     l1977:
  4630                           
  4631                           ; BSR set to: 0
  4632                           
  4633                           ; BSR set to: 0
  4634  001E42  0100               	movlb	0	; () banked
  4635  001E44  516E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  4636  001E46  0100               	movlb	0	; () banked
  4637  001E48  A4D8               	btfss	status,2,c
  4638  001E4A  D7F3               	goto	l1978
  4639  001E4C                     u6410:
  4640                           
  4641                           ; BSR set to: 0
  4642                           
  4643                           ; BSR set to: 0
  4644  001E4C  C069  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4645  001E50  C06A  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4646  001E54  C06B  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4647  001E58  C06C  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4648                           
  4649                           ; BSR set to: 0
  4650  001E5C  0012               	return		;funcret
  4651  001E5E                     __end_of__tdiv_to_l_:
  4652                           	opt stack 0
  4653                           tblptru	equ	0xFF8
  4654                           tblptrh	equ	0xFF7
  4655                           tblptrl	equ	0xFF6
  4656                           tablat	equ	0xFF5
  4657                           prodh	equ	0xFF4
  4658                           prodl	equ	0xFF3
  4659                           intcon	equ	0xFF2
  4660                           postinc0	equ	0xFEE
  4661                           wreg	equ	0xFE8
  4662                           indf2	equ	0xFDF
  4663                           postinc2	equ	0xFDE
  4664                           postdec2	equ	0xFDD
  4665                           fsr2h	equ	0xFDA
  4666                           fsr2l	equ	0xFD9
  4667                           status	equ	0xFD8
  4668                           
  4669 ;; *************** function __div_to_l_ *****************
  4670 ;; Defined at:
  4671 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
  4672 ;; Parameters:    Size  Location     Type
  4673 ;;  f1              3    0[BANK0 ] unsigned long 
  4674 ;;  f2              3    3[BANK0 ] unsigned long 
  4675 ;; Auto vars:     Size  Location     Type
  4676 ;;  quot            4    6[BANK0 ] unsigned long 
  4677 ;;  exp1            1   11[BANK0 ] unsigned char 
  4678 ;;  cntr            1   10[BANK0 ] unsigned char 
  4679 ;; Return value:  Size  Location     Type
  4680 ;;                  4    0[BANK0 ] unsigned long 
  4681 ;; Registers used:
  4682 ;;		wreg, status,2, status,0
  4683 ;; Tracked objects:
  4684 ;;		On entry : 0/0
  4685 ;;		On exit  : 0/0
  4686 ;;		Unchanged: 0/0
  4687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4688 ;;      Params:         0       6       0       0       0       0       0       0       0
  4689 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4690 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4691 ;;      Totals:         0      12       0       0       0       0       0       0       0
  4692 ;;Total ram usage:       12 bytes
  4693 ;; Hardware stack levels used:    1
  4694 ;; Hardware stack levels required when called:    4
  4695 ;; This function calls:
  4696 ;;		Nothing
  4697 ;; This function is called by:
  4698 ;;		_sprintf
  4699 ;; This function uses a non-reentrant model
  4700 ;;
  4701                           
  4702                           	psect	text10
  4703  001E5E                     __ptext10:
  4704                           	opt stack 0
  4705  001E5E                     __div_to_l_:
  4706                           	opt stack 25
  4707                           
  4708                           ; BSR set to: 0
  4709                           ;incstack = 0
  4710  001E5E  0100               	movlb	0	; () banked
  4711  001E60  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  4712  001E62  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  4713  001E64  0100               	movlb	0	; () banked
  4714  001E66  6F6B               	movwf	__div_to_l_@exp1& (0+255),b
  4715  001E68  0100               	movlb	0	; () banked
  4716  001E6A  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  4717  001E6C  A4D8               	btfss	status,2,c
  4718  001E6E  D00A               	goto	l1861
  4719                           
  4720                           ; BSR set to: 0
  4721  001E70  0E00               	movlw	0
  4722  001E72  0100               	movlb	0	; () banked
  4723  001E74  6F60               	movwf	?__div_to_l_& (0+255),b
  4724  001E76  0E00               	movlw	0
  4725  001E78  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4726  001E7A  0E00               	movlw	0
  4727  001E7C  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4728  001E7E  0E00               	movlw	0
  4729  001E80  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4730                           
  4731                           ; BSR set to: 0
  4732  001E82  0012               	return	
  4733  001E84                     l1861:
  4734                           
  4735                           ; BSR set to: 0
  4736                           
  4737                           ; BSR set to: 0
  4738  001E84  0100               	movlb	0	; () banked
  4739  001E86  3565               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  4740  001E88  3566               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  4741  001E8A  0100               	movlb	0	; () banked
  4742  001E8C  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  4743  001E8E  0100               	movlb	0	; () banked
  4744  001E90  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  4745  001E92  A4D8               	btfss	status,2,c
  4746  001E94  D00A               	goto	l1863
  4747                           
  4748                           ; BSR set to: 0
  4749  001E96  0E00               	movlw	0
  4750  001E98  0100               	movlb	0	; () banked
  4751  001E9A  6F60               	movwf	?__div_to_l_& (0+255),b
  4752  001E9C  0E00               	movlw	0
  4753  001E9E  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4754  001EA0  0E00               	movlw	0
  4755  001EA2  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4756  001EA4  0E00               	movlw	0
  4757  001EA6  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4758                           
  4759                           ; BSR set to: 0
  4760  001EA8  0012               	return	
  4761  001EAA                     l1863:
  4762                           
  4763                           ; BSR set to: 0
  4764                           
  4765                           ; BSR set to: 0
  4766  001EAA  0100               	movlb	0	; () banked
  4767  001EAC  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  4768                           
  4769                           ; BSR set to: 0
  4770  001EAE  0EFF               	movlw	255
  4771  001EB0  0100               	movlb	0	; () banked
  4772  001EB2  1760               	andwf	__div_to_l_@f1& (0+255),f,b
  4773  001EB4  0EFF               	movlw	255
  4774  001EB6  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  4775  001EB8  0EFF               	movlw	255
  4776  001EBA  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  4777  001EBC  0E00               	movlw	0
  4778  001EBE  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  4779                           
  4780                           ; BSR set to: 0
  4781  001EC0  0100               	movlb	0	; () banked
  4782  001EC2  8F65               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  4783  001EC4  0EFF               	movlw	255
  4784  001EC6  0100               	movlb	0	; () banked
  4785  001EC8  1763               	andwf	__div_to_l_@f2& (0+255),f,b
  4786  001ECA  0EFF               	movlw	255
  4787  001ECC  1764               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  4788  001ECE  0EFF               	movlw	255
  4789  001ED0  1765               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  4790  001ED2  0E00               	movlw	0
  4791  001ED4  1766               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  4792                           
  4793                           ; BSR set to: 0
  4794  001ED6  0E00               	movlw	0
  4795  001ED8  0100               	movlb	0	; () banked
  4796  001EDA  6F66               	movwf	__div_to_l_@quot& (0+255),b
  4797  001EDC  0E00               	movlw	0
  4798  001EDE  6F67               	movwf	(__div_to_l_@quot+1)& (0+255),b
  4799  001EE0  0E00               	movlw	0
  4800  001EE2  6F68               	movwf	(__div_to_l_@quot+2)& (0+255),b
  4801  001EE4  0E00               	movlw	0
  4802  001EE6  6F69               	movwf	(__div_to_l_@quot+3)& (0+255),b
  4803                           
  4804                           ; BSR set to: 0
  4805  001EE8  0E7F               	movlw	127
  4806  001EEA  0100               	movlb	0	; () banked
  4807  001EEC  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  4808                           
  4809                           ; BSR set to: 0
  4810  001EEE  0100               	movlb	0	; () banked
  4811  001EF0  516A               	movf	__div_to_l_@cntr& (0+255),w,b
  4812  001EF2  0FA0               	addlw	160
  4813  001EF4  0100               	movlb	0	; () banked
  4814  001EF6  5F6B               	subwf	__div_to_l_@exp1& (0+255),f,b
  4815                           
  4816                           ; BSR set to: 0
  4817  001EF8  0E20               	movlw	32
  4818  001EFA  0100               	movlb	0	; () banked
  4819  001EFC  6F6A               	movwf	__div_to_l_@cntr& (0+255),b
  4820  001EFE                     
  4821                           ; BSR set to: 0
  4822                           
  4823                           ; BSR set to: 0
  4824  001EFE  0100               	movlb	0	; () banked
  4825  001F00  90D8               	bcf	status,0,c
  4826  001F02  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  4827  001F04  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  4828  001F06  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  4829  001F08  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  4830                           
  4831                           ; BSR set to: 0
  4832  001F0A  0100               	movlb	0	; () banked
  4833  001F0C  5163               	movf	__div_to_l_@f2& (0+255),w,b
  4834  001F0E  0100               	movlb	0	; () banked
  4835  001F10  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
  4836  001F12  0100               	movlb	0	; () banked
  4837  001F14  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4838  001F16  0100               	movlb	0	; () banked
  4839  001F18  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  4840  001F1A  0100               	movlb	0	; () banked
  4841  001F1C  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4842  001F1E  0100               	movlb	0	; () banked
  4843  001F20  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  4844  001F22  0100               	movlb	0	; () banked
  4845  001F24  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  4846  001F26  0100               	movlb	0	; () banked
  4847  001F28  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  4848  001F2A  A0D8               	btfss	status,0,c
  4849  001F2C  D012               	goto	l1865
  4850                           
  4851                           ; BSR set to: 0
  4852  001F2E  0100               	movlb	0	; () banked
  4853  001F30  5163               	movf	__div_to_l_@f2& (0+255),w,b
  4854  001F32  0100               	movlb	0	; () banked
  4855  001F34  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
  4856  001F36  0100               	movlb	0	; () banked
  4857  001F38  5164               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  4858  001F3A  0100               	movlb	0	; () banked
  4859  001F3C  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  4860  001F3E  0100               	movlb	0	; () banked
  4861  001F40  5165               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  4862  001F42  0100               	movlb	0	; () banked
  4863  001F44  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  4864  001F46  0100               	movlb	0	; () banked
  4865  001F48  5166               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  4866  001F4A  0100               	movlb	0	; () banked
  4867  001F4C  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  4868                           
  4869                           ; BSR set to: 0
  4870  001F4E  0100               	movlb	0	; () banked
  4871  001F50  8166               	bsf	__div_to_l_@quot& (0+255),0,b
  4872  001F52                     l1865:
  4873                           
  4874                           ; BSR set to: 0
  4875                           
  4876                           ; BSR set to: 0
  4877  001F52  0100               	movlb	0	; () banked
  4878  001F54  90D8               	bcf	status,0,c
  4879  001F56  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
  4880  001F58  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  4881  001F5A  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  4882  001F5C  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  4883                           
  4884                           ; BSR set to: 0
  4885  001F5E  0100               	movlb	0	; () banked
  4886  001F60  2F6A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  4887  001F62  D7CD               	goto	l1864
  4888                           
  4889                           ; BSR set to: 0
  4890                           
  4891                           ; BSR set to: 0
  4892  001F64  0100               	movlb	0	; () banked
  4893  001F66  AF6B               	btfss	__div_to_l_@exp1& (0+255),7,b
  4894  001F68  D01A               	goto	l1867
  4895                           
  4896                           ; BSR set to: 0
  4897  001F6A  0100               	movlb	0	; () banked
  4898  001F6C  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  4899  001F6E  0A80               	xorlw	128
  4900  001F70  0F9F               	addlw	159
  4901  001F72  B0D8               	btfsc	status,0,c
  4902  001F74  D00A               	goto	l1868
  4903                           
  4904                           ; BSR set to: 0
  4905  001F76  0E00               	movlw	0
  4906  001F78  0100               	movlb	0	; () banked
  4907  001F7A  6F60               	movwf	?__div_to_l_& (0+255),b
  4908  001F7C  0E00               	movlw	0
  4909  001F7E  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4910  001F80  0E00               	movlw	0
  4911  001F82  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4912  001F84  0E00               	movlw	0
  4913  001F86  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4914                           
  4915                           ; BSR set to: 0
  4916  001F88  0012               	return	
  4917  001F8A                     l1868:
  4918                           
  4919                           ; BSR set to: 0
  4920                           
  4921                           ; BSR set to: 0
  4922                           
  4923                           ; BSR set to: 0
  4924  001F8A  0100               	movlb	0	; () banked
  4925  001F8C  90D8               	bcf	status,0,c
  4926  001F8E  3369               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  4927  001F90  3368               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  4928  001F92  3367               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  4929  001F94  3366               	rrcf	__div_to_l_@quot& (0+255),f,b
  4930                           
  4931                           ; BSR set to: 0
  4932  001F96  0100               	movlb	0	; () banked
  4933  001F98  3F6B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  4934  001F9A  D7F7               	goto	l1868
  4935                           
  4936                           ; BSR set to: 0
  4937  001F9C  D01B               	goto	u6480
  4938  001F9E                     l1867:
  4939                           
  4940                           ; BSR set to: 0
  4941                           
  4942                           ; BSR set to: 0
  4943  001F9E  0E1F               	movlw	31
  4944  001FA0  0100               	movlb	0	; () banked
  4945  001FA2  656B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  4946  001FA4  D012               	goto	l1873
  4947                           
  4948                           ; BSR set to: 0
  4949  001FA6  0E00               	movlw	0
  4950  001FA8  0100               	movlb	0	; () banked
  4951  001FAA  6F60               	movwf	?__div_to_l_& (0+255),b
  4952  001FAC  0E00               	movlw	0
  4953  001FAE  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
  4954  001FB0  0E00               	movlw	0
  4955  001FB2  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
  4956  001FB4  0E00               	movlw	0
  4957  001FB6  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
  4958                           
  4959                           ; BSR set to: 0
  4960  001FB8  0012               	return	
  4961  001FBA                     
  4962                           ; BSR set to: 0
  4963                           
  4964                           ; BSR set to: 0
  4965  001FBA  0100               	movlb	0	; () banked
  4966  001FBC  90D8               	bcf	status,0,c
  4967  001FBE  3766               	rlcf	__div_to_l_@quot& (0+255),f,b
  4968  001FC0  3767               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  4969  001FC2  3768               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  4970  001FC4  3769               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  4971  001FC6  0100               	movlb	0	; () banked
  4972  001FC8  076B               	decf	__div_to_l_@exp1& (0+255),f,b
  4973  001FCA                     l1873:
  4974                           
  4975                           ; BSR set to: 0
  4976                           
  4977                           ; BSR set to: 0
  4978  001FCA  0100               	movlb	0	; () banked
  4979  001FCC  516B               	movf	__div_to_l_@exp1& (0+255),w,b
  4980  001FCE  0100               	movlb	0	; () banked
  4981  001FD0  A4D8               	btfss	status,2,c
  4982  001FD2  D7F3               	goto	l1874
  4983  001FD4                     u6480:
  4984                           
  4985                           ; BSR set to: 0
  4986                           
  4987                           ; BSR set to: 0
  4988  001FD4  C066  F060         	movff	__div_to_l_@quot,?__div_to_l_
  4989  001FD8  C067  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4990  001FDC  C068  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4991  001FE0  C069  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4992                           
  4993                           ; BSR set to: 0
  4994  001FE4  0012               	return		;funcret
  4995  001FE6                     __end_of__div_to_l_:
  4996                           	opt stack 0
  4997                           tblptru	equ	0xFF8
  4998                           tblptrh	equ	0xFF7
  4999                           tblptrl	equ	0xFF6
  5000                           tablat	equ	0xFF5
  5001                           prodh	equ	0xFF4
  5002                           prodl	equ	0xFF3
  5003                           intcon	equ	0xFF2
  5004                           postinc0	equ	0xFEE
  5005                           wreg	equ	0xFE8
  5006                           indf2	equ	0xFDF
  5007                           postinc2	equ	0xFDE
  5008                           postdec2	equ	0xFDD
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013 ;; *************** function ___lltoft *****************
  5014 ;; Defined at:
  5015 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lltoft.c"
  5016 ;; Parameters:    Size  Location     Type
  5017 ;;  c               4    8[BANK0 ] unsigned long 
  5018 ;; Auto vars:     Size  Location     Type
  5019 ;;  exp             1   31[COMRAM] unsigned char 
  5020 ;; Return value:  Size  Location     Type
  5021 ;;                  3    8[BANK0 ] float 
  5022 ;; Registers used:
  5023 ;;		wreg, status,2, status,0, cstack
  5024 ;; Tracked objects:
  5025 ;;		On entry : 0/0
  5026 ;;		On exit  : 0/0
  5027 ;;		Unchanged: 0/0
  5028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5029 ;;      Params:         0       4       0       0       0       0       0       0       0
  5030 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5031 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5032 ;;      Totals:         1       8       0       0       0       0       0       0       0
  5033 ;;Total ram usage:        9 bytes
  5034 ;; Hardware stack levels used:    1
  5035 ;; Hardware stack levels required when called:    5
  5036 ;; This function calls:
  5037 ;;		___ftpack
  5038 ;; This function is called by:
  5039 ;;		_sprintf
  5040 ;; This function uses a non-reentrant model
  5041 ;;
  5042                           
  5043                           	psect	text11
  5044  002A76                     __ptext11:
  5045                           	opt stack 0
  5046  002A76                     ___lltoft:
  5047                           	opt stack 24
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;incstack = 0
  5051  002A76  0E8E               	movlw	142
  5052  002A78  6E20               	movwf	___lltoft@exp,c
  5053  002A7A  D007               	goto	l2072
  5054  002A7C  0100               	movlb	0	; () banked
  5055  002A7E  90D8               	bcf	status,0,c
  5056  002A80  336B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  5057  002A82  336A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  5058  002A84  3369               	rrcf	(___lltoft@c+1)& (0+255),f,b
  5059  002A86  3368               	rrcf	___lltoft@c& (0+255),f,b
  5060  002A88  2A20               	incf	___lltoft@exp,f,c
  5061  002A8A                     l2072:
  5062                           
  5063                           ; BSR set to: 0
  5064  002A8A  0E00               	movlw	0
  5065  002A8C  0100               	movlb	0	; () banked
  5066  002A8E  1568               	andwf	___lltoft@c& (0+255),w,b
  5067  002A90  0100               	movlb	0	; () banked
  5068  002A92  6F6C               	movwf	??___lltoft& (0+255),b
  5069  002A94  0E00               	movlw	0
  5070  002A96  0100               	movlb	0	; () banked
  5071  002A98  1569               	andwf	(___lltoft@c+1)& (0+255),w,b
  5072  002A9A  0100               	movlb	0	; () banked
  5073  002A9C  6F6D               	movwf	(??___lltoft+1)& (0+255),b
  5074  002A9E  0E00               	movlw	0
  5075  002AA0  0100               	movlb	0	; () banked
  5076  002AA2  156A               	andwf	(___lltoft@c+2)& (0+255),w,b
  5077  002AA4  0100               	movlb	0	; () banked
  5078  002AA6  6F6E               	movwf	(??___lltoft+2)& (0+255),b
  5079  002AA8  0EFF               	movlw	255
  5080  002AAA  0100               	movlb	0	; () banked
  5081  002AAC  156B               	andwf	(___lltoft@c+3)& (0+255),w,b
  5082  002AAE  0100               	movlb	0	; () banked
  5083  002AB0  6F6F               	movwf	(??___lltoft+3)& (0+255),b
  5084  002AB2  0100               	movlb	0	; () banked
  5085  002AB4  516C               	movf	??___lltoft& (0+255),w,b
  5086  002AB6  0100               	movlb	0	; () banked
  5087  002AB8  116D               	iorwf	(??___lltoft+1)& (0+255),w,b
  5088  002ABA  0100               	movlb	0	; () banked
  5089  002ABC  116E               	iorwf	(??___lltoft+2)& (0+255),w,b
  5090  002ABE  0100               	movlb	0	; () banked
  5091  002AC0  116F               	iorwf	(??___lltoft+3)& (0+255),w,b
  5092  002AC2  A4D8               	btfss	status,2,c
  5093  002AC4  D7DB               	goto	l2073
  5094                           
  5095                           ; BSR set to: 0
  5096                           
  5097                           ; BSR set to: 0
  5098  002AC6  C068  F060         	movff	___lltoft@c,___ftpack@arg
  5099  002ACA  C069  F061         	movff	___lltoft@c+1,___ftpack@arg+1
  5100  002ACE  C06A  F062         	movff	___lltoft@c+2,___ftpack@arg+2
  5101  002AD2  C020  F063         	movff	___lltoft@exp,___ftpack@exp
  5102  002AD6  0E00               	movlw	0
  5103  002AD8  0100               	movlb	0	; () banked
  5104  002ADA  6F64               	movwf	___ftpack@sign& (0+255),b
  5105  002ADC  ECF7  F011         	call	___ftpack	;wreg free
  5106  002AE0  C060  F068         	movff	?___ftpack,?___lltoft
  5107  002AE4  C061  F069         	movff	?___ftpack+1,?___lltoft+1
  5108  002AE8  C062  F06A         	movff	?___ftpack+2,?___lltoft+2
  5109  002AEC  0012               	return	
  5110  002AEE                     __end_of___lltoft:
  5111                           	opt stack 0
  5112                           tblptru	equ	0xFF8
  5113                           tblptrh	equ	0xFF7
  5114                           tblptrl	equ	0xFF6
  5115                           tablat	equ	0xFF5
  5116                           prodh	equ	0xFF4
  5117                           prodl	equ	0xFF3
  5118                           intcon	equ	0xFF2
  5119                           postinc0	equ	0xFEE
  5120                           wreg	equ	0xFE8
  5121                           indf2	equ	0xFDF
  5122                           postinc2	equ	0xFDE
  5123                           postdec2	equ	0xFDD
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function ___llmod *****************
  5129 ;; Defined at:
  5130 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  dividend        4    0[BANK0 ] unsigned long 
  5133 ;;  divisor         4    4[BANK0 ] unsigned long 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  counter         1   31[COMRAM] unsigned char 
  5136 ;; Return value:  Size  Location     Type
  5137 ;;                  4    0[BANK0 ] unsigned long 
  5138 ;; Registers used:
  5139 ;;		wreg, status,2, status,0
  5140 ;; Tracked objects:
  5141 ;;		On entry : 0/0
  5142 ;;		On exit  : 0/0
  5143 ;;		Unchanged: 0/0
  5144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5145 ;;      Params:         0       8       0       0       0       0       0       0       0
  5146 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5147 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5148 ;;      Totals:         1       8       0       0       0       0       0       0       0
  5149 ;;Total ram usage:        9 bytes
  5150 ;; Hardware stack levels used:    1
  5151 ;; Hardware stack levels required when called:    4
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		_sprintf
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           	psect	text12
  5160  0029E2                     __ptext12:
  5161                           	opt stack 0
  5162  0029E2                     ___llmod:
  5163                           	opt stack 25
  5164                           
  5165                           ;incstack = 0
  5166  0029E2  0100               	movlb	0	; () banked
  5167  0029E4  5164               	movf	___llmod@divisor& (0+255),w,b
  5168  0029E6  0100               	movlb	0	; () banked
  5169  0029E8  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5170  0029EA  0100               	movlb	0	; () banked
  5171  0029EC  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5172  0029EE  0100               	movlb	0	; () banked
  5173  0029F0  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5174  0029F2  B4D8               	btfsc	status,2,c
  5175  0029F4  D037               	goto	l2066
  5176                           
  5177                           ; BSR set to: 0
  5178  0029F6  0E01               	movlw	1
  5179  0029F8  6E20               	movwf	___llmod@counter,c
  5180  0029FA  D007               	goto	l2061
  5181  0029FC                     
  5182                           ; BSR set to: 0
  5183                           
  5184                           ; BSR set to: 0
  5185  0029FC  0100               	movlb	0	; () banked
  5186  0029FE  90D8               	bcf	status,0,c
  5187  002A00  3764               	rlcf	___llmod@divisor& (0+255),f,b
  5188  002A02  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5189  002A04  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5190  002A06  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5191  002A08  2A20               	incf	___llmod@counter,f,c
  5192  002A0A                     l2061:
  5193                           
  5194                           ; BSR set to: 0
  5195                           
  5196                           ; BSR set to: 0
  5197  002A0A  0100               	movlb	0	; () banked
  5198  002A0C  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5199  002A0E  D7F6               	goto	l2062
  5200  002A10                     u6580:
  5201                           
  5202                           ; BSR set to: 0
  5203                           
  5204                           ; BSR set to: 0
  5205                           
  5206                           ; BSR set to: 0
  5207  002A10  0100               	movlb	0	; () banked
  5208  002A12  5164               	movf	___llmod@divisor& (0+255),w,b
  5209  002A14  0100               	movlb	0	; () banked
  5210  002A16  5D60               	subwf	___llmod@dividend& (0+255),w,b
  5211  002A18  0100               	movlb	0	; () banked
  5212  002A1A  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  5213  002A1C  0100               	movlb	0	; () banked
  5214  002A1E  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5215  002A20  0100               	movlb	0	; () banked
  5216  002A22  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  5217  002A24  0100               	movlb	0	; () banked
  5218  002A26  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5219  002A28  0100               	movlb	0	; () banked
  5220  002A2A  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  5221  002A2C  0100               	movlb	0	; () banked
  5222  002A2E  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5223  002A30  A0D8               	btfss	status,0,c
  5224  002A32  D010               	goto	l2065
  5225                           
  5226                           ; BSR set to: 0
  5227  002A34  0100               	movlb	0	; () banked
  5228  002A36  5164               	movf	___llmod@divisor& (0+255),w,b
  5229  002A38  0100               	movlb	0	; () banked
  5230  002A3A  5F60               	subwf	___llmod@dividend& (0+255),f,b
  5231  002A3C  0100               	movlb	0	; () banked
  5232  002A3E  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  5233  002A40  0100               	movlb	0	; () banked
  5234  002A42  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5235  002A44  0100               	movlb	0	; () banked
  5236  002A46  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  5237  002A48  0100               	movlb	0	; () banked
  5238  002A4A  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5239  002A4C  0100               	movlb	0	; () banked
  5240  002A4E  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  5241  002A50  0100               	movlb	0	; () banked
  5242  002A52  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5243  002A54                     l2065:
  5244                           
  5245                           ; BSR set to: 0
  5246                           
  5247                           ; BSR set to: 0
  5248  002A54  0100               	movlb	0	; () banked
  5249  002A56  90D8               	bcf	status,0,c
  5250  002A58  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5251  002A5A  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5252  002A5C  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5253  002A5E  3364               	rrcf	___llmod@divisor& (0+255),f,b
  5254                           
  5255                           ; BSR set to: 0
  5256  002A60  2E20               	decfsz	___llmod@counter,f,c
  5257  002A62  D7D6               	goto	u6580
  5258  002A64                     l2066:
  5259                           
  5260                           ; BSR set to: 0
  5261                           
  5262                           ; BSR set to: 0
  5263  002A64  C060  F060         	movff	___llmod@dividend,?___llmod
  5264  002A68  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  5265  002A6C  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  5266  002A70  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  5267                           
  5268                           ; BSR set to: 0
  5269  002A74  0012               	return		;funcret
  5270  002A76                     __end_of___llmod:
  5271                           	opt stack 0
  5272                           tblptru	equ	0xFF8
  5273                           tblptrh	equ	0xFF7
  5274                           tblptrl	equ	0xFF6
  5275                           tablat	equ	0xFF5
  5276                           prodh	equ	0xFF4
  5277                           prodl	equ	0xFF3
  5278                           intcon	equ	0xFF2
  5279                           postinc0	equ	0xFEE
  5280                           wreg	equ	0xFE8
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function ___lldiv *****************
  5289 ;; Defined at:
  5290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;  dividend        4    0[BANK0 ] unsigned long 
  5293 ;;  divisor         4    4[BANK0 ] unsigned long 
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;  quotient        4    8[BANK0 ] unsigned long 
  5296 ;;  counter         1   12[BANK0 ] unsigned char 
  5297 ;; Return value:  Size  Location     Type
  5298 ;;                  4    0[BANK0 ] unsigned long 
  5299 ;; Registers used:
  5300 ;;		wreg, status,2, status,0
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5306 ;;      Params:         0       8       0       0       0       0       0       0       0
  5307 ;;      Locals:         0       5       0       0       0       0       0       0       0
  5308 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5309 ;;      Totals:         0      13       0       0       0       0       0       0       0
  5310 ;;Total ram usage:       13 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:    4
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_sprintf
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text13
  5321  002680                     __ptext13:
  5322                           	opt stack 0
  5323  002680                     ___lldiv:
  5324                           	opt stack 25
  5325                           
  5326                           ; BSR set to: 0
  5327                           ;incstack = 0
  5328  002680  0E00               	movlw	0
  5329  002682  0100               	movlb	0	; () banked
  5330  002684  6F68               	movwf	___lldiv@quotient& (0+255),b
  5331  002686  0E00               	movlw	0
  5332  002688  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  5333  00268A  0E00               	movlw	0
  5334  00268C  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  5335  00268E  0E00               	movlw	0
  5336  002690  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  5337                           
  5338                           ; BSR set to: 0
  5339  002692  0100               	movlb	0	; () banked
  5340  002694  5164               	movf	___lldiv@divisor& (0+255),w,b
  5341  002696  0100               	movlb	0	; () banked
  5342  002698  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  5343  00269A  0100               	movlb	0	; () banked
  5344  00269C  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  5345  00269E  0100               	movlb	0	; () banked
  5346  0026A0  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  5347  0026A2  B4D8               	btfsc	status,2,c
  5348  0026A4  D042               	goto	l2056
  5349                           
  5350                           ; BSR set to: 0
  5351  0026A6  0E01               	movlw	1
  5352  0026A8  0100               	movlb	0	; () banked
  5353  0026AA  6F6C               	movwf	___lldiv@counter& (0+255),b
  5354  0026AC  D008               	goto	l2051
  5355  0026AE                     
  5356                           ; BSR set to: 0
  5357                           
  5358                           ; BSR set to: 0
  5359  0026AE  0100               	movlb	0	; () banked
  5360  0026B0  90D8               	bcf	status,0,c
  5361  0026B2  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  5362  0026B4  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  5363  0026B6  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  5364  0026B8  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  5365  0026BA  0100               	movlb	0	; () banked
  5366  0026BC  2B6C               	incf	___lldiv@counter& (0+255),f,b
  5367  0026BE                     l2051:
  5368                           
  5369                           ; BSR set to: 0
  5370                           
  5371                           ; BSR set to: 0
  5372  0026BE  0100               	movlb	0	; () banked
  5373  0026C0  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  5374  0026C2  D7F5               	goto	l2052
  5375  0026C4                     u6550:
  5376                           
  5377                           ; BSR set to: 0
  5378                           
  5379                           ; BSR set to: 0
  5380                           
  5381                           ; BSR set to: 0
  5382  0026C4  0100               	movlb	0	; () banked
  5383  0026C6  90D8               	bcf	status,0,c
  5384  0026C8  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  5385  0026CA  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5386  0026CC  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5387  0026CE  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5388                           
  5389                           ; BSR set to: 0
  5390  0026D0  0100               	movlb	0	; () banked
  5391  0026D2  5164               	movf	___lldiv@divisor& (0+255),w,b
  5392  0026D4  0100               	movlb	0	; () banked
  5393  0026D6  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  5394  0026D8  0100               	movlb	0	; () banked
  5395  0026DA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5396  0026DC  0100               	movlb	0	; () banked
  5397  0026DE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5398  0026E0  0100               	movlb	0	; () banked
  5399  0026E2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5400  0026E4  0100               	movlb	0	; () banked
  5401  0026E6  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5402  0026E8  0100               	movlb	0	; () banked
  5403  0026EA  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5404  0026EC  0100               	movlb	0	; () banked
  5405  0026EE  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5406  0026F0  A0D8               	btfss	status,0,c
  5407  0026F2  D012               	goto	l2055
  5408                           
  5409                           ; BSR set to: 0
  5410  0026F4  0100               	movlb	0	; () banked
  5411  0026F6  5164               	movf	___lldiv@divisor& (0+255),w,b
  5412  0026F8  0100               	movlb	0	; () banked
  5413  0026FA  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  5414  0026FC  0100               	movlb	0	; () banked
  5415  0026FE  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5416  002700  0100               	movlb	0	; () banked
  5417  002702  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5418  002704  0100               	movlb	0	; () banked
  5419  002706  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5420  002708  0100               	movlb	0	; () banked
  5421  00270A  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5422  00270C  0100               	movlb	0	; () banked
  5423  00270E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5424  002710  0100               	movlb	0	; () banked
  5425  002712  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5426                           
  5427                           ; BSR set to: 0
  5428  002714  0100               	movlb	0	; () banked
  5429  002716  8168               	bsf	___lldiv@quotient& (0+255),0,b
  5430  002718                     l2055:
  5431                           
  5432                           ; BSR set to: 0
  5433                           
  5434                           ; BSR set to: 0
  5435  002718  0100               	movlb	0	; () banked
  5436  00271A  90D8               	bcf	status,0,c
  5437  00271C  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5438  00271E  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5439  002720  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5440  002722  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  5441                           
  5442                           ; BSR set to: 0
  5443  002724  0100               	movlb	0	; () banked
  5444  002726  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  5445  002728  D7CD               	goto	u6550
  5446  00272A                     l2056:
  5447                           
  5448                           ; BSR set to: 0
  5449                           
  5450                           ; BSR set to: 0
  5451  00272A  C068  F060         	movff	___lldiv@quotient,?___lldiv
  5452  00272E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  5453  002732  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  5454  002736  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  5455                           
  5456                           ; BSR set to: 0
  5457  00273A  0012               	return		;funcret
  5458  00273C                     __end_of___lldiv:
  5459                           	opt stack 0
  5460                           tblptru	equ	0xFF8
  5461                           tblptrh	equ	0xFF7
  5462                           tblptrl	equ	0xFF6
  5463                           tablat	equ	0xFF5
  5464                           prodh	equ	0xFF4
  5465                           prodl	equ	0xFF3
  5466                           intcon	equ	0xFF2
  5467                           postinc0	equ	0xFEE
  5468                           wreg	equ	0xFE8
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           postdec2	equ	0xFDD
  5472                           fsr2h	equ	0xFDA
  5473                           fsr2l	equ	0xFD9
  5474                           status	equ	0xFD8
  5475                           
  5476 ;; *************** function ___fttol *****************
  5477 ;; Defined at:
  5478 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fttol.c"
  5479 ;; Parameters:    Size  Location     Type
  5480 ;;  f1              3   42[BANK0 ] float 
  5481 ;; Auto vars:     Size  Location     Type
  5482 ;;  lval            4   52[BANK0 ] unsigned long 
  5483 ;;  exp1            1   56[BANK0 ] unsigned char 
  5484 ;;  sign1           1   51[BANK0 ] unsigned char 
  5485 ;; Return value:  Size  Location     Type
  5486 ;;                  4   42[BANK0 ] long 
  5487 ;; Registers used:
  5488 ;;		wreg, status,2, status,0
  5489 ;; Tracked objects:
  5490 ;;		On entry : 0/0
  5491 ;;		On exit  : 0/0
  5492 ;;		Unchanged: 0/0
  5493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5494 ;;      Params:         0       4       0       0       0       0       0       0       0
  5495 ;;      Locals:         0       6       0       0       0       0       0       0       0
  5496 ;;      Temps:          0       5       0       0       0       0       0       0       0
  5497 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5498 ;;Total ram usage:       15 bytes
  5499 ;; Hardware stack levels used:    1
  5500 ;; Hardware stack levels required when called:    4
  5501 ;; This function calls:
  5502 ;;		Nothing
  5503 ;; This function is called by:
  5504 ;;		_sprintf
  5505 ;; This function uses a non-reentrant model
  5506 ;;
  5507                           
  5508                           	psect	text14
  5509  0022AA                     __ptext14:
  5510                           	opt stack 0
  5511  0022AA                     ___fttol:
  5512                           	opt stack 25
  5513                           
  5514                           ; BSR set to: 0
  5515                           ;incstack = 0
  5516  0022AA  C08C  F08E         	movff	___fttol@f1+2,??___fttol
  5517  0022AE  0100               	movlb	0	; () banked
  5518  0022B0  6B8F               	clrf	(??___fttol+1)& (0+255),b
  5519  0022B2  6B90               	clrf	(??___fttol+2)& (0+255),b
  5520  0022B4  0100               	movlb	0	; () banked
  5521  0022B6  358B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5522  0022B8  0100               	movlb	0	; () banked
  5523  0022BA  378E               	rlcf	??___fttol& (0+255),f,b
  5524  0022BC  E301               	bnc	u4461
  5525  0022BE  818F               	bsf	(??___fttol+1)& (0+255),0,b
  5526  0022C0                     u4461:
  5527  0022C0  0100               	movlb	0	; () banked
  5528  0022C2  518E               	movf	??___fttol& (0+255),w,b
  5529  0022C4  0100               	movlb	0	; () banked
  5530  0022C6  6F98               	movwf	___fttol@exp1& (0+255),b
  5531  0022C8  0100               	movlb	0	; () banked
  5532  0022CA  5198               	movf	___fttol@exp1& (0+255),w,b
  5533  0022CC  A4D8               	btfss	status,2,c
  5534  0022CE  D00A               	goto	l2010
  5535                           
  5536                           ; BSR set to: 0
  5537  0022D0  0E00               	movlw	0
  5538  0022D2  0100               	movlb	0	; () banked
  5539  0022D4  6F8A               	movwf	?___fttol& (0+255),b
  5540  0022D6  0E00               	movlw	0
  5541  0022D8  6F8B               	movwf	(?___fttol+1)& (0+255),b
  5542  0022DA  0E00               	movlw	0
  5543  0022DC  6F8C               	movwf	(?___fttol+2)& (0+255),b
  5544  0022DE  0E00               	movlw	0
  5545  0022E0  6F8D               	movwf	(?___fttol+3)& (0+255),b
  5546                           
  5547                           ; BSR set to: 0
  5548  0022E2  0012               	return	
  5549  0022E4                     l2010:
  5550                           
  5551                           ; BSR set to: 0
  5552                           
  5553                           ; BSR set to: 0
  5554  0022E4  0E17               	movlw	23
  5555  0022E6  0100               	movlb	0	; () banked
  5556  0022E8  6F8E               	movwf	??___fttol& (0+255),b
  5557  0022EA  C08A  F08F         	movff	___fttol@f1,??___fttol+1
  5558  0022EE  C08B  F090         	movff	___fttol@f1+1,??___fttol+2
  5559  0022F2  C08C  F091         	movff	___fttol@f1+2,??___fttol+3
  5560  0022F6  0100               	movlb	0	; () banked
  5561  0022F8  298E               	incf	??___fttol& (0+255),w,b
  5562  0022FA  0100               	movlb	0	; () banked
  5563  0022FC  6F92               	movwf	(??___fttol+4)& (0+255),b
  5564  0022FE  D005               	goto	u4480
  5565  002300                     u4485:
  5566  002300  0100               	movlb	0	; () banked
  5567  002302  90D8               	bcf	status,0,c
  5568  002304  3391               	rrcf	(??___fttol+3)& (0+255),f,b
  5569  002306  3390               	rrcf	(??___fttol+2)& (0+255),f,b
  5570  002308  338F               	rrcf	(??___fttol+1)& (0+255),f,b
  5571  00230A                     u4480:
  5572  00230A  0100               	movlb	0	; () banked
  5573  00230C  2F92               	decfsz	(??___fttol+4)& (0+255),f,b
  5574  00230E  D7F8               	goto	u4485
  5575  002310  0100               	movlb	0	; () banked
  5576  002312  518F               	movf	(??___fttol+1)& (0+255),w,b
  5577  002314  0100               	movlb	0	; () banked
  5578  002316  6F93               	movwf	___fttol@sign1& (0+255),b
  5579                           
  5580                           ; BSR set to: 0
  5581  002318  0100               	movlb	0	; () banked
  5582  00231A  8F8B               	bsf	(___fttol@f1+1)& (0+255),7,b
  5583                           
  5584                           ; BSR set to: 0
  5585  00231C  0EFF               	movlw	255
  5586  00231E  0100               	movlb	0	; () banked
  5587  002320  178A               	andwf	___fttol@f1& (0+255),f,b
  5588  002322  0EFF               	movlw	255
  5589  002324  0100               	movlb	0	; () banked
  5590  002326  178B               	andwf	(___fttol@f1+1)& (0+255),f,b
  5591  002328  0E00               	movlw	0
  5592  00232A  0100               	movlb	0	; () banked
  5593  00232C  178C               	andwf	(___fttol@f1+2)& (0+255),f,b
  5594                           
  5595                           ; BSR set to: 0
  5596  00232E  0100               	movlb	0	; () banked
  5597  002330  518A               	movf	___fttol@f1& (0+255),w,b
  5598  002332  0100               	movlb	0	; () banked
  5599  002334  6F94               	movwf	___fttol@lval& (0+255),b
  5600  002336  0100               	movlb	0	; () banked
  5601  002338  518B               	movf	(___fttol@f1+1)& (0+255),w,b
  5602  00233A  0100               	movlb	0	; () banked
  5603  00233C  6F95               	movwf	(___fttol@lval+1)& (0+255),b
  5604  00233E  0100               	movlb	0	; () banked
  5605  002340  518C               	movf	(___fttol@f1+2)& (0+255),w,b
  5606  002342  0100               	movlb	0	; () banked
  5607  002344  6F96               	movwf	(___fttol@lval+2)& (0+255),b
  5608  002346  0100               	movlb	0	; () banked
  5609  002348  6B97               	clrf	(___fttol@lval+3)& (0+255),b
  5610                           
  5611                           ; BSR set to: 0
  5612  00234A  0E8E               	movlw	142
  5613  00234C  0100               	movlb	0	; () banked
  5614  00234E  5F98               	subwf	___fttol@exp1& (0+255),f,b
  5615                           
  5616                           ; BSR set to: 0
  5617  002350  0100               	movlb	0	; () banked
  5618  002352  AF98               	btfss	___fttol@exp1& (0+255),7,b
  5619  002354  D01A               	goto	l2012
  5620                           
  5621                           ; BSR set to: 0
  5622  002356  0100               	movlb	0	; () banked
  5623  002358  5198               	movf	___fttol@exp1& (0+255),w,b
  5624  00235A  0A80               	xorlw	128
  5625  00235C  0F8F               	addlw	143
  5626  00235E  B0D8               	btfsc	status,0,c
  5627  002360  D00A               	goto	l2013
  5628                           
  5629                           ; BSR set to: 0
  5630  002362  0E00               	movlw	0
  5631  002364  0100               	movlb	0	; () banked
  5632  002366  6F8A               	movwf	?___fttol& (0+255),b
  5633  002368  0E00               	movlw	0
  5634  00236A  6F8B               	movwf	(?___fttol+1)& (0+255),b
  5635  00236C  0E00               	movlw	0
  5636  00236E  6F8C               	movwf	(?___fttol+2)& (0+255),b
  5637  002370  0E00               	movlw	0
  5638  002372  6F8D               	movwf	(?___fttol+3)& (0+255),b
  5639                           
  5640                           ; BSR set to: 0
  5641  002374  0012               	return	
  5642  002376                     l2013:
  5643                           
  5644                           ; BSR set to: 0
  5645                           
  5646                           ; BSR set to: 0
  5647                           
  5648                           ; BSR set to: 0
  5649  002376  0100               	movlb	0	; () banked
  5650  002378  90D8               	bcf	status,0,c
  5651  00237A  3397               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5652  00237C  3396               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5653  00237E  3395               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5654  002380  3394               	rrcf	___fttol@lval& (0+255),f,b
  5655                           
  5656                           ; BSR set to: 0
  5657  002382  0100               	movlb	0	; () banked
  5658  002384  3F98               	incfsz	___fttol@exp1& (0+255),f,b
  5659  002386  D7F7               	goto	l2013
  5660                           
  5661                           ; BSR set to: 0
  5662  002388  D01B               	goto	u4520
  5663  00238A                     l2012:
  5664                           
  5665                           ; BSR set to: 0
  5666                           
  5667                           ; BSR set to: 0
  5668  00238A  0E17               	movlw	23
  5669  00238C  0100               	movlb	0	; () banked
  5670  00238E  6598               	cpfsgt	___fttol@exp1& (0+255),b
  5671  002390  D012               	goto	l2018
  5672                           
  5673                           ; BSR set to: 0
  5674  002392  0E00               	movlw	0
  5675  002394  0100               	movlb	0	; () banked
  5676  002396  6F8A               	movwf	?___fttol& (0+255),b
  5677  002398  0E00               	movlw	0
  5678  00239A  6F8B               	movwf	(?___fttol+1)& (0+255),b
  5679  00239C  0E00               	movlw	0
  5680  00239E  6F8C               	movwf	(?___fttol+2)& (0+255),b
  5681  0023A0  0E00               	movlw	0
  5682  0023A2  6F8D               	movwf	(?___fttol+3)& (0+255),b
  5683                           
  5684                           ; BSR set to: 0
  5685  0023A4  0012               	return	
  5686  0023A6                     
  5687                           ; BSR set to: 0
  5688                           
  5689                           ; BSR set to: 0
  5690  0023A6  0100               	movlb	0	; () banked
  5691  0023A8  90D8               	bcf	status,0,c
  5692  0023AA  3794               	rlcf	___fttol@lval& (0+255),f,b
  5693  0023AC  3795               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5694  0023AE  3796               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5695  0023B0  3797               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5696  0023B2  0100               	movlb	0	; () banked
  5697  0023B4  0798               	decf	___fttol@exp1& (0+255),f,b
  5698  0023B6                     l2018:
  5699                           
  5700                           ; BSR set to: 0
  5701                           
  5702                           ; BSR set to: 0
  5703  0023B6  0100               	movlb	0	; () banked
  5704  0023B8  5198               	movf	___fttol@exp1& (0+255),w,b
  5705  0023BA  0100               	movlb	0	; () banked
  5706  0023BC  A4D8               	btfss	status,2,c
  5707  0023BE  D7F3               	goto	l2019
  5708  0023C0                     u4520:
  5709                           
  5710                           ; BSR set to: 0
  5711                           
  5712                           ; BSR set to: 0
  5713                           
  5714                           ; BSR set to: 0
  5715  0023C0  0100               	movlb	0	; () banked
  5716  0023C2  5193               	movf	___fttol@sign1& (0+255),w,b
  5717  0023C4  0100               	movlb	0	; () banked
  5718  0023C6  B4D8               	btfsc	status,2,c
  5719  0023C8  D009               	goto	l2021
  5720                           
  5721                           ; BSR set to: 0
  5722  0023CA  0100               	movlb	0	; () banked
  5723  0023CC  1F97               	comf	(___fttol@lval+3)& (0+255),f,b
  5724  0023CE  1F96               	comf	(___fttol@lval+2)& (0+255),f,b
  5725  0023D0  1F95               	comf	(___fttol@lval+1)& (0+255),f,b
  5726  0023D2  6D94               	negf	___fttol@lval& (0+255),b
  5727  0023D4  0E00               	movlw	0
  5728  0023D6  2395               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5729  0023D8  2396               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5730  0023DA  2397               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5731  0023DC                     l2021:
  5732                           
  5733                           ; BSR set to: 0
  5734                           
  5735                           ; BSR set to: 0
  5736  0023DC  C094  F08A         	movff	___fttol@lval,?___fttol
  5737  0023E0  C095  F08B         	movff	___fttol@lval+1,?___fttol+1
  5738  0023E4  C096  F08C         	movff	___fttol@lval+2,?___fttol+2
  5739  0023E8  C097  F08D         	movff	___fttol@lval+3,?___fttol+3
  5740  0023EC  0012               	return	
  5741  0023EE                     __end_of___fttol:
  5742                           	opt stack 0
  5743                           tblptru	equ	0xFF8
  5744                           tblptrh	equ	0xFF7
  5745                           tblptrl	equ	0xFF6
  5746                           tablat	equ	0xFF5
  5747                           prodh	equ	0xFF4
  5748                           prodl	equ	0xFF3
  5749                           intcon	equ	0xFF2
  5750                           postinc0	equ	0xFEE
  5751                           wreg	equ	0xFE8
  5752                           indf2	equ	0xFDF
  5753                           postinc2	equ	0xFDE
  5754                           postdec2	equ	0xFDD
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function ___ftsub *****************
  5760 ;; Defined at:
  5761 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftsub.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  f1              3   57[BANK0 ] float 
  5764 ;;  f2              3   60[BANK0 ] float 
  5765 ;; Auto vars:     Size  Location     Type
  5766 ;;		None
  5767 ;; Return value:  Size  Location     Type
  5768 ;;                  3   57[BANK0 ] float 
  5769 ;; Registers used:
  5770 ;;		wreg, status,2, status,0, cstack
  5771 ;; Tracked objects:
  5772 ;;		On entry : 0/0
  5773 ;;		On exit  : 0/0
  5774 ;;		Unchanged: 0/0
  5775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5776 ;;      Params:         0       6       0       0       0       0       0       0       0
  5777 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5778 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5779 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5780 ;;Total ram usage:        6 bytes
  5781 ;; Hardware stack levels used:    1
  5782 ;; Hardware stack levels required when called:    6
  5783 ;; This function calls:
  5784 ;;		___ftadd
  5785 ;; This function is called by:
  5786 ;;		_sprintf
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text15
  5791  002B4C                     __ptext15:
  5792                           	opt stack 0
  5793  002B4C                     ___ftsub:
  5794                           	opt stack 23
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;incstack = 0
  5798  002B4C  0100               	movlb	0	; () banked
  5799  002B4E  519C               	movf	___ftsub@f2& (0+255),w,b
  5800  002B50  0100               	movlb	0	; () banked
  5801  002B52  119D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  5802  002B54  0100               	movlb	0	; () banked
  5803  002B56  119E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  5804  002B58  B4D8               	btfsc	status,2,c
  5805  002B5A  D009               	goto	l2006
  5806                           
  5807                           ; BSR set to: 0
  5808  002B5C  0E00               	movlw	0
  5809  002B5E  0100               	movlb	0	; () banked
  5810  002B60  1B9C               	xorwf	___ftsub@f2& (0+255),f,b
  5811  002B62  0E00               	movlw	0
  5812  002B64  0100               	movlb	0	; () banked
  5813  002B66  1B9D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  5814  002B68  0E80               	movlw	128
  5815  002B6A  0100               	movlb	0	; () banked
  5816  002B6C  1B9E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  5817  002B6E                     l2006:
  5818                           
  5819                           ; BSR set to: 0
  5820                           
  5821                           ; BSR set to: 0
  5822  002B6E  C099  F08D         	movff	___ftsub@f1,___ftadd@f1
  5823  002B72  C09A  F08E         	movff	___ftsub@f1+1,___ftadd@f1+1
  5824  002B76  C09B  F08F         	movff	___ftsub@f1+2,___ftadd@f1+2
  5825  002B7A  C09C  F090         	movff	___ftsub@f2,___ftadd@f2
  5826  002B7E  C09D  F091         	movff	___ftsub@f2+1,___ftadd@f2+1
  5827  002B82  C09E  F092         	movff	___ftsub@f2+2,___ftadd@f2+2
  5828  002B86  EC19  F00C         	call	___ftadd	;wreg free
  5829  002B8A  C08D  F099         	movff	?___ftadd,?___ftsub
  5830  002B8E  C08E  F09A         	movff	?___ftadd+1,?___ftsub+1
  5831  002B92  C08F  F09B         	movff	?___ftadd+2,?___ftsub+2
  5832  002B96  0012               	return	
  5833  002B98                     __end_of___ftsub:
  5834                           	opt stack 0
  5835                           tblptru	equ	0xFF8
  5836                           tblptrh	equ	0xFF7
  5837                           tblptrl	equ	0xFF6
  5838                           tablat	equ	0xFF5
  5839                           prodh	equ	0xFF4
  5840                           prodl	equ	0xFF3
  5841                           intcon	equ	0xFF2
  5842                           postinc0	equ	0xFEE
  5843                           wreg	equ	0xFE8
  5844                           indf2	equ	0xFDF
  5845                           postinc2	equ	0xFDE
  5846                           postdec2	equ	0xFDD
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function ___ftadd *****************
  5852 ;; Defined at:
  5853 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftadd.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  f1              3   45[BANK0 ] float 
  5856 ;;  f2              3   48[BANK0 ] float 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  exp1            1   56[BANK0 ] unsigned char 
  5859 ;;  exp2            1   55[BANK0 ] unsigned char 
  5860 ;;  sign            1   54[BANK0 ] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  3   45[BANK0 ] float 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5870 ;;      Params:         0       6       0       0       0       0       0       0       0
  5871 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5872 ;;      Temps:          0       3       0       0       0       0       0       0       0
  5873 ;;      Totals:         0      12       0       0       0       0       0       0       0
  5874 ;;Total ram usage:       12 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    5
  5877 ;; This function calls:
  5878 ;;		___ftpack
  5879 ;; This function is called by:
  5880 ;;		_sprintf
  5881 ;;		___ftsub
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           	psect	text16
  5886  001832                     __ptext16:
  5887                           	opt stack 0
  5888  001832                     ___ftadd:
  5889                           	opt stack 23
  5890                           
  5891                           ;incstack = 0
  5892  001832  C08F  F093         	movff	___ftadd@f1+2,??___ftadd
  5893  001836  0100               	movlb	0	; () banked
  5894  001838  6B94               	clrf	(??___ftadd+1)& (0+255),b
  5895  00183A  6B95               	clrf	(??___ftadd+2)& (0+255),b
  5896  00183C  0100               	movlb	0	; () banked
  5897  00183E  358E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  5898  001840  0100               	movlb	0	; () banked
  5899  001842  3793               	rlcf	??___ftadd& (0+255),f,b
  5900  001844  E301               	bnc	u5821
  5901  001846  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  5902  001848                     u5821:
  5903  001848  0100               	movlb	0	; () banked
  5904  00184A  5193               	movf	??___ftadd& (0+255),w,b
  5905  00184C  0100               	movlb	0	; () banked
  5906  00184E  6F98               	movwf	___ftadd@exp1& (0+255),b
  5907  001850  C092  F093         	movff	___ftadd@f2+2,??___ftadd
  5908  001854  0100               	movlb	0	; () banked
  5909  001856  6B94               	clrf	(??___ftadd+1)& (0+255),b
  5910  001858  6B95               	clrf	(??___ftadd+2)& (0+255),b
  5911  00185A  0100               	movlb	0	; () banked
  5912  00185C  3591               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  5913  00185E  0100               	movlb	0	; () banked
  5914  001860  3793               	rlcf	??___ftadd& (0+255),f,b
  5915  001862  E301               	bnc	u5831
  5916  001864  8194               	bsf	(??___ftadd+1)& (0+255),0,b
  5917  001866                     u5831:
  5918  001866  0100               	movlb	0	; () banked
  5919  001868  5193               	movf	??___ftadd& (0+255),w,b
  5920  00186A  0100               	movlb	0	; () banked
  5921  00186C  6F97               	movwf	___ftadd@exp2& (0+255),b
  5922                           
  5923                           ; BSR set to: 0
  5924  00186E  0100               	movlb	0	; () banked
  5925  001870  5198               	movf	___ftadd@exp1& (0+255),w,b
  5926  001872  0100               	movlb	0	; () banked
  5927  001874  B4D8               	btfsc	status,2,c
  5928  001876  D011               	goto	u5860
  5929                           
  5930                           ; BSR set to: 0
  5931  001878  0100               	movlb	0	; () banked
  5932  00187A  5197               	movf	___ftadd@exp2& (0+255),w,b
  5933  00187C  0100               	movlb	0	; () banked
  5934  00187E  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  5935  001880  B0D8               	btfsc	status,0,c
  5936  001882  D012               	goto	l1924
  5937                           
  5938                           ; BSR set to: 0
  5939  001884  0100               	movlb	0	; () banked
  5940  001886  5198               	movf	___ftadd@exp1& (0+255),w,b
  5941  001888  0800               	sublw	0
  5942  00188A  0100               	movlb	0	; () banked
  5943  00188C  2597               	addwf	___ftadd@exp2& (0+255),w,b
  5944  00188E  0100               	movlb	0	; () banked
  5945  001890  6F93               	movwf	??___ftadd& (0+255),b
  5946  001892  0E18               	movlw	24
  5947  001894  0100               	movlb	0	; () banked
  5948  001896  6593               	cpfsgt	??___ftadd& (0+255),b
  5949  001898  D007               	goto	l1924
  5950  00189A                     u5860:
  5951                           
  5952                           ; BSR set to: 0
  5953  00189A  C090  F08D         	movff	___ftadd@f2,?___ftadd
  5954  00189E  C091  F08E         	movff	___ftadd@f2+1,?___ftadd+1
  5955  0018A2  C092  F08F         	movff	___ftadd@f2+2,?___ftadd+2
  5956  0018A6  0012               	return	
  5957  0018A8                     l1924:
  5958                           
  5959                           ; BSR set to: 0
  5960                           
  5961                           ; BSR set to: 0
  5962  0018A8  0100               	movlb	0	; () banked
  5963  0018AA  5197               	movf	___ftadd@exp2& (0+255),w,b
  5964  0018AC  0100               	movlb	0	; () banked
  5965  0018AE  B4D8               	btfsc	status,2,c
  5966  0018B0  D011               	goto	u5890
  5967                           
  5968                           ; BSR set to: 0
  5969  0018B2  0100               	movlb	0	; () banked
  5970  0018B4  5198               	movf	___ftadd@exp1& (0+255),w,b
  5971  0018B6  0100               	movlb	0	; () banked
  5972  0018B8  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  5973  0018BA  B0D8               	btfsc	status,0,c
  5974  0018BC  D012               	goto	l1928
  5975                           
  5976                           ; BSR set to: 0
  5977  0018BE  0100               	movlb	0	; () banked
  5978  0018C0  5197               	movf	___ftadd@exp2& (0+255),w,b
  5979  0018C2  0800               	sublw	0
  5980  0018C4  0100               	movlb	0	; () banked
  5981  0018C6  2598               	addwf	___ftadd@exp1& (0+255),w,b
  5982  0018C8  0100               	movlb	0	; () banked
  5983  0018CA  6F93               	movwf	??___ftadd& (0+255),b
  5984  0018CC  0E18               	movlw	24
  5985  0018CE  0100               	movlb	0	; () banked
  5986  0018D0  6593               	cpfsgt	??___ftadd& (0+255),b
  5987  0018D2  D007               	goto	l1928
  5988  0018D4                     u5890:
  5989                           
  5990                           ; BSR set to: 0
  5991  0018D4  C08D  F08D         	movff	___ftadd@f1,?___ftadd
  5992  0018D8  C08E  F08E         	movff	___ftadd@f1+1,?___ftadd+1
  5993  0018DC  C08F  F08F         	movff	___ftadd@f1+2,?___ftadd+2
  5994  0018E0  0012               	return	
  5995  0018E2                     l1928:
  5996                           
  5997                           ; BSR set to: 0
  5998                           
  5999                           ; BSR set to: 0
  6000  0018E2  0E06               	movlw	6
  6001  0018E4  0100               	movlb	0	; () banked
  6002  0018E6  6F96               	movwf	___ftadd@sign& (0+255),b
  6003                           
  6004                           ; BSR set to: 0
  6005  0018E8  0100               	movlb	0	; () banked
  6006  0018EA  AF8F               	btfss	(___ftadd@f1+2)& (0+255),7,b
  6007  0018EC  D002               	goto	l1931
  6008                           
  6009                           ; BSR set to: 0
  6010  0018EE  0100               	movlb	0	; () banked
  6011  0018F0  8F96               	bsf	___ftadd@sign& (0+255),7,b
  6012  0018F2                     l1931:
  6013                           
  6014                           ; BSR set to: 0
  6015                           
  6016                           ; BSR set to: 0
  6017  0018F2  0100               	movlb	0	; () banked
  6018  0018F4  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6019  0018F6  D002               	goto	l1932
  6020                           
  6021                           ; BSR set to: 0
  6022  0018F8  0100               	movlb	0	; () banked
  6023  0018FA  8D96               	bsf	___ftadd@sign& (0+255),6,b
  6024  0018FC                     l1932:
  6025                           
  6026                           ; BSR set to: 0
  6027  0018FC  0100               	movlb	0	; () banked
  6028  0018FE  8F8E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  6029                           
  6030                           ; BSR set to: 0
  6031  001900  0EFF               	movlw	255
  6032  001902  0100               	movlb	0	; () banked
  6033  001904  178D               	andwf	___ftadd@f1& (0+255),f,b
  6034  001906  0EFF               	movlw	255
  6035  001908  0100               	movlb	0	; () banked
  6036  00190A  178E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  6037  00190C  0E00               	movlw	0
  6038  00190E  0100               	movlb	0	; () banked
  6039  001910  178F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  6040  001912  0100               	movlb	0	; () banked
  6041  001914  8F91               	bsf	(___ftadd@f2+1)& (0+255),7,b
  6042                           
  6043                           ; BSR set to: 0
  6044  001916  0EFF               	movlw	255
  6045  001918  0100               	movlb	0	; () banked
  6046  00191A  1790               	andwf	___ftadd@f2& (0+255),f,b
  6047  00191C  0EFF               	movlw	255
  6048  00191E  0100               	movlb	0	; () banked
  6049  001920  1791               	andwf	(___ftadd@f2+1)& (0+255),f,b
  6050  001922  0E00               	movlw	0
  6051  001924  0100               	movlb	0	; () banked
  6052  001926  1792               	andwf	(___ftadd@f2+2)& (0+255),f,b
  6053                           
  6054                           ; BSR set to: 0
  6055  001928  0100               	movlb	0	; () banked
  6056  00192A  5197               	movf	___ftadd@exp2& (0+255),w,b
  6057  00192C  0100               	movlb	0	; () banked
  6058  00192E  5D98               	subwf	___ftadd@exp1& (0+255),w,b
  6059  001930  B0D8               	btfsc	status,0,c
  6060  001932  D025               	goto	l1933
  6061  001934                     u5920:
  6062                           
  6063                           ; BSR set to: 0
  6064                           
  6065                           ; BSR set to: 0
  6066  001934  0100               	movlb	0	; () banked
  6067  001936  90D8               	bcf	status,0,c
  6068  001938  3790               	rlcf	___ftadd@f2& (0+255),f,b
  6069  00193A  3791               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  6070  00193C  3792               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  6071  00193E  0100               	movlb	0	; () banked
  6072  001940  0797               	decf	___ftadd@exp2& (0+255),f,b
  6073                           
  6074                           ; BSR set to: 0
  6075  001942  0100               	movlb	0	; () banked
  6076  001944  5198               	movf	___ftadd@exp1& (0+255),w,b
  6077  001946  0100               	movlb	0	; () banked
  6078  001948  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  6079  00194A  B4D8               	btfsc	status,2,c
  6080  00194C  D011               	goto	l1938
  6081                           
  6082                           ; BSR set to: 0
  6083  00194E  0100               	movlb	0	; () banked
  6084  001950  0796               	decf	___ftadd@sign& (0+255),f,b
  6085  001952  C096  F093         	movff	___ftadd@sign,??___ftadd
  6086  001956  0E07               	movlw	7
  6087  001958  0100               	movlb	0	; () banked
  6088  00195A  1793               	andwf	??___ftadd& (0+255),f,b
  6089  00195C  B4D8               	btfsc	status,2,c
  6090  00195E  D008               	goto	l1938
  6091  001960  D7E9               	goto	u5920
  6092  001962                     
  6093                           ; BSR set to: 0
  6094                           
  6095                           ; BSR set to: 0
  6096  001962  0100               	movlb	0	; () banked
  6097  001964  90D8               	bcf	status,0,c
  6098  001966  338F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  6099  001968  338E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  6100  00196A  338D               	rrcf	___ftadd@f1& (0+255),f,b
  6101  00196C  0100               	movlb	0	; () banked
  6102  00196E  2B98               	incf	___ftadd@exp1& (0+255),f,b
  6103  001970                     l1938:
  6104                           
  6105                           ; BSR set to: 0
  6106                           
  6107                           ; BSR set to: 0
  6108  001970  0100               	movlb	0	; () banked
  6109  001972  5197               	movf	___ftadd@exp2& (0+255),w,b
  6110  001974  0100               	movlb	0	; () banked
  6111  001976  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  6112  001978  B4D8               	btfsc	status,2,c
  6113  00197A  D02B               	goto	u5990
  6114  00197C  D7F2               	goto	l1939
  6115  00197E                     l1933:
  6116                           
  6117                           ; BSR set to: 0
  6118                           
  6119                           ; BSR set to: 0
  6120  00197E  0100               	movlb	0	; () banked
  6121  001980  5198               	movf	___ftadd@exp1& (0+255),w,b
  6122  001982  0100               	movlb	0	; () banked
  6123  001984  5D97               	subwf	___ftadd@exp2& (0+255),w,b
  6124  001986  B0D8               	btfsc	status,0,c
  6125  001988  D024               	goto	u5990
  6126  00198A                     u5960:
  6127                           
  6128                           ; BSR set to: 0
  6129                           
  6130                           ; BSR set to: 0
  6131  00198A  0100               	movlb	0	; () banked
  6132  00198C  90D8               	bcf	status,0,c
  6133  00198E  378D               	rlcf	___ftadd@f1& (0+255),f,b
  6134  001990  378E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  6135  001992  378F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  6136  001994  0100               	movlb	0	; () banked
  6137  001996  0798               	decf	___ftadd@exp1& (0+255),f,b
  6138                           
  6139                           ; BSR set to: 0
  6140  001998  0100               	movlb	0	; () banked
  6141  00199A  5198               	movf	___ftadd@exp1& (0+255),w,b
  6142  00199C  0100               	movlb	0	; () banked
  6143  00199E  1997               	xorwf	___ftadd@exp2& (0+255),w,b
  6144  0019A0  B4D8               	btfsc	status,2,c
  6145  0019A2  D011               	goto	l1947
  6146                           
  6147                           ; BSR set to: 0
  6148  0019A4  0100               	movlb	0	; () banked
  6149  0019A6  0796               	decf	___ftadd@sign& (0+255),f,b
  6150  0019A8  C096  F093         	movff	___ftadd@sign,??___ftadd
  6151  0019AC  0E07               	movlw	7
  6152  0019AE  0100               	movlb	0	; () banked
  6153  0019B0  1793               	andwf	??___ftadd& (0+255),f,b
  6154  0019B2  B4D8               	btfsc	status,2,c
  6155  0019B4  D008               	goto	l1947
  6156  0019B6  D7E9               	goto	u5960
  6157  0019B8                     
  6158                           ; BSR set to: 0
  6159                           
  6160                           ; BSR set to: 0
  6161  0019B8  0100               	movlb	0	; () banked
  6162  0019BA  90D8               	bcf	status,0,c
  6163  0019BC  3392               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  6164  0019BE  3391               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  6165  0019C0  3390               	rrcf	___ftadd@f2& (0+255),f,b
  6166  0019C2  0100               	movlb	0	; () banked
  6167  0019C4  2B97               	incf	___ftadd@exp2& (0+255),f,b
  6168  0019C6                     l1947:
  6169                           
  6170                           ; BSR set to: 0
  6171                           
  6172                           ; BSR set to: 0
  6173  0019C6  0100               	movlb	0	; () banked
  6174  0019C8  5197               	movf	___ftadd@exp2& (0+255),w,b
  6175  0019CA  0100               	movlb	0	; () banked
  6176  0019CC  1998               	xorwf	___ftadd@exp1& (0+255),w,b
  6177  0019CE  A4D8               	btfss	status,2,c
  6178  0019D0  D7F3               	goto	l1948
  6179  0019D2                     u5990:
  6180                           
  6181                           ; BSR set to: 0
  6182                           
  6183                           ; BSR set to: 0
  6184                           
  6185                           ; BSR set to: 0
  6186  0019D2  0100               	movlb	0	; () banked
  6187  0019D4  AF96               	btfss	___ftadd@sign& (0+255),7,b
  6188  0019D6  D012               	goto	l1950
  6189                           
  6190                           ; BSR set to: 0
  6191  0019D8  0EFF               	movlw	255
  6192  0019DA  0100               	movlb	0	; () banked
  6193  0019DC  1B8D               	xorwf	___ftadd@f1& (0+255),f,b
  6194  0019DE  0EFF               	movlw	255
  6195  0019E0  0100               	movlb	0	; () banked
  6196  0019E2  1B8E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  6197  0019E4  0EFF               	movlw	255
  6198  0019E6  0100               	movlb	0	; () banked
  6199  0019E8  1B8F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  6200  0019EA  0E01               	movlw	1
  6201  0019EC  0100               	movlb	0	; () banked
  6202  0019EE  278D               	addwf	___ftadd@f1& (0+255),f,b
  6203  0019F0  0E00               	movlw	0
  6204  0019F2  0100               	movlb	0	; () banked
  6205  0019F4  238E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  6206  0019F6  0E00               	movlw	0
  6207  0019F8  0100               	movlb	0	; () banked
  6208  0019FA  238F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  6209  0019FC                     l1950:
  6210                           
  6211                           ; BSR set to: 0
  6212  0019FC  0100               	movlb	0	; () banked
  6213  0019FE  AD96               	btfss	___ftadd@sign& (0+255),6,b
  6214  001A00  D012               	goto	l1951
  6215                           
  6216                           ; BSR set to: 0
  6217  001A02  0EFF               	movlw	255
  6218  001A04  0100               	movlb	0	; () banked
  6219  001A06  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  6220  001A08  0EFF               	movlw	255
  6221  001A0A  0100               	movlb	0	; () banked
  6222  001A0C  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6223  001A0E  0EFF               	movlw	255
  6224  001A10  0100               	movlb	0	; () banked
  6225  001A12  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6226  001A14  0E01               	movlw	1
  6227  001A16  0100               	movlb	0	; () banked
  6228  001A18  2790               	addwf	___ftadd@f2& (0+255),f,b
  6229  001A1A  0E00               	movlw	0
  6230  001A1C  0100               	movlb	0	; () banked
  6231  001A1E  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6232  001A20  0E00               	movlw	0
  6233  001A22  0100               	movlb	0	; () banked
  6234  001A24  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6235  001A26                     l1951:
  6236                           
  6237                           ; BSR set to: 0
  6238                           
  6239                           ; BSR set to: 0
  6240  001A26  0E00               	movlw	0
  6241  001A28  0100               	movlb	0	; () banked
  6242  001A2A  6F96               	movwf	___ftadd@sign& (0+255),b
  6243                           
  6244                           ; BSR set to: 0
  6245  001A2C  0100               	movlb	0	; () banked
  6246  001A2E  518D               	movf	___ftadd@f1& (0+255),w,b
  6247  001A30  0100               	movlb	0	; () banked
  6248  001A32  2790               	addwf	___ftadd@f2& (0+255),f,b
  6249  001A34  0100               	movlb	0	; () banked
  6250  001A36  518E               	movf	(___ftadd@f1+1)& (0+255),w,b
  6251  001A38  0100               	movlb	0	; () banked
  6252  001A3A  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6253  001A3C  0100               	movlb	0	; () banked
  6254  001A3E  518F               	movf	(___ftadd@f1+2)& (0+255),w,b
  6255  001A40  0100               	movlb	0	; () banked
  6256  001A42  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6257                           
  6258                           ; BSR set to: 0
  6259  001A44  0100               	movlb	0	; () banked
  6260  001A46  AF92               	btfss	(___ftadd@f2+2)& (0+255),7,b
  6261  001A48  D015               	goto	l1952
  6262                           
  6263                           ; BSR set to: 0
  6264  001A4A  0EFF               	movlw	255
  6265  001A4C  0100               	movlb	0	; () banked
  6266  001A4E  1B90               	xorwf	___ftadd@f2& (0+255),f,b
  6267  001A50  0EFF               	movlw	255
  6268  001A52  0100               	movlb	0	; () banked
  6269  001A54  1B91               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  6270  001A56  0EFF               	movlw	255
  6271  001A58  0100               	movlb	0	; () banked
  6272  001A5A  1B92               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  6273  001A5C  0E01               	movlw	1
  6274  001A5E  0100               	movlb	0	; () banked
  6275  001A60  2790               	addwf	___ftadd@f2& (0+255),f,b
  6276  001A62  0E00               	movlw	0
  6277  001A64  0100               	movlb	0	; () banked
  6278  001A66  2391               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  6279  001A68  0E00               	movlw	0
  6280  001A6A  0100               	movlb	0	; () banked
  6281  001A6C  2392               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  6282                           
  6283                           ; BSR set to: 0
  6284  001A6E  0E01               	movlw	1
  6285  001A70  0100               	movlb	0	; () banked
  6286  001A72  6F96               	movwf	___ftadd@sign& (0+255),b
  6287  001A74                     l1952:
  6288                           
  6289                           ; BSR set to: 0
  6290                           
  6291                           ; BSR set to: 0
  6292  001A74  C090  F060         	movff	___ftadd@f2,___ftpack@arg
  6293  001A78  C091  F061         	movff	___ftadd@f2+1,___ftpack@arg+1
  6294  001A7C  C092  F062         	movff	___ftadd@f2+2,___ftpack@arg+2
  6295  001A80  C098  F063         	movff	___ftadd@exp1,___ftpack@exp
  6296  001A84  C096  F064         	movff	___ftadd@sign,___ftpack@sign
  6297  001A88  ECF7  F011         	call	___ftpack	;wreg free
  6298  001A8C  C060  F08D         	movff	?___ftpack,?___ftadd
  6299  001A90  C061  F08E         	movff	?___ftpack+1,?___ftadd+1
  6300  001A94  C062  F08F         	movff	?___ftpack+2,?___ftadd+2
  6301  001A98  0012               	return	
  6302  001A9A                     __end_of___ftadd:
  6303                           	opt stack 0
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           intcon	equ	0xFF2
  6311                           postinc0	equ	0xFEE
  6312                           wreg	equ	0xFE8
  6313                           indf2	equ	0xFDF
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320 ;; *************** function ___ftpack *****************
  6321 ;; Defined at:
  6322 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  arg             3    0[BANK0 ] unsigned um
  6325 ;;  exp             1    3[BANK0 ] unsigned char 
  6326 ;;  sign            1    4[BANK0 ] unsigned char 
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;		None
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  3    0[BANK0 ] float 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6338 ;;      Params:         0       5       0       0       0       0       0       0       0
  6339 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6340 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6341 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6342 ;;Total ram usage:        8 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    4
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		___ftadd
  6349 ;;		___ftmul
  6350 ;;		___lltoft
  6351 ;; This function uses a non-reentrant model
  6352 ;;
  6353                           
  6354                           	psect	text17
  6355  0023EE                     __ptext17:
  6356                           	opt stack 0
  6357  0023EE                     ___ftpack:
  6358                           	opt stack 23
  6359                           
  6360                           ;incstack = 0
  6361  0023EE  0100               	movlb	0	; () banked
  6362  0023F0  5163               	movf	___ftpack@exp& (0+255),w,b
  6363  0023F2  0100               	movlb	0	; () banked
  6364  0023F4  B4D8               	btfsc	status,2,c
  6365  0023F6  D008               	goto	u5680
  6366                           
  6367                           ; BSR set to: 0
  6368  0023F8  0100               	movlb	0	; () banked
  6369  0023FA  5160               	movf	___ftpack@arg& (0+255),w,b
  6370  0023FC  0100               	movlb	0	; () banked
  6371  0023FE  1161               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  6372  002400  0100               	movlb	0	; () banked
  6373  002402  1162               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  6374  002404  A4D8               	btfss	status,2,c
  6375  002406  D011               	goto	l1893
  6376  002408                     u5680:
  6377                           
  6378                           ; BSR set to: 0
  6379                           
  6380                           ; BSR set to: 0
  6381  002408  0E00               	movlw	0
  6382  00240A  0100               	movlb	0	; () banked
  6383  00240C  6F60               	movwf	?___ftpack& (0+255),b
  6384  00240E  0E00               	movlw	0
  6385  002410  0100               	movlb	0	; () banked
  6386  002412  6F61               	movwf	(?___ftpack+1)& (0+255),b
  6387  002414  0E00               	movlw	0
  6388  002416  0100               	movlb	0	; () banked
  6389  002418  6F62               	movwf	(?___ftpack+2)& (0+255),b
  6390                           
  6391                           ; BSR set to: 0
  6392  00241A  0012               	return	
  6393  00241C                     
  6394                           ; BSR set to: 0
  6395                           
  6396                           ; BSR set to: 0
  6397  00241C  0100               	movlb	0	; () banked
  6398  00241E  2B63               	incf	___ftpack@exp& (0+255),f,b
  6399  002420  0100               	movlb	0	; () banked
  6400  002422  90D8               	bcf	status,0,c
  6401  002424  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6402  002426  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6403  002428  3360               	rrcf	___ftpack@arg& (0+255),f,b
  6404  00242A                     l1893:
  6405                           
  6406                           ; BSR set to: 0
  6407                           
  6408                           ; BSR set to: 0
  6409  00242A  0E00               	movlw	0
  6410  00242C  0100               	movlb	0	; () banked
  6411  00242E  1560               	andwf	___ftpack@arg& (0+255),w,b
  6412  002430  0100               	movlb	0	; () banked
  6413  002432  6F65               	movwf	??___ftpack& (0+255),b
  6414  002434  0E00               	movlw	0
  6415  002436  0100               	movlb	0	; () banked
  6416  002438  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6417  00243A  0100               	movlb	0	; () banked
  6418  00243C  6F66               	movwf	(??___ftpack+1)& (0+255),b
  6419  00243E  0EFE               	movlw	254
  6420  002440  0100               	movlb	0	; () banked
  6421  002442  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6422  002444  0100               	movlb	0	; () banked
  6423  002446  6F67               	movwf	(??___ftpack+2)& (0+255),b
  6424  002448  0100               	movlb	0	; () banked
  6425  00244A  5165               	movf	??___ftpack& (0+255),w,b
  6426  00244C  0100               	movlb	0	; () banked
  6427  00244E  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  6428  002450  0100               	movlb	0	; () banked
  6429  002452  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  6430  002454  B4D8               	btfsc	status,2,c
  6431  002456  D011               	goto	l1896
  6432  002458  D7E1               	goto	l1894
  6433  00245A                     
  6434                           ; BSR set to: 0
  6435                           
  6436                           ; BSR set to: 0
  6437  00245A  0100               	movlb	0	; () banked
  6438  00245C  2B63               	incf	___ftpack@exp& (0+255),f,b
  6439                           
  6440                           ; BSR set to: 0
  6441  00245E  0E01               	movlw	1
  6442  002460  0100               	movlb	0	; () banked
  6443  002462  2760               	addwf	___ftpack@arg& (0+255),f,b
  6444  002464  0E00               	movlw	0
  6445  002466  0100               	movlb	0	; () banked
  6446  002468  2361               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  6447  00246A  0E00               	movlw	0
  6448  00246C  0100               	movlb	0	; () banked
  6449  00246E  2362               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  6450  002470  0100               	movlb	0	; () banked
  6451  002472  90D8               	bcf	status,0,c
  6452  002474  3362               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  6453  002476  3361               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  6454  002478  3360               	rrcf	___ftpack@arg& (0+255),f,b
  6455  00247A                     l1896:
  6456                           
  6457                           ; BSR set to: 0
  6458                           
  6459                           ; BSR set to: 0
  6460  00247A  0E00               	movlw	0
  6461  00247C  0100               	movlb	0	; () banked
  6462  00247E  1560               	andwf	___ftpack@arg& (0+255),w,b
  6463  002480  0100               	movlb	0	; () banked
  6464  002482  6F65               	movwf	??___ftpack& (0+255),b
  6465  002484  0E00               	movlw	0
  6466  002486  0100               	movlb	0	; () banked
  6467  002488  1561               	andwf	(___ftpack@arg+1)& (0+255),w,b
  6468  00248A  0100               	movlb	0	; () banked
  6469  00248C  6F66               	movwf	(??___ftpack+1)& (0+255),b
  6470  00248E  0EFF               	movlw	255
  6471  002490  0100               	movlb	0	; () banked
  6472  002492  1562               	andwf	(___ftpack@arg+2)& (0+255),w,b
  6473  002494  0100               	movlb	0	; () banked
  6474  002496  6F67               	movwf	(??___ftpack+2)& (0+255),b
  6475  002498  0100               	movlb	0	; () banked
  6476  00249A  5165               	movf	??___ftpack& (0+255),w,b
  6477  00249C  0100               	movlb	0	; () banked
  6478  00249E  1166               	iorwf	(??___ftpack+1)& (0+255),w,b
  6479  0024A0  0100               	movlb	0	; () banked
  6480  0024A2  1167               	iorwf	(??___ftpack+2)& (0+255),w,b
  6481  0024A4  B4D8               	btfsc	status,2,c
  6482  0024A6  D008               	goto	l1899
  6483  0024A8  D7D8               	goto	l1897
  6484  0024AA                     
  6485                           ; BSR set to: 0
  6486                           
  6487                           ; BSR set to: 0
  6488  0024AA  0100               	movlb	0	; () banked
  6489  0024AC  0763               	decf	___ftpack@exp& (0+255),f,b
  6490  0024AE  0100               	movlb	0	; () banked
  6491  0024B0  90D8               	bcf	status,0,c
  6492  0024B2  3760               	rlcf	___ftpack@arg& (0+255),f,b
  6493  0024B4  3761               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  6494  0024B6  3762               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  6495  0024B8                     l1899:
  6496                           
  6497                           ; BSR set to: 0
  6498                           
  6499                           ; BSR set to: 0
  6500  0024B8  0100               	movlb	0	; () banked
  6501  0024BA  BF61               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  6502  0024BC  D004               	goto	u5720
  6503                           
  6504                           ; BSR set to: 0
  6505  0024BE  0E02               	movlw	2
  6506  0024C0  0100               	movlb	0	; () banked
  6507  0024C2  6163               	cpfslt	___ftpack@exp& (0+255),b
  6508  0024C4  D7F2               	goto	l1900
  6509  0024C6                     u5720:
  6510                           
  6511                           ; BSR set to: 0
  6512                           
  6513                           ; BSR set to: 0
  6514  0024C6  0100               	movlb	0	; () banked
  6515  0024C8  B163               	btfsc	___ftpack@exp& (0+255),0,b
  6516  0024CA  D002               	goto	l1904
  6517                           
  6518                           ; BSR set to: 0
  6519  0024CC  0100               	movlb	0	; () banked
  6520  0024CE  9F61               	bcf	(___ftpack@arg+1)& (0+255),7,b
  6521  0024D0                     l1904:
  6522                           
  6523                           ; BSR set to: 0
  6524                           
  6525                           ; BSR set to: 0
  6526  0024D0  0100               	movlb	0	; () banked
  6527  0024D2  90D8               	bcf	status,0,c
  6528  0024D4  3363               	rrcf	___ftpack@exp& (0+255),f,b
  6529  0024D6  0100               	movlb	0	; () banked
  6530  0024D8  5163               	movf	___ftpack@exp& (0+255),w,b
  6531  0024DA  0100               	movlb	0	; () banked
  6532  0024DC  1362               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  6533                           
  6534                           ; BSR set to: 0
  6535  0024DE  0100               	movlb	0	; () banked
  6536  0024E0  5164               	movf	___ftpack@sign& (0+255),w,b
  6537  0024E2  0100               	movlb	0	; () banked
  6538  0024E4  B4D8               	btfsc	status,2,c
  6539  0024E6  D002               	goto	l1905
  6540                           
  6541                           ; BSR set to: 0
  6542  0024E8  0100               	movlb	0	; () banked
  6543  0024EA  8F62               	bsf	(___ftpack@arg+2)& (0+255),7,b
  6544  0024EC                     l1905:
  6545                           
  6546                           ; BSR set to: 0
  6547                           
  6548                           ; BSR set to: 0
  6549  0024EC  C060  F060         	movff	___ftpack@arg,?___ftpack
  6550  0024F0  C061  F061         	movff	___ftpack@arg+1,?___ftpack+1
  6551  0024F4  C062  F062         	movff	___ftpack@arg+2,?___ftpack+2
  6552  0024F8  0012               	return	
  6553  0024FA                     __end_of___ftpack:
  6554                           	opt stack 0
  6555                           tblptru	equ	0xFF8
  6556                           tblptrh	equ	0xFF7
  6557                           tblptrl	equ	0xFF6
  6558                           tablat	equ	0xFF5
  6559                           prodh	equ	0xFF4
  6560                           prodl	equ	0xFF3
  6561                           intcon	equ	0xFF2
  6562                           postinc0	equ	0xFEE
  6563                           wreg	equ	0xFE8
  6564                           indf2	equ	0xFDF
  6565                           postinc2	equ	0xFDE
  6566                           postdec2	equ	0xFDD
  6567                           fsr2h	equ	0xFDA
  6568                           fsr2l	equ	0xFD9
  6569                           status	equ	0xFD8
  6570                           
  6571 ;; *************** function ___ftneg *****************
  6572 ;; Defined at:
  6573 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftneg.c"
  6574 ;; Parameters:    Size  Location     Type
  6575 ;;  f1              3    0[BANK0 ] float 
  6576 ;; Auto vars:     Size  Location     Type
  6577 ;;		None
  6578 ;; Return value:  Size  Location     Type
  6579 ;;                  3    0[BANK0 ] float 
  6580 ;; Registers used:
  6581 ;;		wreg, status,2, status,0
  6582 ;; Tracked objects:
  6583 ;;		On entry : 0/0
  6584 ;;		On exit  : 0/0
  6585 ;;		Unchanged: 0/0
  6586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6587 ;;      Params:         0       3       0       0       0       0       0       0       0
  6588 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6590 ;;      Totals:         0       3       0       0       0       0       0       0       0
  6591 ;;Total ram usage:        3 bytes
  6592 ;; Hardware stack levels used:    1
  6593 ;; Hardware stack levels required when called:    4
  6594 ;; This function calls:
  6595 ;;		Nothing
  6596 ;; This function is called by:
  6597 ;;		_sprintf
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text18
  6602  002D68                     __ptext18:
  6603                           	opt stack 0
  6604  002D68                     ___ftneg:
  6605                           	opt stack 25
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;incstack = 0
  6609  002D68  0100               	movlb	0	; () banked
  6610  002D6A  5160               	movf	___ftneg@f1& (0+255),w,b
  6611  002D6C  0100               	movlb	0	; () banked
  6612  002D6E  1161               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  6613  002D70  0100               	movlb	0	; () banked
  6614  002D72  1162               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  6615  002D74  B4D8               	btfsc	status,2,c
  6616  002D76  D009               	goto	l2000
  6617                           
  6618                           ; BSR set to: 0
  6619  002D78  0E00               	movlw	0
  6620  002D7A  0100               	movlb	0	; () banked
  6621  002D7C  1B60               	xorwf	___ftneg@f1& (0+255),f,b
  6622  002D7E  0E00               	movlw	0
  6623  002D80  0100               	movlb	0	; () banked
  6624  002D82  1B61               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  6625  002D84  0E80               	movlw	128
  6626  002D86  0100               	movlb	0	; () banked
  6627  002D88  1B62               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  6628  002D8A                     l2000:
  6629                           
  6630                           ; BSR set to: 0
  6631  002D8A  C060  F060         	movff	___ftneg@f1,?___ftneg
  6632  002D8E  C061  F061         	movff	___ftneg@f1+1,?___ftneg+1
  6633  002D92  C062  F062         	movff	___ftneg@f1+2,?___ftneg+2
  6634                           
  6635                           ; BSR set to: 0
  6636  002D96  0012               	return		;funcret
  6637  002D98                     __end_of___ftneg:
  6638                           	opt stack 0
  6639                           tblptru	equ	0xFF8
  6640                           tblptrh	equ	0xFF7
  6641                           tblptrl	equ	0xFF6
  6642                           tablat	equ	0xFF5
  6643                           prodh	equ	0xFF4
  6644                           prodl	equ	0xFF3
  6645                           intcon	equ	0xFF2
  6646                           postinc0	equ	0xFEE
  6647                           wreg	equ	0xFE8
  6648                           indf2	equ	0xFDF
  6649                           postinc2	equ	0xFDE
  6650                           postdec2	equ	0xFDD
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           
  6655 ;; *************** function ___ftge *****************
  6656 ;; Defined at:
  6657 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftge.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  ff1             3    0[BANK0 ] float 
  6660 ;;  ff2             3    3[BANK0 ] float 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;		None
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, status,2, status,0
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6672 ;;      Params:         0       6       0       0       0       0       0       0       0
  6673 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6674 ;;      Temps:          0       3       0       0       0       0       0       0       0
  6675 ;;      Totals:         0       9       0       0       0       0       0       0       0
  6676 ;;Total ram usage:        9 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    4
  6679 ;; This function calls:
  6680 ;;		Nothing
  6681 ;; This function is called by:
  6682 ;;		_sprintf
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685                           
  6686                           	psect	text19
  6687  0024FA                     __ptext19:
  6688                           	opt stack 0
  6689  0024FA                     ___ftge:
  6690                           	opt stack 25
  6691                           
  6692                           ; BSR set to: 0
  6693                           ;incstack = 0
  6694  0024FA  0100               	movlb	0	; () banked
  6695  0024FC  AF62               	btfss	(___ftge@ff1+2)& (0+255),7,b
  6696  0024FE  D01D               	goto	l1982
  6697                           
  6698                           ; BSR set to: 0
  6699  002500  C060  F066         	movff	___ftge@ff1,??___ftge
  6700  002504  C061  F067         	movff	___ftge@ff1+1,??___ftge+1
  6701  002508  C062  F068         	movff	___ftge@ff1+2,??___ftge+2
  6702  00250C  0100               	movlb	0	; () banked
  6703  00250E  1F66               	comf	??___ftge& (0+255),f,b
  6704  002510  1F67               	comf	(??___ftge+1)& (0+255),f,b
  6705  002512  1F68               	comf	(??___ftge+2)& (0+255),f,b
  6706  002514  2B66               	incf	??___ftge& (0+255),f,b
  6707  002516  0E00               	movlw	0
  6708  002518  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  6709  00251A  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  6710  00251C  0E00               	movlw	0
  6711  00251E  0100               	movlb	0	; () banked
  6712  002520  2566               	addwf	??___ftge& (0+255),w,b
  6713  002522  0100               	movlb	0	; () banked
  6714  002524  6F60               	movwf	___ftge@ff1& (0+255),b
  6715  002526  0E00               	movlw	0
  6716  002528  0100               	movlb	0	; () banked
  6717  00252A  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  6718  00252C  0100               	movlb	0	; () banked
  6719  00252E  6F61               	movwf	(___ftge@ff1+1)& (0+255),b
  6720  002530  0E80               	movlw	128
  6721  002532  0100               	movlb	0	; () banked
  6722  002534  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  6723  002536  0100               	movlb	0	; () banked
  6724  002538  6F62               	movwf	(___ftge@ff1+2)& (0+255),b
  6725  00253A                     l1982:
  6726                           
  6727                           ; BSR set to: 0
  6728                           
  6729                           ; BSR set to: 0
  6730  00253A  0100               	movlb	0	; () banked
  6731  00253C  AF65               	btfss	(___ftge@ff2+2)& (0+255),7,b
  6732  00253E  D01D               	goto	l1983
  6733                           
  6734                           ; BSR set to: 0
  6735  002540  C063  F066         	movff	___ftge@ff2,??___ftge
  6736  002544  C064  F067         	movff	___ftge@ff2+1,??___ftge+1
  6737  002548  C065  F068         	movff	___ftge@ff2+2,??___ftge+2
  6738  00254C  0100               	movlb	0	; () banked
  6739  00254E  1F66               	comf	??___ftge& (0+255),f,b
  6740  002550  1F67               	comf	(??___ftge+1)& (0+255),f,b
  6741  002552  1F68               	comf	(??___ftge+2)& (0+255),f,b
  6742  002554  2B66               	incf	??___ftge& (0+255),f,b
  6743  002556  0E00               	movlw	0
  6744  002558  2367               	addwfc	(??___ftge+1)& (0+255),f,b
  6745  00255A  2368               	addwfc	(??___ftge+2)& (0+255),f,b
  6746  00255C  0E00               	movlw	0
  6747  00255E  0100               	movlb	0	; () banked
  6748  002560  2566               	addwf	??___ftge& (0+255),w,b
  6749  002562  0100               	movlb	0	; () banked
  6750  002564  6F63               	movwf	___ftge@ff2& (0+255),b
  6751  002566  0E00               	movlw	0
  6752  002568  0100               	movlb	0	; () banked
  6753  00256A  2167               	addwfc	(??___ftge+1)& (0+255),w,b
  6754  00256C  0100               	movlb	0	; () banked
  6755  00256E  6F64               	movwf	(___ftge@ff2+1)& (0+255),b
  6756  002570  0E80               	movlw	128
  6757  002572  0100               	movlb	0	; () banked
  6758  002574  2168               	addwfc	(??___ftge+2)& (0+255),w,b
  6759  002576  0100               	movlb	0	; () banked
  6760  002578  6F65               	movwf	(___ftge@ff2+2)& (0+255),b
  6761  00257A                     l1983:
  6762                           
  6763                           ; BSR set to: 0
  6764                           
  6765                           ; BSR set to: 0
  6766  00257A  0E00               	movlw	0
  6767  00257C  0100               	movlb	0	; () banked
  6768  00257E  1B60               	xorwf	___ftge@ff1& (0+255),f,b
  6769  002580  0E00               	movlw	0
  6770  002582  0100               	movlb	0	; () banked
  6771  002584  1B61               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  6772  002586  0E80               	movlw	128
  6773  002588  0100               	movlb	0	; () banked
  6774  00258A  1B62               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  6775                           
  6776                           ; BSR set to: 0
  6777  00258C  0E00               	movlw	0
  6778  00258E  0100               	movlb	0	; () banked
  6779  002590  1B63               	xorwf	___ftge@ff2& (0+255),f,b
  6780  002592  0E00               	movlw	0
  6781  002594  0100               	movlb	0	; () banked
  6782  002596  1B64               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  6783  002598  0E80               	movlw	128
  6784  00259A  0100               	movlb	0	; () banked
  6785  00259C  1B65               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  6786  00259E  0100               	movlb	0	; () banked
  6787  0025A0  5163               	movf	___ftge@ff2& (0+255),w,b
  6788  0025A2  0100               	movlb	0	; () banked
  6789  0025A4  5D60               	subwf	___ftge@ff1& (0+255),w,b
  6790  0025A6  0100               	movlb	0	; () banked
  6791  0025A8  5164               	movf	(___ftge@ff2+1)& (0+255),w,b
  6792  0025AA  0100               	movlb	0	; () banked
  6793  0025AC  5961               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  6794  0025AE  0100               	movlb	0	; () banked
  6795  0025B0  5165               	movf	(___ftge@ff2+2)& (0+255),w,b
  6796  0025B2  0100               	movlb	0	; () banked
  6797  0025B4  5962               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  6798  0025B6  B0D8               	btfsc	status,0,c
  6799  0025B8  D002               	goto	l6102
  6800                           
  6801                           ; BSR set to: 0
  6802  0025BA  90D8               	bcf	status,0,c
  6803  0025BC  0012               	return	
  6804  0025BE                     l6102:
  6805                           
  6806                           ; BSR set to: 0
  6807                           
  6808                           ; BSR set to: 0
  6809  0025BE  80D8               	bsf	status,0,c
  6810                           
  6811                           ; BSR set to: 0
  6812  0025C0  0012               	return	
  6813  0025C2                     __end_of___ftge:
  6814                           	opt stack 0
  6815                           tblptru	equ	0xFF8
  6816                           tblptrh	equ	0xFF7
  6817                           tblptrl	equ	0xFF6
  6818                           tablat	equ	0xFF5
  6819                           prodh	equ	0xFF4
  6820                           prodl	equ	0xFF3
  6821                           intcon	equ	0xFF2
  6822                           postinc0	equ	0xFEE
  6823                           wreg	equ	0xFE8
  6824                           indf2	equ	0xFDF
  6825                           postinc2	equ	0xFDE
  6826                           postdec2	equ	0xFDD
  6827                           fsr2h	equ	0xFDA
  6828                           fsr2l	equ	0xFD9
  6829                           status	equ	0xFD8
  6830                           
  6831 ;; *************** function _putsXLCD *****************
  6832 ;; Defined at:
  6833 ;;		line 16 in file "XLCD/putsxlcd.c"
  6834 ;; Parameters:    Size  Location     Type
  6835 ;;  buffer          2    0[BANK0 ] PTR unsigned char 
  6836 ;;		 -> main@dist(10), 
  6837 ;; Auto vars:     Size  Location     Type
  6838 ;;		None
  6839 ;; Return value:  Size  Location     Type
  6840 ;;                  1    wreg      void 
  6841 ;; Registers used:
  6842 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6843 ;; Tracked objects:
  6844 ;;		On entry : 0/0
  6845 ;;		On exit  : 0/0
  6846 ;;		Unchanged: 0/0
  6847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6848 ;;      Params:         0       2       0       0       0       0       0       0       0
  6849 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6850 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6851 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6852 ;;Total ram usage:        2 bytes
  6853 ;; Hardware stack levels used:    1
  6854 ;; Hardware stack levels required when called:    6
  6855 ;; This function calls:
  6856 ;;		_BusyXLCD
  6857 ;;		_WriteDataXLCD
  6858 ;; This function is called by:
  6859 ;;		_main
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863                           	psect	text20
  6864  002D98                     __ptext20:
  6865                           	opt stack 0
  6866  002D98                     _putsXLCD:
  6867                           	opt stack 24
  6868                           
  6869                           ;putsxlcd.c: 18: while(*buffer)
  6870                           
  6871                           ; BSR set to: 0
  6872                           ;incstack = 0
  6873  002D98  D00F               	goto	l105
  6874  002D9A                     
  6875                           ;putsxlcd.c: 19: {
  6876                           ;putsxlcd.c: 20: while(BusyXLCD());
  6877  002D9A  EC48  F016         	call	_BusyXLCD	;wreg free
  6878  002D9E  0900               	iorlw	0
  6879  002DA0  A4D8               	btfss	status,2,c
  6880  002DA2  D7FB               	goto	l106
  6881                           
  6882                           ;putsxlcd.c: 21: WriteDataXLCD(*buffer);
  6883  002DA4  C060  FFD9         	movff	putsXLCD@buffer,fsr2l
  6884  002DA8  C061  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  6885  002DAC  50DF               	movf	indf2,w,c
  6886  002DAE  ECEC  F015         	call	_WriteDataXLCD
  6887                           
  6888                           ;putsxlcd.c: 22: buffer++;
  6889  002DB2  0100               	movlb	0	; () banked
  6890  002DB4  4B60               	infsnz	putsXLCD@buffer& (0+255),f,b
  6891  002DB6  2B61               	incf	(putsXLCD@buffer+1)& (0+255),f,b
  6892  002DB8                     l105:
  6893                           
  6894                           ; BSR set to: 0
  6895  002DB8  C060  FFD9         	movff	putsXLCD@buffer,fsr2l
  6896  002DBC  C061  FFDA         	movff	putsXLCD@buffer+1,fsr2h
  6897  002DC0  50DF               	movf	indf2,w,c
  6898  002DC2  B4D8               	btfsc	status,2,c
  6899  002DC4  0012               	return	
  6900  002DC6  D7E9               	goto	l106
  6901  002DC8                     __end_of_putsXLCD:
  6902                           	opt stack 0
  6903                           tblptru	equ	0xFF8
  6904                           tblptrh	equ	0xFF7
  6905                           tblptrl	equ	0xFF6
  6906                           tablat	equ	0xFF5
  6907                           prodh	equ	0xFF4
  6908                           prodl	equ	0xFF3
  6909                           intcon	equ	0xFF2
  6910                           postinc0	equ	0xFEE
  6911                           wreg	equ	0xFE8
  6912                           indf2	equ	0xFDF
  6913                           postinc2	equ	0xFDE
  6914                           postdec2	equ	0xFDD
  6915                           fsr2h	equ	0xFDA
  6916                           fsr2l	equ	0xFD9
  6917                           status	equ	0xFD8
  6918                           
  6919 ;; *************** function _putrsXLCD *****************
  6920 ;; Defined at:
  6921 ;;		line 16 in file "XLCD/putrxlcd.c"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  buffer          2    0[BANK0 ] PTR const unsigned char 
  6924 ;;		 -> STR_1(12), 
  6925 ;; Auto vars:     Size  Location     Type
  6926 ;;		None
  6927 ;; Return value:  Size  Location     Type
  6928 ;;                  1    wreg      void 
  6929 ;; Registers used:
  6930 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6931 ;; Tracked objects:
  6932 ;;		On entry : 0/0
  6933 ;;		On exit  : 0/0
  6934 ;;		Unchanged: 0/0
  6935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6936 ;;      Params:         0       2       0       0       0       0       0       0       0
  6937 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6938 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6939 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6940 ;;Total ram usage:        2 bytes
  6941 ;; Hardware stack levels used:    1
  6942 ;; Hardware stack levels required when called:    6
  6943 ;; This function calls:
  6944 ;;		_BusyXLCD
  6945 ;;		_WriteDataXLCD
  6946 ;; This function is called by:
  6947 ;;		_main
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951                           	psect	text21
  6952  002D00                     __ptext21:
  6953                           	opt stack 0
  6954  002D00                     _putrsXLCD:
  6955                           	opt stack 24
  6956                           
  6957                           ;putrxlcd.c: 18: while(*buffer)
  6958                           
  6959                           ;incstack = 0
  6960  002D00  D010               	goto	l92
  6961  002D02                     
  6962                           ;putrxlcd.c: 19: {
  6963                           ;putrxlcd.c: 20: while(BusyXLCD());
  6964  002D02  EC48  F016         	call	_BusyXLCD	;wreg free
  6965  002D06  0900               	iorlw	0
  6966  002D08  A4D8               	btfss	status,2,c
  6967  002D0A  D7FB               	goto	l93
  6968                           
  6969                           ;putrxlcd.c: 21: WriteDataXLCD(*buffer);
  6970  002D0C  C060  FFF6         	movff	putrsXLCD@buffer,tblptrl
  6971  002D10  C061  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  6972  002D14                     	if	0	;tblptru may be non-zero
  6973  002D14                     	endif
  6974  002D14                     	if	0	;tblptru may be non-zero
  6975  002D14                     	endif
  6976  002D14  0008               	tblrd		*
  6977  002D16  50F5               	movf	tablat,w,c
  6978  002D18  ECEC  F015         	call	_WriteDataXLCD
  6979                           
  6980                           ;putrxlcd.c: 22: buffer++;
  6981  002D1C  0100               	movlb	0	; () banked
  6982  002D1E  4B60               	infsnz	putrsXLCD@buffer& (0+255),f,b
  6983  002D20  2B61               	incf	(putrsXLCD@buffer+1)& (0+255),f,b
  6984  002D22                     l92:
  6985                           
  6986                           ; BSR set to: 0
  6987  002D22  C060  FFF6         	movff	putrsXLCD@buffer,tblptrl
  6988  002D26  C061  FFF7         	movff	putrsXLCD@buffer+1,tblptrh
  6989  002D2A                     	if	0	;tblptru may be non-zero
  6990  002D2A                     	endif
  6991  002D2A                     	if	0	;tblptru may be non-zero
  6992  002D2A                     	endif
  6993  002D2A  0008               	tblrd		*
  6994  002D2C  50F5               	movf	tablat,w,c
  6995  002D2E  0900               	iorlw	0
  6996  002D30  B4D8               	btfsc	status,2,c
  6997  002D32  0012               	return	
  6998  002D34  D7E6               	goto	l93
  6999  002D36                     __end_of_putrsXLCD:
  7000                           	opt stack 0
  7001                           tblptru	equ	0xFF8
  7002                           tblptrh	equ	0xFF7
  7003                           tblptrl	equ	0xFF6
  7004                           tablat	equ	0xFF5
  7005                           prodh	equ	0xFF4
  7006                           prodl	equ	0xFF3
  7007                           intcon	equ	0xFF2
  7008                           postinc0	equ	0xFEE
  7009                           wreg	equ	0xFE8
  7010                           indf2	equ	0xFDF
  7011                           postinc2	equ	0xFDE
  7012                           postdec2	equ	0xFDD
  7013                           fsr2h	equ	0xFDA
  7014                           fsr2l	equ	0xFD9
  7015                           status	equ	0xFD8
  7016                           
  7017 ;; *************** function _WriteDataXLCD *****************
  7018 ;; Defined at:
  7019 ;;		line 16 in file "XLCD/writdata.c"
  7020 ;; Parameters:    Size  Location     Type
  7021 ;;  data            1    wreg     unsigned char 
  7022 ;; Auto vars:     Size  Location     Type
  7023 ;;  data            1   31[COMRAM] unsigned char 
  7024 ;; Return value:  Size  Location     Type
  7025 ;;                  1    wreg      void 
  7026 ;; Registers used:
  7027 ;;		wreg, status,2, status,0, cstack
  7028 ;; Tracked objects:
  7029 ;;		On entry : 0/0
  7030 ;;		On exit  : 0/0
  7031 ;;		Unchanged: 0/0
  7032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7033 ;;      Params:         0       0       0       0       0       0       0       0       0
  7034 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7035 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7036 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7037 ;;Total ram usage:        1 bytes
  7038 ;; Hardware stack levels used:    1
  7039 ;; Hardware stack levels required when called:    5
  7040 ;; This function calls:
  7041 ;;		_DelayFor18TCY
  7042 ;; This function is called by:
  7043 ;;		_putrsXLCD
  7044 ;;		_putsXLCD
  7045 ;; This function uses a non-reentrant model
  7046 ;;
  7047                           
  7048                           	psect	text22
  7049  002BD8                     __ptext22:
  7050                           	opt stack 0
  7051  002BD8                     _WriteDataXLCD:
  7052                           	opt stack 24
  7053                           
  7054                           ;incstack = 0
  7055                           ;WriteDataXLCD@data stored from wreg
  7056  002BD8  6E20               	movwf	WriteDataXLCD@data,c
  7057                           
  7058                           ;writdata.c: 35: TRISD &= 0xf0;
  7059  002BDA  0EF0               	movlw	240
  7060  002BDC  1695               	andwf	3989,f,c	;volatile
  7061                           
  7062                           ;writdata.c: 36: PORTD &= 0xf0;
  7063  002BDE  0EF0               	movlw	240
  7064  002BE0  1683               	andwf	3971,f,c	;volatile
  7065                           
  7066                           ;writdata.c: 37: PORTD |= ((data>>4)&0x0f);
  7067  002BE2  3820               	swapf	WriteDataXLCD@data,w,c
  7068  002BE4  0B0F               	andlw	15
  7069  002BE6  0B0F               	andlw	15
  7070  002BE8  1283               	iorwf	3971,f,c	;volatile
  7071                           
  7072                           ;writdata.c: 39: LATDbits.LATD4 = 1;
  7073  002BEA  888C               	bsf	3980,4,c	;volatile
  7074                           
  7075                           ;writdata.c: 40: LATDbits.LATD5 = 0;
  7076  002BEC  9A8C               	bcf	3980,5,c	;volatile
  7077                           
  7078                           ;writdata.c: 41: DelayFor18TCY();
  7079  002BEE  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7080                           
  7081                           ;writdata.c: 42: LATDbits.LATD6 = 1;
  7082  002BF2  8C8C               	bsf	3980,6,c	;volatile
  7083                           
  7084                           ;writdata.c: 43: DelayFor18TCY();
  7085  002BF4  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7086                           
  7087                           ;writdata.c: 44: LATDbits.LATD6 = 0;
  7088  002BF8  9C8C               	bcf	3980,6,c	;volatile
  7089                           
  7090                           ;writdata.c: 49: PORTD &= 0xf0;
  7091  002BFA  0EF0               	movlw	240
  7092  002BFC  1683               	andwf	3971,f,c	;volatile
  7093                           
  7094                           ;writdata.c: 50: PORTD |= (data&0x0f);
  7095  002BFE  5020               	movf	WriteDataXLCD@data,w,c
  7096  002C00  0B0F               	andlw	15
  7097  002C02  1283               	iorwf	3971,f,c	;volatile
  7098                           
  7099                           ;writdata.c: 52: DelayFor18TCY();
  7100  002C04  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7101                           
  7102                           ;writdata.c: 53: LATDbits.LATD6 = 1;
  7103  002C08  8C8C               	bsf	3980,6,c	;volatile
  7104                           
  7105                           ;writdata.c: 54: DelayFor18TCY();
  7106  002C0A  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7107                           
  7108                           ;writdata.c: 55: LATDbits.LATD6 = 0;
  7109  002C0E  9C8C               	bcf	3980,6,c	;volatile
  7110                           
  7111                           ;writdata.c: 59: TRISD |= 0x0f;
  7112  002C10  0E0F               	movlw	15
  7113  002C12  1295               	iorwf	3989,f,c	;volatile
  7114  002C14  0012               	return	
  7115  002C16                     __end_of_WriteDataXLCD:
  7116                           	opt stack 0
  7117                           tblptru	equ	0xFF8
  7118                           tblptrh	equ	0xFF7
  7119                           tblptrl	equ	0xFF6
  7120                           tablat	equ	0xFF5
  7121                           prodh	equ	0xFF4
  7122                           prodl	equ	0xFF3
  7123                           intcon	equ	0xFF2
  7124                           postinc0	equ	0xFEE
  7125                           wreg	equ	0xFE8
  7126                           indf2	equ	0xFDF
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           fsr2h	equ	0xFDA
  7130                           fsr2l	equ	0xFD9
  7131                           status	equ	0xFD8
  7132                           
  7133 ;; *************** function _SYSTEM_Initialize *****************
  7134 ;; Defined at:
  7135 ;;		line 78 in file "mcc.c"
  7136 ;; Parameters:    Size  Location     Type
  7137 ;;		None
  7138 ;; Auto vars:     Size  Location     Type
  7139 ;;		None
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  1    wreg      void 
  7142 ;; Registers used:
  7143 ;;		wreg, status,2, status,0, cstack
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7149 ;;      Params:         0       0       0       0       0       0       0       0       0
  7150 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7151 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7152 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7153 ;;Total ram usage:        0 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:    8
  7156 ;; This function calls:
  7157 ;;		_INTERRUPT_Initialize
  7158 ;;		_OSCILLATOR_Initialize
  7159 ;;		_PIN_MANAGER_Initialize
  7160 ;;		_TMR0_Initialize
  7161 ;;		_XLCD_Initialize
  7162 ;; This function is called by:
  7163 ;;		_main
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           	psect	text23
  7168  002EDA                     __ptext23:
  7169                           	opt stack 0
  7170  002EDA                     _SYSTEM_Initialize:
  7171                           	opt stack 22
  7172                           
  7173                           ;mcc.c: 81: INTERRUPT_Initialize();
  7174                           
  7175                           ;incstack = 0
  7176  002EDA  EC46  F017         	call	_INTERRUPT_Initialize	;wreg free
  7177                           
  7178                           ;mcc.c: 82: PIN_MANAGER_Initialize();
  7179  002EDE  EC78  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7180                           
  7181                           ;mcc.c: 83: OSCILLATOR_Initialize();
  7182  002EE2  EC96  F017         	call	_OSCILLATOR_Initialize	;wreg free
  7183                           
  7184                           ;mcc.c: 84: XLCD_Initialize();
  7185  002EE6  EC2A  F016         	call	_XLCD_Initialize	;wreg free
  7186                           
  7187                           ;mcc.c: 89: TMR0_Initialize();
  7188  002EEA  EC38  F017         	call	_TMR0_Initialize	;wreg free
  7189  002EEE  0012               	return		;funcret
  7190  002EF0                     __end_of_SYSTEM_Initialize:
  7191                           	opt stack 0
  7192                           tblptru	equ	0xFF8
  7193                           tblptrh	equ	0xFF7
  7194                           tblptrl	equ	0xFF6
  7195                           tablat	equ	0xFF5
  7196                           prodh	equ	0xFF4
  7197                           prodl	equ	0xFF3
  7198                           intcon	equ	0xFF2
  7199                           postinc0	equ	0xFEE
  7200                           wreg	equ	0xFE8
  7201                           indf2	equ	0xFDF
  7202                           postinc2	equ	0xFDE
  7203                           postdec2	equ	0xFDD
  7204                           fsr2h	equ	0xFDA
  7205                           fsr2l	equ	0xFD9
  7206                           status	equ	0xFD8
  7207                           
  7208 ;; *************** function _XLCD_Initialize *****************
  7209 ;; Defined at:
  7210 ;;		line 6 in file "user_xlcd.c"
  7211 ;; Parameters:    Size  Location     Type
  7212 ;;		None
  7213 ;; Auto vars:     Size  Location     Type
  7214 ;;		None
  7215 ;; Return value:  Size  Location     Type
  7216 ;;                  1    wreg      void 
  7217 ;; Registers used:
  7218 ;;		wreg, status,2, status,0, cstack
  7219 ;; Tracked objects:
  7220 ;;		On entry : 0/0
  7221 ;;		On exit  : 0/0
  7222 ;;		Unchanged: 0/0
  7223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7224 ;;      Params:         0       0       0       0       0       0       0       0       0
  7225 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7227 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7228 ;;Total ram usage:        0 bytes
  7229 ;; Hardware stack levels used:    1
  7230 ;; Hardware stack levels required when called:    7
  7231 ;; This function calls:
  7232 ;;		_BusyXLCD
  7233 ;;		_OpenXLCD
  7234 ;;		_SetDDRamAddr
  7235 ;;		_WriteCmdXLCD
  7236 ;; This function is called by:
  7237 ;;		_SYSTEM_Initialize
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text24
  7242  002C54                     __ptext24:
  7243                           	opt stack 0
  7244  002C54                     _XLCD_Initialize:
  7245                           	opt stack 22
  7246                           
  7247                           ;user_xlcd.c: 11: TRISDbits.TRISD7 = 0;
  7248                           
  7249                           ;incstack = 0
  7250  002C54  9E95               	bcf	3989,7,c	;volatile
  7251                           
  7252                           ;user_xlcd.c: 12: LATDbits.LATD7 = 1;
  7253  002C56  8E8C               	bsf	3980,7,c	;volatile
  7254                           
  7255                           ;user_xlcd.c: 15: OpenXLCD(0b00101100 & 0b00111000);
  7256  002C58  0E28               	movlw	40
  7257  002C5A  EC4C  F014         	call	_OpenXLCD
  7258  002C5E  EC48  F016         	call	_BusyXLCD	;wreg free
  7259  002C62  0900               	iorlw	0
  7260  002C64  A4D8               	btfss	status,2,c
  7261  002C66  D7FB               	goto	l1011
  7262                           
  7263                           ;user_xlcd.c: 18: WriteCmdXLCD(0b00001111 & 0b00001111 & 0b00001111);
  7264  002C68  0E0F               	movlw	15
  7265  002C6A  EC0B  F016         	call	_WriteCmdXLCD
  7266  002C6E  EC48  F016         	call	_BusyXLCD	;wreg free
  7267  002C72  0900               	iorlw	0
  7268  002C74  A4D8               	btfss	status,2,c
  7269  002C76  D7FB               	goto	l1014
  7270                           
  7271                           ;user_xlcd.c: 21: WriteCmdXLCD(0b00000110);
  7272  002C78  0E06               	movlw	6
  7273  002C7A  EC0B  F016         	call	_WriteCmdXLCD
  7274  002C7E  EC48  F016         	call	_BusyXLCD	;wreg free
  7275  002C82  0900               	iorlw	0
  7276  002C84  A4D8               	btfss	status,2,c
  7277  002C86  D7FB               	goto	l1017
  7278                           
  7279                           ;user_xlcd.c: 24: SetDDRamAddr(0x0);
  7280  002C88  0E00               	movlw	0
  7281  002C8A  EC77  F015         	call	_SetDDRamAddr
  7282  002C8E  0012               	return		;funcret
  7283  002C90                     __end_of_XLCD_Initialize:
  7284                           	opt stack 0
  7285                           tblptru	equ	0xFF8
  7286                           tblptrh	equ	0xFF7
  7287                           tblptrl	equ	0xFF6
  7288                           tablat	equ	0xFF5
  7289                           prodh	equ	0xFF4
  7290                           prodl	equ	0xFF3
  7291                           intcon	equ	0xFF2
  7292                           postinc0	equ	0xFEE
  7293                           wreg	equ	0xFE8
  7294                           indf2	equ	0xFDF
  7295                           postinc2	equ	0xFDE
  7296                           postdec2	equ	0xFDD
  7297                           fsr2h	equ	0xFDA
  7298                           fsr2l	equ	0xFD9
  7299                           status	equ	0xFD8
  7300                           
  7301 ;; *************** function _OpenXLCD *****************
  7302 ;; Defined at:
  7303 ;;		line 19 in file "XLCD/openxlcd.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  lcdtype         1    wreg     unsigned char 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;  lcdtype         1    3[BANK0 ] unsigned char 
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		wreg, status,2, status,0, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7317 ;;      Params:         0       0       0       0       0       0       0       0       0
  7318 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7320 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7321 ;;Total ram usage:        1 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    6
  7324 ;; This function calls:
  7325 ;;		_BusyXLCD
  7326 ;;		_Delay10KTCYx
  7327 ;;		_DelayPORXLCD
  7328 ;;		_SetDDRamAddr
  7329 ;;		_WriteCmdXLCD
  7330 ;; This function is called by:
  7331 ;;		_XLCD_Initialize
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           	psect	text25
  7336  002898                     __ptext25:
  7337                           	opt stack 0
  7338  002898                     _OpenXLCD:
  7339                           	opt stack 22
  7340                           
  7341                           ;incstack = 0
  7342                           ;OpenXLCD@lcdtype stored from wreg
  7343  002898  0100               	movlb	0	; () banked
  7344  00289A  6F63               	movwf	OpenXLCD@lcdtype& (0+255),b
  7345                           
  7346                           ;openxlcd.c: 31: PORTD &= 0xf0;
  7347  00289C  0EF0               	movlw	240
  7348  00289E  1683               	andwf	3971,f,c	;volatile
  7349                           
  7350                           ;openxlcd.c: 32: TRISD &= 0xF0;
  7351  0028A0  0EF0               	movlw	240
  7352  0028A2  1695               	andwf	3989,f,c	;volatile
  7353                           
  7354                           ;openxlcd.c: 35: TRISDbits.TRISD5 = 0;
  7355  0028A4  9A95               	bcf	3989,5,c	;volatile
  7356                           
  7357                           ;openxlcd.c: 36: TRISDbits.TRISD4 = 0;
  7358  0028A6  9895               	bcf	3989,4,c	;volatile
  7359                           
  7360                           ;openxlcd.c: 37: TRISDbits.TRISD6 = 0;
  7361  0028A8  9C95               	bcf	3989,6,c	;volatile
  7362                           
  7363                           ;openxlcd.c: 38: LATDbits.LATD5 = 0;
  7364  0028AA  9A8C               	bcf	3980,5,c	;volatile
  7365                           
  7366                           ;openxlcd.c: 39: LATDbits.LATD4 = 0;
  7367  0028AC  988C               	bcf	3980,4,c	;volatile
  7368                           
  7369                           ;openxlcd.c: 40: LATDbits.LATD6 = 0;
  7370  0028AE  9C8C               	bcf	3980,6,c	;volatile
  7371                           
  7372                           ;openxlcd.c: 43: DelayPORXLCD();
  7373  0028B0  EC82  F017         	call	_DelayPORXLCD	;wreg free
  7374                           
  7375                           ;openxlcd.c: 45: WriteCmdXLCD(0x30);
  7376  0028B4  0E30               	movlw	48
  7377  0028B6  EC0B  F016         	call	_WriteCmdXLCD
  7378                           
  7379                           ;openxlcd.c: 46: Delay10KTCYx(0x05);
  7380  0028BA  0E05               	movlw	5
  7381  0028BC  EC54  F017         	call	_Delay10KTCYx
  7382                           
  7383                           ;openxlcd.c: 48: WriteCmdXLCD(0x30);
  7384  0028C0  0E30               	movlw	48
  7385  0028C2  EC0B  F016         	call	_WriteCmdXLCD
  7386                           
  7387                           ;openxlcd.c: 49: Delay10KTCYx(0x01);
  7388  0028C6  0E01               	movlw	1
  7389  0028C8  EC54  F017         	call	_Delay10KTCYx
  7390                           
  7391                           ;openxlcd.c: 52: WriteCmdXLCD(0x32);
  7392  0028CC  0E32               	movlw	50
  7393  0028CE  EC0B  F016         	call	_WriteCmdXLCD
  7394  0028D2  EC48  F016         	call	_BusyXLCD	;wreg free
  7395  0028D6  0900               	iorlw	0
  7396  0028D8  A4D8               	btfss	status,2,c
  7397  0028DA  D7FB               	goto	l65
  7398  0028DC                     u5750:
  7399                           
  7400                           ;openxlcd.c: 58: while(BusyXLCD());
  7401  0028DC  EC48  F016         	call	_BusyXLCD	;wreg free
  7402  0028E0  0900               	iorlw	0
  7403  0028E2  A4D8               	btfss	status,2,c
  7404  0028E4  D7FB               	goto	u5750
  7405                           
  7406                           ;openxlcd.c: 59: WriteCmdXLCD(lcdtype);
  7407  0028E6  0100               	movlb	0	; () banked
  7408  0028E8  5163               	movf	OpenXLCD@lcdtype& (0+255),w,b
  7409  0028EA  EC0B  F016         	call	_WriteCmdXLCD
  7410  0028EE  EC48  F016         	call	_BusyXLCD	;wreg free
  7411  0028F2  0900               	iorlw	0
  7412  0028F4  A4D8               	btfss	status,2,c
  7413  0028F6  D7FB               	goto	l71
  7414                           
  7415                           ;openxlcd.c: 63: WriteCmdXLCD(0b00001011&0b00001101&0b00001110);
  7416  0028F8  0E08               	movlw	8
  7417  0028FA  EC0B  F016         	call	_WriteCmdXLCD
  7418  0028FE  EC48  F016         	call	_BusyXLCD	;wreg free
  7419  002902  0900               	iorlw	0
  7420  002904  A4D8               	btfss	status,2,c
  7421  002906  D7FB               	goto	l74
  7422                           
  7423                           ;openxlcd.c: 65: WriteCmdXLCD(0b00001111&0b00001111&0b00001111);
  7424  002908  0E0F               	movlw	15
  7425  00290A  EC0B  F016         	call	_WriteCmdXLCD
  7426  00290E  EC48  F016         	call	_BusyXLCD	;wreg free
  7427  002912  0900               	iorlw	0
  7428  002914  A4D8               	btfss	status,2,c
  7429  002916  D7FB               	goto	l77
  7430                           
  7431                           ;openxlcd.c: 69: WriteCmdXLCD(0x01);
  7432  002918  0E01               	movlw	1
  7433  00291A  EC0B  F016         	call	_WriteCmdXLCD
  7434  00291E  EC48  F016         	call	_BusyXLCD	;wreg free
  7435  002922  0900               	iorlw	0
  7436  002924  A4D8               	btfss	status,2,c
  7437  002926  D7FB               	goto	l80
  7438                           
  7439                           ;openxlcd.c: 73: WriteCmdXLCD(0b00000100);
  7440  002928  0E04               	movlw	4
  7441  00292A  EC0B  F016         	call	_WriteCmdXLCD
  7442  00292E  EC48  F016         	call	_BusyXLCD	;wreg free
  7443  002932  0900               	iorlw	0
  7444  002934  A4D8               	btfss	status,2,c
  7445  002936  D7FB               	goto	l83
  7446                           
  7447                           ;openxlcd.c: 77: SetDDRamAddr(0x80);
  7448  002938  0E80               	movlw	128
  7449  00293A  EC77  F015         	call	_SetDDRamAddr
  7450  00293E  0012               	return	
  7451  002940                     __end_of_OpenXLCD:
  7452                           	opt stack 0
  7453                           tblptru	equ	0xFF8
  7454                           tblptrh	equ	0xFF7
  7455                           tblptrl	equ	0xFF6
  7456                           tablat	equ	0xFF5
  7457                           prodh	equ	0xFF4
  7458                           prodl	equ	0xFF3
  7459                           intcon	equ	0xFF2
  7460                           postinc0	equ	0xFEE
  7461                           wreg	equ	0xFE8
  7462                           indf2	equ	0xFDF
  7463                           postinc2	equ	0xFDE
  7464                           postdec2	equ	0xFDD
  7465                           fsr2h	equ	0xFDA
  7466                           fsr2l	equ	0xFD9
  7467                           status	equ	0xFD8
  7468                           
  7469 ;; *************** function _WriteCmdXLCD *****************
  7470 ;; Defined at:
  7471 ;;		line 13 in file "XLCD/wcmdxlcd.c"
  7472 ;; Parameters:    Size  Location     Type
  7473 ;;  cmd             1    wreg     unsigned char 
  7474 ;; Auto vars:     Size  Location     Type
  7475 ;;  cmd             1   31[COMRAM] unsigned char 
  7476 ;; Return value:  Size  Location     Type
  7477 ;;                  1    wreg      void 
  7478 ;; Registers used:
  7479 ;;		wreg, status,2, status,0, cstack
  7480 ;; Tracked objects:
  7481 ;;		On entry : 0/0
  7482 ;;		On exit  : 0/0
  7483 ;;		Unchanged: 0/0
  7484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7485 ;;      Params:         0       0       0       0       0       0       0       0       0
  7486 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7487 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7488 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7489 ;;Total ram usage:        1 bytes
  7490 ;; Hardware stack levels used:    1
  7491 ;; Hardware stack levels required when called:    5
  7492 ;; This function calls:
  7493 ;;		_DelayFor18TCY
  7494 ;; This function is called by:
  7495 ;;		_OpenXLCD
  7496 ;;		_XLCD_Initialize
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           	psect	text26
  7501  002C16                     __ptext26:
  7502                           	opt stack 0
  7503  002C16                     _WriteCmdXLCD:
  7504                           	opt stack 23
  7505                           
  7506                           ;incstack = 0
  7507                           ;WriteCmdXLCD@cmd stored from wreg
  7508  002C16  6E20               	movwf	WriteCmdXLCD@cmd,c
  7509                           
  7510                           ;wcmdxlcd.c: 32: TRISD &= 0xf0;
  7511  002C18  0EF0               	movlw	240
  7512  002C1A  1695               	andwf	3989,f,c	;volatile
  7513                           
  7514                           ;wcmdxlcd.c: 33: PORTD &= 0xf0;
  7515  002C1C  0EF0               	movlw	240
  7516  002C1E  1683               	andwf	3971,f,c	;volatile
  7517                           
  7518                           ;wcmdxlcd.c: 34: PORTD |= (cmd>>4)&0x0f;
  7519  002C20  3820               	swapf	WriteCmdXLCD@cmd,w,c
  7520  002C22  0B0F               	andlw	15
  7521  002C24  0B0F               	andlw	15
  7522  002C26  1283               	iorwf	3971,f,c	;volatile
  7523                           
  7524                           ;wcmdxlcd.c: 36: LATDbits.LATD5 = 0;
  7525  002C28  9A8C               	bcf	3980,5,c	;volatile
  7526                           
  7527                           ;wcmdxlcd.c: 37: LATDbits.LATD4 = 0;
  7528  002C2A  988C               	bcf	3980,4,c	;volatile
  7529                           
  7530                           ;wcmdxlcd.c: 38: DelayFor18TCY();
  7531  002C2C  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7532                           
  7533                           ;wcmdxlcd.c: 39: LATDbits.LATD6 = 1;
  7534  002C30  8C8C               	bsf	3980,6,c	;volatile
  7535                           
  7536                           ;wcmdxlcd.c: 40: DelayFor18TCY();
  7537  002C32  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7538                           
  7539                           ;wcmdxlcd.c: 41: LATDbits.LATD6 = 0;
  7540  002C36  9C8C               	bcf	3980,6,c	;volatile
  7541                           
  7542                           ;wcmdxlcd.c: 46: PORTD &= 0xf0;
  7543  002C38  0EF0               	movlw	240
  7544  002C3A  1683               	andwf	3971,f,c	;volatile
  7545                           
  7546                           ;wcmdxlcd.c: 47: PORTD |= cmd&0x0f;
  7547  002C3C  5020               	movf	WriteCmdXLCD@cmd,w,c
  7548  002C3E  0B0F               	andlw	15
  7549  002C40  1283               	iorwf	3971,f,c	;volatile
  7550                           
  7551                           ;wcmdxlcd.c: 49: DelayFor18TCY();
  7552  002C42  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7553                           
  7554                           ;wcmdxlcd.c: 50: LATDbits.LATD6 = 1;
  7555  002C46  8C8C               	bsf	3980,6,c	;volatile
  7556                           
  7557                           ;wcmdxlcd.c: 51: DelayFor18TCY();
  7558  002C48  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7559                           
  7560                           ;wcmdxlcd.c: 52: LATDbits.LATD6 = 0;
  7561  002C4C  9C8C               	bcf	3980,6,c	;volatile
  7562                           
  7563                           ;wcmdxlcd.c: 56: TRISD |= 0x0f;
  7564  002C4E  0E0F               	movlw	15
  7565  002C50  1295               	iorwf	3989,f,c	;volatile
  7566  002C52  0012               	return	
  7567  002C54                     __end_of_WriteCmdXLCD:
  7568                           	opt stack 0
  7569                           tblptru	equ	0xFF8
  7570                           tblptrh	equ	0xFF7
  7571                           tblptrl	equ	0xFF6
  7572                           tablat	equ	0xFF5
  7573                           prodh	equ	0xFF4
  7574                           prodl	equ	0xFF3
  7575                           intcon	equ	0xFF2
  7576                           postinc0	equ	0xFEE
  7577                           wreg	equ	0xFE8
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function _SetDDRamAddr *****************
  7586 ;; Defined at:
  7587 ;;		line 13 in file "XLCD/setddram.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  DDaddr          1    wreg     unsigned char 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  DDaddr          1   31[COMRAM] unsigned char 
  7592 ;; Return value:  Size  Location     Type
  7593 ;;                  1    wreg      void 
  7594 ;; Registers used:
  7595 ;;		wreg, status,2, status,0, cstack
  7596 ;; Tracked objects:
  7597 ;;		On entry : 0/0
  7598 ;;		On exit  : 0/0
  7599 ;;		Unchanged: 0/0
  7600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7601 ;;      Params:         0       0       0       0       0       0       0       0       0
  7602 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7603 ;;      Temps:          0       3       0       0       0       0       0       0       0
  7604 ;;      Totals:         1       3       0       0       0       0       0       0       0
  7605 ;;Total ram usage:        4 bytes
  7606 ;; Hardware stack levels used:    1
  7607 ;; Hardware stack levels required when called:    5
  7608 ;; This function calls:
  7609 ;;		_DelayFor18TCY
  7610 ;; This function is called by:
  7611 ;;		_OpenXLCD
  7612 ;;		_main
  7613 ;;		_XLCD_Initialize
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text27
  7618  002AEE                     __ptext27:
  7619                           	opt stack 0
  7620  002AEE                     _SetDDRamAddr:
  7621                           	opt stack 25
  7622                           
  7623                           ;incstack = 0
  7624                           ;SetDDRamAddr@DDaddr stored from wreg
  7625  002AEE  6E20               	movwf	SetDDRamAddr@DDaddr,c
  7626                           
  7627                           ;setddram.c: 32: TRISD &= 0xf0;
  7628  002AF0  0EF0               	movlw	240
  7629  002AF2  1695               	andwf	3989,f,c	;volatile
  7630                           
  7631                           ;setddram.c: 33: PORTD &= 0xf0;
  7632  002AF4  0EF0               	movlw	240
  7633  002AF6  1683               	andwf	3971,f,c	;volatile
  7634                           
  7635                           ;setddram.c: 34: PORTD |= (((DDaddr | 0b10000000)>>4) & 0x0f);
  7636  002AF8  5020               	movf	SetDDRamAddr@DDaddr,w,c
  7637  002AFA  0100               	movlb	0	; () banked
  7638  002AFC  6F60               	movwf	??_SetDDRamAddr& (0+255),b
  7639  002AFE  6B61               	clrf	(??_SetDDRamAddr+1)& (0+255),b
  7640  002B00  0100               	movlb	0	; () banked
  7641  002B02  8F60               	bsf	??_SetDDRamAddr& (0+255),7,b
  7642  002B04  0E04               	movlw	4
  7643  002B06  0100               	movlb	0	; () banked
  7644  002B08  6F62               	movwf	(??_SetDDRamAddr+2)& (0+255),b
  7645  002B0A                     u5665:
  7646  002B0A  0100               	movlb	0	; () banked
  7647  002B0C  3561               	rlcf	(??_SetDDRamAddr+1)& (0+255),w,b
  7648  002B0E  3361               	rrcf	(??_SetDDRamAddr+1)& (0+255),f,b
  7649  002B10  3360               	rrcf	??_SetDDRamAddr& (0+255),f,b
  7650  002B12  0100               	movlb	0	; () banked
  7651  002B14  2F62               	decfsz	(??_SetDDRamAddr+2)& (0+255),f,b
  7652  002B16  D7F9               	goto	u5665
  7653  002B18  0100               	movlb	0	; () banked
  7654  002B1A  5160               	movf	??_SetDDRamAddr& (0+255),w,b
  7655  002B1C  0B0F               	andlw	15
  7656  002B1E  1283               	iorwf	3971,f,c	;volatile
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;setddram.c: 36: LATDbits.LATD5 = 0;
  7660  002B20  9A8C               	bcf	3980,5,c	;volatile
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;setddram.c: 37: LATDbits.LATD4 = 0;
  7664  002B22  988C               	bcf	3980,4,c	;volatile
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;setddram.c: 38: DelayFor18TCY();
  7668  002B24  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7669                           
  7670                           ;setddram.c: 39: LATDbits.LATD6 = 1;
  7671  002B28  8C8C               	bsf	3980,6,c	;volatile
  7672                           
  7673                           ;setddram.c: 40: DelayFor18TCY();
  7674  002B2A  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7675                           
  7676                           ;setddram.c: 41: LATDbits.LATD6 = 0;
  7677  002B2E  9C8C               	bcf	3980,6,c	;volatile
  7678                           
  7679                           ;setddram.c: 46: PORTD &= 0xf0;
  7680  002B30  0EF0               	movlw	240
  7681  002B32  1683               	andwf	3971,f,c	;volatile
  7682                           
  7683                           ;setddram.c: 47: PORTD |= (DDaddr&0x0f);
  7684  002B34  5020               	movf	SetDDRamAddr@DDaddr,w,c
  7685  002B36  0B0F               	andlw	15
  7686  002B38  1283               	iorwf	3971,f,c	;volatile
  7687                           
  7688                           ;setddram.c: 49: DelayFor18TCY();
  7689  002B3A  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7690                           
  7691                           ;setddram.c: 50: LATDbits.LATD6 = 1;
  7692  002B3E  8C8C               	bsf	3980,6,c	;volatile
  7693                           
  7694                           ;setddram.c: 51: DelayFor18TCY();
  7695  002B40  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7696                           
  7697                           ;setddram.c: 52: LATDbits.LATD6 = 0;
  7698  002B44  9C8C               	bcf	3980,6,c	;volatile
  7699                           
  7700                           ;setddram.c: 56: TRISD |= 0x0f;
  7701  002B46  0E0F               	movlw	15
  7702  002B48  1295               	iorwf	3989,f,c	;volatile
  7703  002B4A  0012               	return	
  7704  002B4C                     __end_of_SetDDRamAddr:
  7705                           	opt stack 0
  7706                           tblptru	equ	0xFF8
  7707                           tblptrh	equ	0xFF7
  7708                           tblptrl	equ	0xFF6
  7709                           tablat	equ	0xFF5
  7710                           prodh	equ	0xFF4
  7711                           prodl	equ	0xFF3
  7712                           intcon	equ	0xFF2
  7713                           postinc0	equ	0xFEE
  7714                           wreg	equ	0xFE8
  7715                           indf2	equ	0xFDF
  7716                           postinc2	equ	0xFDE
  7717                           postdec2	equ	0xFDD
  7718                           fsr2h	equ	0xFDA
  7719                           fsr2l	equ	0xFD9
  7720                           status	equ	0xFD8
  7721                           
  7722 ;; *************** function _DelayPORXLCD *****************
  7723 ;; Defined at:
  7724 ;;		line 34 in file "user_xlcd.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;		None
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;		None
  7729 ;; Return value:  Size  Location     Type
  7730 ;;                  1    wreg      void 
  7731 ;; Registers used:
  7732 ;;		wreg
  7733 ;; Tracked objects:
  7734 ;;		On entry : 0/0
  7735 ;;		On exit  : 0/0
  7736 ;;		Unchanged: 0/0
  7737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7738 ;;      Params:         0       0       0       0       0       0       0       0       0
  7739 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7740 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7741 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7742 ;;Total ram usage:        1 bytes
  7743 ;; Hardware stack levels used:    1
  7744 ;; Hardware stack levels required when called:    4
  7745 ;; This function calls:
  7746 ;;		Nothing
  7747 ;; This function is called by:
  7748 ;;		_OpenXLCD
  7749 ;; This function uses a non-reentrant model
  7750 ;;
  7751                           
  7752                           	psect	text28
  7753  002F04                     __ptext28:
  7754                           	opt stack 0
  7755  002F04                     _DelayPORXLCD:
  7756                           	opt stack 23
  7757                           
  7758                           ;user_xlcd.c: 37: _delay((unsigned long)((15)*(4000000ul/4000.0)));
  7759                           
  7760                           ;incstack = 0
  7761  002F04  0E14               	movlw	20
  7762  002F06  6E20               	movwf	??_DelayPORXLCD& (0+255),c
  7763  002F08  0E7A               	movlw	122
  7764  002F0A                     u7057:
  7765  002F0A  2EE8               	decfsz	wreg,f,c
  7766  002F0C  D7FE               	bra	u7057
  7767  002F0E  2E20               	decfsz	??_DelayPORXLCD& (0+255),f,c
  7768  002F10  D7FC               	bra	u7057
  7769  002F12  0012               	return		;funcret
  7770  002F14                     __end_of_DelayPORXLCD:
  7771                           	opt stack 0
  7772                           tblptru	equ	0xFF8
  7773                           tblptrh	equ	0xFF7
  7774                           tblptrl	equ	0xFF6
  7775                           tablat	equ	0xFF5
  7776                           prodh	equ	0xFF4
  7777                           prodl	equ	0xFF3
  7778                           intcon	equ	0xFF2
  7779                           postinc0	equ	0xFEE
  7780                           wreg	equ	0xFE8
  7781                           indf2	equ	0xFDF
  7782                           postinc2	equ	0xFDE
  7783                           postdec2	equ	0xFDD
  7784                           fsr2h	equ	0xFDA
  7785                           fsr2l	equ	0xFD9
  7786                           status	equ	0xFD8
  7787                           
  7788 ;; *************** function _Delay10KTCYx *****************
  7789 ;; Defined at:
  7790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\pic18\d10ktcyx.c"
  7791 ;; Parameters:    Size  Location     Type
  7792 ;;  unit            1    wreg     unsigned char 
  7793 ;; Auto vars:     Size  Location     Type
  7794 ;;  unit            1    0[BANK0 ] unsigned char 
  7795 ;; Return value:  Size  Location     Type
  7796 ;;                  1    wreg      void 
  7797 ;; Registers used:
  7798 ;;		wreg
  7799 ;; Tracked objects:
  7800 ;;		On entry : 0/0
  7801 ;;		On exit  : 0/0
  7802 ;;		Unchanged: 0/0
  7803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7804 ;;      Params:         0       0       0       0       0       0       0       0       0
  7805 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7806 ;;      Temps:          1       0       0       0       0       0       0       0       0
  7807 ;;      Totals:         1       1       0       0       0       0       0       0       0
  7808 ;;Total ram usage:        2 bytes
  7809 ;; Hardware stack levels used:    1
  7810 ;; Hardware stack levels required when called:    4
  7811 ;; This function calls:
  7812 ;;		Nothing
  7813 ;; This function is called by:
  7814 ;;		_OpenXLCD
  7815 ;; This function uses a non-reentrant model
  7816 ;;
  7817                           
  7818                           	psect	text29
  7819  002EA8                     __ptext29:
  7820                           	opt stack 0
  7821  002EA8                     _Delay10KTCYx:
  7822                           	opt stack 23
  7823                           
  7824                           ;incstack = 0
  7825                           ;Delay10KTCYx@unit stored from wreg
  7826  002EA8  0100               	movlb	0	; () banked
  7827  002EAA  6F60               	movwf	Delay10KTCYx@unit& (0+255),b
  7828  002EAC                     l1856:
  7829  002EAC  0E0D               	movlw	13
  7830  002EAE  6E20               	movwf	??_Delay10KTCYx& (0+255),c
  7831  002EB0  0EFC               	movlw	252
  7832  002EB2                     u7067:
  7833  002EB2  2EE8               	decfsz	wreg,f,c
  7834  002EB4  D7FE               	bra	u7067
  7835  002EB6  2E20               	decfsz	??_Delay10KTCYx& (0+255),f,c
  7836  002EB8  D7FC               	bra	u7067
  7837  002EBA  0100               	movlb	0	; () banked
  7838  002EBC  2F60               	decfsz	Delay10KTCYx@unit& (0+255),f,b
  7839  002EBE  D7F6               	goto	l1856
  7840  002EC0  0012               	return	
  7841  002EC2                     __end_of_Delay10KTCYx:
  7842                           	opt stack 0
  7843                           tblptru	equ	0xFF8
  7844                           tblptrh	equ	0xFF7
  7845                           tblptrl	equ	0xFF6
  7846                           tablat	equ	0xFF5
  7847                           prodh	equ	0xFF4
  7848                           prodl	equ	0xFF3
  7849                           intcon	equ	0xFF2
  7850                           postinc0	equ	0xFEE
  7851                           wreg	equ	0xFE8
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8
  7858                           
  7859 ;; *************** function _BusyXLCD *****************
  7860 ;; Defined at:
  7861 ;;		line 11 in file "XLCD/busyxlcd.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;		None
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;		None
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  1    wreg      unsigned char 
  7868 ;; Registers used:
  7869 ;;		wreg, cstack
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7875 ;;      Params:         0       0       0       0       0       0       0       0       0
  7876 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7877 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7878 ;;      Totals:         0       0       0       0       0       0       0       0       0
  7879 ;;Total ram usage:        0 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    5
  7882 ;; This function calls:
  7883 ;;		_DelayFor18TCY
  7884 ;; This function is called by:
  7885 ;;		_OpenXLCD
  7886 ;;		_putrsXLCD
  7887 ;;		_putsXLCD
  7888 ;;		_main
  7889 ;;		_XLCD_Initialize
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text30
  7894  002C90                     __ptext30:
  7895                           	opt stack 0
  7896  002C90                     _BusyXLCD:
  7897                           	opt stack 24
  7898                           
  7899                           ;busyxlcd.c: 13: LATDbits.LATD5 = 1;
  7900                           
  7901                           ; BSR set to: 0
  7902                           ;incstack = 0
  7903  002C90  8A8C               	bsf	3980,5,c	;volatile
  7904                           
  7905                           ;busyxlcd.c: 14: LATDbits.LATD4 = 0;
  7906  002C92  988C               	bcf	3980,4,c	;volatile
  7907                           
  7908                           ;busyxlcd.c: 15: DelayFor18TCY();
  7909  002C94  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7910                           
  7911                           ;busyxlcd.c: 16: LATDbits.LATD6 = 1;
  7912  002C98  8C8C               	bsf	3980,6,c	;volatile
  7913                           
  7914                           ;busyxlcd.c: 17: DelayFor18TCY();
  7915  002C9A  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7916                           
  7917                           ;busyxlcd.c: 35: if(PORTD&0x08)
  7918  002C9E  A683               	btfss	3971,3,c	;volatile
  7919  002CA0  D00A               	goto	l41
  7920                           
  7921                           ;busyxlcd.c: 37: {
  7922                           ;busyxlcd.c: 38: LATDbits.LATD6 = 0;
  7923  002CA2  9C8C               	bcf	3980,6,c	;volatile
  7924                           
  7925                           ;busyxlcd.c: 39: DelayFor18TCY();
  7926  002CA4  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7927                           
  7928                           ;busyxlcd.c: 40: LATDbits.LATD6 = 1;
  7929  002CA8  8C8C               	bsf	3980,6,c	;volatile
  7930                           
  7931                           ;busyxlcd.c: 41: DelayFor18TCY();
  7932  002CAA  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7933                           
  7934                           ;busyxlcd.c: 42: LATDbits.LATD6 = 0;
  7935  002CAE  9C8C               	bcf	3980,6,c	;volatile
  7936                           
  7937                           ;busyxlcd.c: 43: LATDbits.LATD5 = 0;
  7938  002CB0  9A8C               	bcf	3980,5,c	;volatile
  7939                           
  7940                           ;busyxlcd.c: 44: return 1;
  7941  002CB2  0E01               	movlw	1
  7942                           
  7943                           ;busyxlcd.c: 45: }
  7944  002CB4  0012               	return	
  7945  002CB6                     l41:
  7946                           
  7947                           ;busyxlcd.c: 46: else
  7948                           ;busyxlcd.c: 47: {
  7949                           ;busyxlcd.c: 48: LATDbits.LATD6 = 0;
  7950  002CB6  9C8C               	bcf	3980,6,c	;volatile
  7951                           
  7952                           ;busyxlcd.c: 49: DelayFor18TCY();
  7953  002CB8  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7954                           
  7955                           ;busyxlcd.c: 50: LATDbits.LATD6 = 1;
  7956  002CBC  8C8C               	bsf	3980,6,c	;volatile
  7957                           
  7958                           ;busyxlcd.c: 51: DelayFor18TCY();
  7959  002CBE  ECA0  F017         	call	_DelayFor18TCY	;wreg free
  7960                           
  7961                           ;busyxlcd.c: 52: LATDbits.LATD6 = 0;
  7962  002CC2  9C8C               	bcf	3980,6,c	;volatile
  7963                           
  7964                           ;busyxlcd.c: 53: LATDbits.LATD5 = 0;
  7965  002CC4  9A8C               	bcf	3980,5,c	;volatile
  7966                           
  7967                           ;busyxlcd.c: 54: return 0;
  7968  002CC6  0E00               	movlw	0
  7969  002CC8  0012               	return	
  7970  002CCA                     __end_of_BusyXLCD:
  7971                           	opt stack 0
  7972                           tblptru	equ	0xFF8
  7973                           tblptrh	equ	0xFF7
  7974                           tblptrl	equ	0xFF6
  7975                           tablat	equ	0xFF5
  7976                           prodh	equ	0xFF4
  7977                           prodl	equ	0xFF3
  7978                           intcon	equ	0xFF2
  7979                           postinc0	equ	0xFEE
  7980                           wreg	equ	0xFE8
  7981                           indf2	equ	0xFDF
  7982                           postinc2	equ	0xFDE
  7983                           postdec2	equ	0xFDD
  7984                           fsr2h	equ	0xFDA
  7985                           fsr2l	equ	0xFD9
  7986                           status	equ	0xFD8
  7987                           
  7988 ;; *************** function _DelayFor18TCY *****************
  7989 ;; Defined at:
  7990 ;;		line 28 in file "user_xlcd.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;		None
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;		None
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      void 
  7997 ;; Registers used:
  7998 ;;		wreg
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8004 ;;      Params:         0       0       0       0       0       0       0       0       0
  8005 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8007 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8008 ;;Total ram usage:        0 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    4
  8011 ;; This function calls:
  8012 ;;		Nothing
  8013 ;; This function is called by:
  8014 ;;		_BusyXLCD
  8015 ;;		_SetDDRamAddr
  8016 ;;		_WriteCmdXLCD
  8017 ;;		_WriteDataXLCD
  8018 ;;		_ReadAddrXLCD
  8019 ;;		_ReadDataXLCD
  8020 ;;		_SetCGRamAddr
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           	psect	text31
  8025  002F40                     __ptext31:
  8026                           	opt stack 0
  8027  002F40                     _DelayFor18TCY:
  8028                           	opt stack 24
  8029                           
  8030                           ;user_xlcd.c: 30: _delay(18);
  8031                           
  8032                           ;incstack = 0
  8033  002F40  0E06               	movlw	6
  8034  002F42                     u7077:
  8035  002F42  2EE8               	decfsz	wreg,f,c
  8036  002F44  D7FE               	bra	u7077
  8037  002F46  0012               	return		;funcret
  8038  002F48                     __end_of_DelayFor18TCY:
  8039                           	opt stack 0
  8040                           tblptru	equ	0xFF8
  8041                           tblptrh	equ	0xFF7
  8042                           tblptrl	equ	0xFF6
  8043                           tablat	equ	0xFF5
  8044                           prodh	equ	0xFF4
  8045                           prodl	equ	0xFF3
  8046                           intcon	equ	0xFF2
  8047                           postinc0	equ	0xFEE
  8048                           wreg	equ	0xFE8
  8049                           indf2	equ	0xFDF
  8050                           postinc2	equ	0xFDE
  8051                           postdec2	equ	0xFDD
  8052                           fsr2h	equ	0xFDA
  8053                           fsr2l	equ	0xFD9
  8054                           status	equ	0xFD8
  8055                           
  8056 ;; *************** function _TMR0_Initialize *****************
  8057 ;; Defined at:
  8058 ;;		line 66 in file "tmr0.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;		None
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;		None
  8063 ;; Return value:  Size  Location     Type
  8064 ;;                  1    wreg      void 
  8065 ;; Registers used:
  8066 ;;		wreg, status,2, cstack
  8067 ;; Tracked objects:
  8068 ;;		On entry : 0/0
  8069 ;;		On exit  : 0/0
  8070 ;;		Unchanged: 0/0
  8071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8072 ;;      Params:         0       0       0       0       0       0       0       0       0
  8073 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8074 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8075 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8076 ;;Total ram usage:        0 bytes
  8077 ;; Hardware stack levels used:    1
  8078 ;; Hardware stack levels required when called:    5
  8079 ;; This function calls:
  8080 ;;		_TMR0_StartTimer
  8081 ;;		_TMR0_WriteTimer
  8082 ;; This function is called by:
  8083 ;;		_SYSTEM_Initialize
  8084 ;; This function uses a non-reentrant model
  8085 ;;
  8086                           
  8087                           	psect	text32
  8088  002E70                     __ptext32:
  8089                           	opt stack 0
  8090  002E70                     _TMR0_Initialize:
  8091                           	opt stack 24
  8092                           
  8093                           ;tmr0.c: 69: T0CON = 0b01000101;
  8094                           
  8095                           ;incstack = 0
  8096  002E70  0E45               	movlw	69
  8097  002E72  6ED5               	movwf	4053,c	;volatile
  8098                           
  8099                           ;tmr0.c: 72: TMR0_WriteTimer(0);
  8100  002E74  0E00               	movlw	0
  8101  002E76  0100               	movlb	0	; () banked
  8102  002E78  6F61               	movwf	(TMR0_WriteTimer@timerVal+1)& (0+255),b
  8103  002E7A  0E00               	movlw	0
  8104  002E7C  6F60               	movwf	TMR0_WriteTimer@timerVal& (0+255),b
  8105  002E7E  EC8A  F017         	call	_TMR0_WriteTimer	;wreg free
  8106                           
  8107                           ;tmr0.c: 75: INTCONbits.TMR0IF = 0;
  8108  002E82  94F2               	bcf	intcon,2,c	;volatile
  8109                           
  8110                           ;tmr0.c: 78: INTCONbits.TMR0IE = 1;
  8111  002E84  8AF2               	bsf	intcon,5,c	;volatile
  8112                           
  8113                           ;tmr0.c: 81: TMR0_StartTimer();
  8114  002E86  ECB3  F017         	call	_TMR0_StartTimer	;wreg free
  8115  002E8A  0012               	return		;funcret
  8116  002E8C                     __end_of_TMR0_Initialize:
  8117                           	opt stack 0
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodh	equ	0xFF4
  8123                           prodl	equ	0xFF3
  8124                           intcon	equ	0xFF2
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           indf2	equ	0xFDF
  8128                           postinc2	equ	0xFDE
  8129                           postdec2	equ	0xFDD
  8130                           fsr2h	equ	0xFDA
  8131                           fsr2l	equ	0xFD9
  8132                           status	equ	0xFD8
  8133                           
  8134 ;; *************** function _TMR0_WriteTimer *****************
  8135 ;; Defined at:
  8136 ;;		line 133 in file "tmr0.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  timerVal        2    0[BANK0 ] unsigned int 
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;		None
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      void 
  8143 ;; Registers used:
  8144 ;;		wreg, status,2
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8150 ;;      Params:         0       2       0       0       0       0       0       0       0
  8151 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8153 ;;      Totals:         0       2       0       0       0       0       0       0       0
  8154 ;;Total ram usage:        2 bytes
  8155 ;; Hardware stack levels used:    1
  8156 ;; Hardware stack levels required when called:    4
  8157 ;; This function calls:
  8158 ;;		Nothing
  8159 ;; This function is called by:
  8160 ;;		_TMR0_Initialize
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164                           	psect	text33
  8165  002F14                     __ptext33:
  8166                           	opt stack 0
  8167  002F14                     _TMR0_WriteTimer:
  8168                           	opt stack 24
  8169                           
  8170                           ;tmr0.c: 136: TMR0H = (timerVal >> 8);
  8171                           
  8172                           ;incstack = 0
  8173  002F14  0100               	movlb	0	; () banked
  8174  002F16  5161               	movf	(TMR0_WriteTimer@timerVal+1)& (0+255),w,b
  8175  002F18  6ED7               	movwf	4055,c	;volatile
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;tmr0.c: 137: TMR0L = (uint8_t) timerVal;
  8179  002F1A  C060  FFD6         	movff	TMR0_WriteTimer@timerVal,4054	;volatile
  8180                           
  8181                           ; BSR set to: 0
  8182  002F1E  0012               	return		;funcret
  8183  002F20                     __end_of_TMR0_WriteTimer:
  8184                           	opt stack 0
  8185                           tblptru	equ	0xFF8
  8186                           tblptrh	equ	0xFF7
  8187                           tblptrl	equ	0xFF6
  8188                           tablat	equ	0xFF5
  8189                           prodh	equ	0xFF4
  8190                           prodl	equ	0xFF3
  8191                           intcon	equ	0xFF2
  8192                           postinc0	equ	0xFEE
  8193                           wreg	equ	0xFE8
  8194                           indf2	equ	0xFDF
  8195                           postinc2	equ	0xFDE
  8196                           postdec2	equ	0xFDD
  8197                           fsr2h	equ	0xFDA
  8198                           fsr2l	equ	0xFD9
  8199                           status	equ	0xFD8
  8200                           
  8201 ;; *************** function _TMR0_StartTimer *****************
  8202 ;; Defined at:
  8203 ;;		line 84 in file "tmr0.c"
  8204 ;; Parameters:    Size  Location     Type
  8205 ;;		None
  8206 ;; Auto vars:     Size  Location     Type
  8207 ;;		None
  8208 ;; Return value:  Size  Location     Type
  8209 ;;                  1    wreg      void 
  8210 ;; Registers used:
  8211 ;;		None
  8212 ;; Tracked objects:
  8213 ;;		On entry : 0/0
  8214 ;;		On exit  : 0/0
  8215 ;;		Unchanged: 0/0
  8216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8217 ;;      Params:         0       0       0       0       0       0       0       0       0
  8218 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8219 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8220 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8221 ;;Total ram usage:        0 bytes
  8222 ;; Hardware stack levels used:    1
  8223 ;; Hardware stack levels required when called:    4
  8224 ;; This function calls:
  8225 ;;		Nothing
  8226 ;; This function is called by:
  8227 ;;		_TMR0_Initialize
  8228 ;; This function uses a non-reentrant model
  8229 ;;
  8230                           
  8231                           	psect	text34
  8232  002F66                     __ptext34:
  8233                           	opt stack 0
  8234  002F66                     _TMR0_StartTimer:
  8235                           	opt stack 24
  8236                           
  8237                           ;tmr0.c: 87: T0CONbits.TMR0ON = 1;
  8238                           
  8239                           ; BSR set to: 0
  8240                           ;incstack = 0
  8241  002F66  8ED5               	bsf	4053,7,c	;volatile
  8242  002F68  0012               	return		;funcret
  8243  002F6A                     __end_of_TMR0_StartTimer:
  8244                           	opt stack 0
  8245                           tblptru	equ	0xFF8
  8246                           tblptrh	equ	0xFF7
  8247                           tblptrl	equ	0xFF6
  8248                           tablat	equ	0xFF5
  8249                           prodh	equ	0xFF4
  8250                           prodl	equ	0xFF3
  8251                           intcon	equ	0xFF2
  8252                           postinc0	equ	0xFEE
  8253                           wreg	equ	0xFE8
  8254                           indf2	equ	0xFDF
  8255                           postinc2	equ	0xFDE
  8256                           postdec2	equ	0xFDD
  8257                           fsr2h	equ	0xFDA
  8258                           fsr2l	equ	0xFD9
  8259                           status	equ	0xFD8
  8260                           
  8261 ;; *************** function _PIN_MANAGER_Initialize *****************
  8262 ;; Defined at:
  8263 ;;		line 5 in file "pin_manager.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;		None
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;		None
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  1    wreg      void 
  8270 ;; Registers used:
  8271 ;;		None
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8277 ;;      Params:         0       0       0       0       0       0       0       0       0
  8278 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8279 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8280 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8281 ;;Total ram usage:        0 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    4
  8284 ;; This function calls:
  8285 ;;		Nothing
  8286 ;; This function is called by:
  8287 ;;		_SYSTEM_Initialize
  8288 ;; This function uses a non-reentrant model
  8289 ;;
  8290                           
  8291                           	psect	text35
  8292  002EF0                     __ptext35:
  8293                           	opt stack 0
  8294  002EF0                     _PIN_MANAGER_Initialize:
  8295                           	opt stack 25
  8296                           
  8297                           ;pin_manager.c: 8: TRISBbits.TRISB5=0;
  8298                           
  8299                           ;incstack = 0
  8300  002EF0  9A93               	bcf	3987,5,c	;volatile
  8301                           
  8302                           ;pin_manager.c: 9: TRISBbits.TRISB0=1;
  8303  002EF2  8093               	bsf	3987,0,c	;volatile
  8304                           
  8305                           ;pin_manager.c: 11: INTCON2bits.INTEDG0=1;
  8306  002EF4  8CF1               	bsf	intcon2,6,c	;volatile
  8307                           
  8308                           ;pin_manager.c: 12: INTCONbits.INT0F=0;
  8309  002EF6  92F2               	bcf	intcon,1,c	;volatile
  8310                           
  8311                           ;pin_manager.c: 13: INTCONbits.INT0IE=1;
  8312  002EF8  88F2               	bsf	intcon,4,c	;volatile
  8313                           
  8314                           ;pin_manager.c: 15: ADCON1bits.PCFG = 0xF;
  8315  002EFA  80C1               	bsf	4033,0,c	;volatile
  8316  002EFC  82C1               	bsf	4033,1,c	;volatile
  8317  002EFE  84C1               	bsf	4033,2,c	;volatile
  8318  002F00  86C1               	bsf	4033,3,c	;volatile
  8319  002F02  0012               	return		;funcret
  8320  002F04                     __end_of_PIN_MANAGER_Initialize:
  8321                           	opt stack 0
  8322                           tblptru	equ	0xFF8
  8323                           tblptrh	equ	0xFF7
  8324                           tblptrl	equ	0xFF6
  8325                           tablat	equ	0xFF5
  8326                           prodh	equ	0xFF4
  8327                           prodl	equ	0xFF3
  8328                           intcon	equ	0xFF2
  8329                           intcon2	equ	0xFF1
  8330                           postinc0	equ	0xFEE
  8331                           wreg	equ	0xFE8
  8332                           indf2	equ	0xFDF
  8333                           postinc2	equ	0xFDE
  8334                           postdec2	equ	0xFDD
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _OSCILLATOR_Initialize *****************
  8340 ;; Defined at:
  8341 ;;		line 98 in file "mcc.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;		None
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      void 
  8348 ;; Registers used:
  8349 ;;		wreg, status,2
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8355 ;;      Params:         0       0       0       0       0       0       0       0       0
  8356 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8357 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8358 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8359 ;;Total ram usage:        0 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    4
  8362 ;; This function calls:
  8363 ;;		Nothing
  8364 ;; This function is called by:
  8365 ;;		_SYSTEM_Initialize
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           	psect	text36
  8370  002F2C                     __ptext36:
  8371                           	opt stack 0
  8372  002F2C                     _OSCILLATOR_Initialize:
  8373                           	opt stack 25
  8374                           
  8375                           ;mcc.c: 101: OSCCON = 0x60;
  8376                           
  8377                           ;incstack = 0
  8378  002F2C  0E60               	movlw	96
  8379  002F2E  6ED3               	movwf	4051,c	;volatile
  8380                           
  8381                           ;mcc.c: 103: OSCTUNE = 0x00;
  8382  002F30  0E00               	movlw	0
  8383  002F32  6E9B               	movwf	3995,c	;volatile
  8384  002F34  0012               	return		;funcret
  8385  002F36                     __end_of_OSCILLATOR_Initialize:
  8386                           	opt stack 0
  8387                           tblptru	equ	0xFF8
  8388                           tblptrh	equ	0xFF7
  8389                           tblptrl	equ	0xFF6
  8390                           tablat	equ	0xFF5
  8391                           prodh	equ	0xFF4
  8392                           prodl	equ	0xFF3
  8393                           intcon	equ	0xFF2
  8394                           intcon2	equ	0xFF1
  8395                           postinc0	equ	0xFEE
  8396                           wreg	equ	0xFE8
  8397                           indf2	equ	0xFDF
  8398                           postinc2	equ	0xFDE
  8399                           postdec2	equ	0xFDD
  8400                           fsr2h	equ	0xFDA
  8401                           fsr2l	equ	0xFD9
  8402                           status	equ	0xFD8
  8403                           
  8404 ;; *************** function _INTERRUPT_Initialize *****************
  8405 ;; Defined at:
  8406 ;;		line 5 in file "interrupt_manager.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;		None
  8409 ;; Auto vars:     Size  Location     Type
  8410 ;;		None
  8411 ;; Return value:  Size  Location     Type
  8412 ;;                  1    wreg      void 
  8413 ;; Registers used:
  8414 ;;		None
  8415 ;; Tracked objects:
  8416 ;;		On entry : 0/0
  8417 ;;		On exit  : 0/0
  8418 ;;		Unchanged: 0/0
  8419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8420 ;;      Params:         0       0       0       0       0       0       0       0       0
  8421 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8422 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8423 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8424 ;;Total ram usage:        0 bytes
  8425 ;; Hardware stack levels used:    1
  8426 ;; Hardware stack levels required when called:    4
  8427 ;; This function calls:
  8428 ;;		Nothing
  8429 ;; This function is called by:
  8430 ;;		_SYSTEM_Initialize
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           	psect	text37
  8435  002E8C                     __ptext37:
  8436                           	opt stack 0
  8437  002E8C                     _INTERRUPT_Initialize:
  8438                           	opt stack 25
  8439                           
  8440                           ;interrupt_manager.c: 8: IPEN = 0;
  8441                           
  8442                           ;incstack = 0
  8443  002E8C  9ED0               	bcf	4048,7,c	;volatile
  8444                           
  8445                           ;interrupt_manager.c: 13: IPR1bits.ADIP = 0;
  8446  002E8E  9C9F               	bcf	3999,6,c	;volatile
  8447                           
  8448                           ;interrupt_manager.c: 15: INTCON2bits.TMR0IP = 0;
  8449  002E90  94F1               	bcf	intcon2,2,c	;volatile
  8450                           
  8451                           ;interrupt_manager.c: 17: IPR2bits.EEIP = 0;
  8452  002E92  98A2               	bcf	4002,4,c	;volatile
  8453                           
  8454                           ;interrupt_manager.c: 19: IPR2bits.BCLIP = 0;
  8455  002E94  96A2               	bcf	4002,3,c	;volatile
  8456                           
  8457                           ;interrupt_manager.c: 21: IPR1bits.SSPIP = 0;
  8458  002E96  969F               	bcf	3999,3,c	;volatile
  8459                           
  8460                           ;interrupt_manager.c: 23: IPR1bits.TX1IP = 0;
  8461  002E98  989F               	bcf	3999,4,c	;volatile
  8462                           
  8463                           ;interrupt_manager.c: 25: IPR1bits.RC1IP = 0;
  8464  002E9A  9A9F               	bcf	3999,5,c	;volatile
  8465                           
  8466                           ;interrupt_manager.c: 27: IPR1bits.TMR1IP = 0;
  8467  002E9C  909F               	bcf	3999,0,c	;volatile
  8468                           
  8469                           ;interrupt_manager.c: 29: INTCON2bits.RBIP = 0;
  8470  002E9E  90F1               	bcf	intcon2,0,c	;volatile
  8471                           
  8472                           ;interrupt_manager.c: 31: IPR2bits.CCP2IP = 0;
  8473  002EA0  90A2               	bcf	4002,0,c	;volatile
  8474                           
  8475                           ;interrupt_manager.c: 33: IPR2bits.TMR3IP = 0;
  8476  002EA2  92A2               	bcf	4002,1,c	;volatile
  8477                           
  8478                           ;interrupt_manager.c: 35: IPR1bits.TMR2IP = 0;
  8479  002EA4  929F               	bcf	3999,1,c	;volatile
  8480  002EA6  0012               	return		;funcret
  8481  002EA8                     __end_of_INTERRUPT_Initialize:
  8482                           	opt stack 0
  8483                           tblptru	equ	0xFF8
  8484                           tblptrh	equ	0xFF7
  8485                           tblptrl	equ	0xFF6
  8486                           tablat	equ	0xFF5
  8487                           prodh	equ	0xFF4
  8488                           prodl	equ	0xFF3
  8489                           intcon	equ	0xFF2
  8490                           intcon2	equ	0xFF1
  8491                           postinc0	equ	0xFEE
  8492                           wreg	equ	0xFE8
  8493                           indf2	equ	0xFDF
  8494                           postinc2	equ	0xFDE
  8495                           postdec2	equ	0xFDD
  8496                           fsr2h	equ	0xFDA
  8497                           fsr2l	equ	0xFD9
  8498                           status	equ	0xFD8
  8499                           
  8500 ;; *************** function _INTERRUPT_InterruptManager *****************
  8501 ;; Defined at:
  8502 ;;		line 38 in file "interrupt_manager.c"
  8503 ;; Parameters:    Size  Location     Type
  8504 ;;		None
  8505 ;; Auto vars:     Size  Location     Type
  8506 ;;  __portb__       1   30[COMRAM] unsigned char 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  1    wreg      void 
  8509 ;; Registers used:
  8510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8516 ;;      Params:         0       0       0       0       0       0       0       0       0
  8517 ;;      Locals:         1       0       0       0       0       0       0       0       0
  8518 ;;      Temps:         18       0       0       0       0       0       0       0       0
  8519 ;;      Totals:        19       0       0       0       0       0       0       0       0
  8520 ;;Total ram usage:       19 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    3
  8523 ;; This function calls:
  8524 ;;		_ADC_ISR
  8525 ;;		_EUSART1_Receive_ISR
  8526 ;;		_EUSART1_Transmit_ISR
  8527 ;;		_I2C1_BusCollisionISR
  8528 ;;		_I2C1_ISR
  8529 ;;		_MEMORY_ISR
  8530 ;;		_PIN_MANAGER_INT0
  8531 ;;		_PIN_MANAGER_INT1
  8532 ;;		_PIN_MANAGER_INT2
  8533 ;;		_PIN_MANAGER_IOC
  8534 ;;		_TMR0_ISR
  8535 ;;		_TMR1_ISR
  8536 ;;		_TMR2_ISR
  8537 ;;		_TMR3_ISR
  8538 ;; This function is called by:
  8539 ;;		Interrupt level 2
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           	psect	intcode
  8544  000008                     __pintcode:
  8545                           	opt stack 0
  8546  000008                     _INTERRUPT_InterruptManager:
  8547                           	opt stack 22
  8548                           
  8549                           ;incstack = 0
  8550  000008  8240               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8551  00000A  EDF3  F00F         	call	int_func,f	;refresh shadow registers
  8552                           tblptru	equ	0xFF8
  8553                           tblptrh	equ	0xFF7
  8554                           tblptrl	equ	0xFF6
  8555                           tablat	equ	0xFF5
  8556                           prodh	equ	0xFF4
  8557                           prodl	equ	0xFF3
  8558                           intcon	equ	0xFF2
  8559                           intcon2	equ	0xFF1
  8560                           postinc0	equ	0xFEE
  8561                           wreg	equ	0xFE8
  8562                           indf2	equ	0xFDF
  8563                           postinc2	equ	0xFDE
  8564                           postdec2	equ	0xFDD
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569                           	psect	intcode_body
  8570  001FE6                     __pintcode_body:
  8571                           	opt stack 22
  8572  001FE6                     int_func:
  8573                           	opt stack 22
  8574  001FE6  0006               	pop		; remove dummy address from shadow register refresh
  8575  001FE8  CFFA F00D          	movff	pclath,??_INTERRUPT_InterruptManager
  8576  001FEC  CFFB F00E          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  8577  001FF0  CFE9 F00F          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  8578  001FF4  CFEA F010          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  8579  001FF8  CFE1 F011          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  8580  001FFC  CFE2 F012          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  8581  002000  CFD9 F013          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  8582  002004  CFDA F014          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  8583  002008  CFF3 F015          	movff	prodl,??_INTERRUPT_InterruptManager+8
  8584  00200C  CFF4 F016          	movff	prodh,??_INTERRUPT_InterruptManager+9
  8585  002010  CFF6 F017          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  8586  002014  CFF7 F018          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  8587  002018  CFF8 F019          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  8588  00201C  CFF5 F01A          	movff	tablat,??_INTERRUPT_InterruptManager+13
  8589  002020  C040  F01B         	movff	btemp,??_INTERRUPT_InterruptManager+14
  8590  002024  C041  F01C         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  8591  002028  C042  F01D         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  8592  00202C  C043  F01E         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  8593                           
  8594                           ;interrupt_manager.c: 41: if(PIE1bits.ADIE == 1 && PIR1bits.ADIF == 1)
  8595  002030  BC9D               	btfsc	3997,6,c	;volatile
  8596  002032  AC9E               	btfss	3998,6,c	;volatile
  8597  002034  D004               	goto	i2l542
  8598                           
  8599                           ;interrupt_manager.c: 42: {
  8600                           ;interrupt_manager.c: 43: ADC_ISR();
  8601  002036  ECC1  F017         	call	_ADC_ISR	;wreg free
  8602                           
  8603                           ;interrupt_manager.c: 45: PIR1bits.ADIF = 0;
  8604  00203A  9C9E               	bcf	3998,6,c	;volatile
  8605                           
  8606                           ;interrupt_manager.c: 46: }
  8607  00203C  D061               	goto	i2l570
  8608  00203E                     i2l542:
  8609                           
  8610                           ;interrupt_manager.c: 47: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  8611  00203E  BAF2               	btfsc	intcon,5,c	;volatile
  8612  002040  A4F2               	btfss	intcon,2,c	;volatile
  8613  002042  D004               	goto	i2l544
  8614                           
  8615                           ;interrupt_manager.c: 48: {
  8616                           ;interrupt_manager.c: 49: TMR0_ISR();
  8617  002044  EC90  F017         	call	_TMR0_ISR	;wreg free
  8618                           
  8619                           ;interrupt_manager.c: 51: INTCONbits.TMR0IF = 0;
  8620  002048  94F2               	bcf	intcon,2,c	;volatile
  8621                           
  8622                           ;interrupt_manager.c: 52: }
  8623  00204A  D05A               	goto	i2l570
  8624  00204C                     i2l544:
  8625                           
  8626                           ;interrupt_manager.c: 53: else if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
  8627  00204C  B8A0               	btfsc	4000,4,c	;volatile
  8628  00204E  A8A1               	btfss	4001,4,c	;volatile
  8629  002050  D004               	goto	i2l546
  8630                           
  8631                           ;interrupt_manager.c: 54: {
  8632                           ;interrupt_manager.c: 55: MEMORY_ISR();
  8633  002052  ECBF  F017         	call	_MEMORY_ISR	;wreg free
  8634                           
  8635                           ;interrupt_manager.c: 56: PIR2bits.EEIF = 0;
  8636  002056  98A1               	bcf	4001,4,c	;volatile
  8637                           
  8638                           ;interrupt_manager.c: 57: }
  8639  002058  D053               	goto	i2l570
  8640  00205A                     i2l546:
  8641                           
  8642                           ;interrupt_manager.c: 58: else if(PIE2bits.BCLIE == 1 && PIR2bits.BCLIF == 1)
  8643  00205A  B6A0               	btfsc	4000,3,c	;volatile
  8644  00205C  A6A1               	btfss	4001,3,c	;volatile
  8645  00205E  D004               	goto	i2l548
  8646                           
  8647                           ;interrupt_manager.c: 59: {
  8648                           ;interrupt_manager.c: 60: I2C1_BusCollisionISR();
  8649  002060  ECC0  F017         	call	_I2C1_BusCollisionISR	;wreg free
  8650                           
  8651                           ;interrupt_manager.c: 61: PIR2bits.BCLIF = 0;
  8652  002064  96A1               	bcf	4001,3,c	;volatile
  8653                           
  8654                           ;interrupt_manager.c: 62: }
  8655  002066  D04C               	goto	i2l570
  8656  002068                     i2l548:
  8657                           
  8658                           ;interrupt_manager.c: 63: else if(PIE1bits.SSPIE == 1 && PIR1bits.SSPIF == 1)
  8659  002068  B69D               	btfsc	3997,3,c	;volatile
  8660  00206A  A69E               	btfss	3998,3,c	;volatile
  8661  00206C  D004               	goto	i2l550
  8662                           
  8663                           ;interrupt_manager.c: 64: {
  8664                           ;interrupt_manager.c: 65: I2C1_ISR();
  8665  00206E  EC4D  F00D         	call	_I2C1_ISR	;wreg free
  8666                           
  8667                           ;interrupt_manager.c: 66: PIR1bits.SSPIF = 0;
  8668  002072  969E               	bcf	3998,3,c	;volatile
  8669                           
  8670                           ;interrupt_manager.c: 67: }
  8671  002074  D045               	goto	i2l570
  8672  002076                     i2l550:
  8673                           
  8674                           ;interrupt_manager.c: 68: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  8675  002076  B89D               	btfsc	3997,4,c	;volatile
  8676  002078  A89E               	btfss	3998,4,c	;volatile
  8677  00207A  D004               	goto	i2l552
  8678                           
  8679                           ;interrupt_manager.c: 69: {
  8680                           ;interrupt_manager.c: 70: EUSART1_Transmit_ISR();
  8681  00207C  ECFB  F016         	call	_EUSART1_Transmit_ISR	;wreg free
  8682                           
  8683                           ;interrupt_manager.c: 71: PIR1bits.TX1IF = 0;
  8684  002080  989E               	bcf	3998,4,c	;volatile
  8685                           
  8686                           ;interrupt_manager.c: 72: }
  8687  002082  D03E               	goto	i2l570
  8688  002084                     i2l552:
  8689                           
  8690                           ;interrupt_manager.c: 73: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  8691  002084  BA9D               	btfsc	3997,5,c	;volatile
  8692  002086  AA9E               	btfss	3998,5,c	;volatile
  8693  002088  D004               	goto	i2l554
  8694                           
  8695                           ;interrupt_manager.c: 74: {
  8696                           ;interrupt_manager.c: 75: EUSART1_Receive_ISR();
  8697  00208A  EC9B  F017         	call	_EUSART1_Receive_ISR	;wreg free
  8698                           
  8699                           ;interrupt_manager.c: 76: PIR1bits.RC1IF = 0;
  8700  00208E  9A9E               	bcf	3998,5,c	;volatile
  8701                           
  8702                           ;interrupt_manager.c: 77: }
  8703  002090  D037               	goto	i2l570
  8704  002092                     i2l554:
  8705                           
  8706                           ;interrupt_manager.c: 78: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  8707  002092  B09D               	btfsc	3997,0,c	;volatile
  8708  002094  A09E               	btfss	3998,0,c	;volatile
  8709  002096  D004               	goto	i2l556
  8710                           
  8711                           ;interrupt_manager.c: 79: {
  8712                           ;interrupt_manager.c: 80: TMR1_ISR();
  8713  002098  ECBB  F017         	call	_TMR1_ISR	;wreg free
  8714                           
  8715                           ;interrupt_manager.c: 81: PIR1bits.TMR1IF = 0;
  8716  00209C  909E               	bcf	3998,0,c	;volatile
  8717                           
  8718                           ;interrupt_manager.c: 82: }
  8719  00209E  D030               	goto	i2l570
  8720  0020A0                     i2l556:
  8721                           
  8722                           ;interrupt_manager.c: 83: else if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
  8723  0020A0  B6F2               	btfsc	intcon,3,c	;volatile
  8724  0020A2  A0F2               	btfss	intcon,0,c	;volatile
  8725  0020A4  D006               	goto	i2l558
  8726                           
  8727                           ;interrupt_manager.c: 84: {
  8728                           ;interrupt_manager.c: 85: PIN_MANAGER_IOC();
  8729  0020A6  ECBC  F017         	call	_PIN_MANAGER_IOC	;wreg free
  8730                           
  8731                           ;interrupt_manager.c: 88: unsigned char __portb__ = PORTB;
  8732  0020AA  CF81 F01F          	movff	3969,INTERRUPT_InterruptManager@__portb__	;volatile
  8733                           
  8734                           ;interrupt_manager.c: 89: INTCONbits.RBIF = 0;
  8735  0020AE  90F2               	bcf	intcon,0,c	;volatile
  8736                           
  8737                           ;interrupt_manager.c: 90: }
  8738  0020B0  D027               	goto	i2l570
  8739  0020B2                     i2l558:
  8740                           
  8741                           ;interrupt_manager.c: 91: else if(INTCONbits.INT0IE == 1 && INTCONbits.INT0IF == 1)
  8742  0020B2  B8F2               	btfsc	intcon,4,c	;volatile
  8743  0020B4  A2F2               	btfss	intcon,1,c	;volatile
  8744  0020B6  D004               	goto	i2l560
  8745                           
  8746                           ;interrupt_manager.c: 92: {
  8747                           ;interrupt_manager.c: 93: PIN_MANAGER_INT0();
  8748  0020B8  ECCC  F015         	call	_PIN_MANAGER_INT0	;wreg free
  8749                           
  8750                           ;interrupt_manager.c: 95: INTCONbits.INT0IF = 0;
  8751  0020BC  92F2               	bcf	intcon,1,c	;volatile
  8752                           
  8753                           ;interrupt_manager.c: 97: }
  8754  0020BE  D020               	goto	i2l570
  8755  0020C0                     i2l560:
  8756                           
  8757                           ;interrupt_manager.c: 98: else if(INTCON3bits.INT1IE == 1 && INTCON3bits.INT1IF == 1)
  8758  0020C0  B6F0               	btfsc	intcon3,3,c	;volatile
  8759  0020C2  A0F0               	btfss	intcon3,0,c	;volatile
  8760  0020C4  D004               	goto	i2l562
  8761                           
  8762                           ;interrupt_manager.c: 99: {
  8763                           ;interrupt_manager.c: 100: PIN_MANAGER_INT1();
  8764  0020C6  ECBE  F017         	call	_PIN_MANAGER_INT1	;wreg free
  8765                           
  8766                           ;interrupt_manager.c: 102: INTCON3bits.INT1IF = 0;
  8767  0020CA  90F0               	bcf	intcon3,0,c	;volatile
  8768                           
  8769                           ;interrupt_manager.c: 103: }
  8770  0020CC  D019               	goto	i2l570
  8771  0020CE                     i2l562:
  8772                           
  8773                           ;interrupt_manager.c: 104: else if(INTCON3bits.INT2IE == 1 && INTCON3bits.INT2IF == 1)
  8774  0020CE  B8F0               	btfsc	intcon3,4,c	;volatile
  8775  0020D0  A2F0               	btfss	intcon3,1,c	;volatile
  8776  0020D2  D004               	goto	i2l564
  8777                           
  8778                           ;interrupt_manager.c: 105: {
  8779                           ;interrupt_manager.c: 106: PIN_MANAGER_INT2();
  8780  0020D4  ECBD  F017         	call	_PIN_MANAGER_INT2	;wreg free
  8781                           
  8782                           ;interrupt_manager.c: 108: INTCON3bits.INT2IF = 0;
  8783  0020D8  92F0               	bcf	intcon3,1,c	;volatile
  8784                           
  8785                           ;interrupt_manager.c: 109: }
  8786  0020DA  D012               	goto	i2l570
  8787  0020DC                     i2l564:
  8788                           
  8789                           ;interrupt_manager.c: 110: else if(PIE2bits.CCP2IE == 1 && PIR2bits.CCP2IF == 1)
  8790  0020DC  B0A0               	btfsc	4000,0,c	;volatile
  8791  0020DE  A0A1               	btfss	4001,0,c	;volatile
  8792  0020E0  D002               	goto	i2l566
  8793                           
  8794                           ;interrupt_manager.c: 111: {
  8795                           ;interrupt_manager.c: 114: PIR2bits.CCP2IF = 0;
  8796  0020E2  90A1               	bcf	4001,0,c	;volatile
  8797                           
  8798                           ;interrupt_manager.c: 115: }
  8799  0020E4  D00D               	goto	i2l570
  8800  0020E6                     i2l566:
  8801                           
  8802                           ;interrupt_manager.c: 116: else if(PIE2bits.TMR3IE == 1 && PIR2bits.TMR3IF == 1)
  8803  0020E6  B2A0               	btfsc	4000,1,c	;volatile
  8804  0020E8  A2A1               	btfss	4001,1,c	;volatile
  8805  0020EA  D004               	goto	i2l568
  8806                           
  8807                           ;interrupt_manager.c: 117: {
  8808                           ;interrupt_manager.c: 118: TMR3_ISR();
  8809  0020EC  ECE4  F016         	call	_TMR3_ISR	;wreg free
  8810                           
  8811                           ;interrupt_manager.c: 119: PIR2bits.TMR3IF = 0;
  8812  0020F0  92A1               	bcf	4001,1,c	;volatile
  8813                           
  8814                           ;interrupt_manager.c: 120: }
  8815  0020F2  D006               	goto	i2l570
  8816  0020F4                     i2l568:
  8817                           
  8818                           ;interrupt_manager.c: 121: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  8819  0020F4  B29D               	btfsc	3997,1,c	;volatile
  8820  0020F6  A29E               	btfss	3998,1,c	;volatile
  8821  0020F8  D003               	goto	i2l570
  8822                           
  8823                           ;interrupt_manager.c: 122: {
  8824                           ;interrupt_manager.c: 123: TMR2_ISR();
  8825  0020FA  ECBA  F017         	call	_TMR2_ISR	;wreg free
  8826                           
  8827                           ;interrupt_manager.c: 124: PIR1bits.TMR2IF = 0;
  8828  0020FE  929E               	bcf	3998,1,c	;volatile
  8829  002100                     i2l570:
  8830                           
  8831                           ;interrupt_manager.c: 126: else
  8832                           ;interrupt_manager.c: 127: {
  8833  002100  C01E  F043         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  8834  002104  C01D  F042         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  8835  002108  C01C  F041         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  8836  00210C  C01B  F040         	movff	??_INTERRUPT_InterruptManager+14,btemp
  8837  002110  C01A  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  8838  002114  C019  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  8839  002118  C018  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  8840  00211C  C017  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  8841  002120  C016  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  8842  002124  C015  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  8843  002128  C014  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  8844  00212C  C013  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  8845  002130  C012  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  8846  002134  C011  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  8847  002138  C010  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  8848  00213C  C00F  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  8849  002140  C00E  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  8850  002144  C00D  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  8851  002148  9240               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8852  00214A  0011               	retfie		f
  8853  00214C                     __end_of_INTERRUPT_InterruptManager:
  8854                           	opt stack 0
  8855                           pclatu	equ	0xFFB
  8856                           pclath	equ	0xFFA
  8857                           tblptru	equ	0xFF8
  8858                           tblptrh	equ	0xFF7
  8859                           tblptrl	equ	0xFF6
  8860                           tablat	equ	0xFF5
  8861                           prodh	equ	0xFF4
  8862                           prodl	equ	0xFF3
  8863                           intcon	equ	0xFF2
  8864                           intcon2	equ	0xFF1
  8865                           intcon3	equ	0xFF0
  8866                           postinc0	equ	0xFEE
  8867                           fsr0h	equ	0xFEA
  8868                           fsr0l	equ	0xFE9
  8869                           wreg	equ	0xFE8
  8870                           fsr1h	equ	0xFE2
  8871                           fsr1l	equ	0xFE1
  8872                           indf2	equ	0xFDF
  8873                           postinc2	equ	0xFDE
  8874                           postdec2	equ	0xFDD
  8875                           fsr2h	equ	0xFDA
  8876                           fsr2l	equ	0xFD9
  8877                           status	equ	0xFD8
  8878                           
  8879 ;; *************** function _TMR3_ISR *****************
  8880 ;; Defined at:
  8881 ;;		line 158 in file "tmr3.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;		None
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;		None
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  1    wreg      void 
  8888 ;; Registers used:
  8889 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8895 ;;      Params:         0       0       0       0       0       0       0       0       0
  8896 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8897 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8898 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8899 ;;Total ram usage:        0 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    1
  8902 ;; This function calls:
  8903 ;;		Absolute function
  8904 ;;		_TMR3_DefaultInterruptHandler
  8905 ;; This function is called by:
  8906 ;;		_INTERRUPT_InterruptManager
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           	psect	text39
  8911  002DC8                     __ptext39:
  8912                           	opt stack 0
  8913  002DC8                     _TMR3_ISR:
  8914                           	opt stack 23
  8915                           
  8916                           ;tmr3.c: 162: TMR3H = (timer3ReloadVal >> 8);
  8917                           
  8918                           ;incstack = 0
  8919  002DC8  5029               	movf	_timer3ReloadVal+1,w,c	;volatile
  8920  002DCA  6EB3               	movwf	4019,c	;volatile
  8921                           
  8922                           ;tmr3.c: 163: TMR3L = (uint8_t) timer3ReloadVal;
  8923  002DCC  C028  FFB2         	movff	_timer3ReloadVal,4018	;volatile
  8924                           
  8925                           ;tmr3.c: 165: if(TMR3_InterruptHandler)
  8926  002DD0  0100               	movlb	0	; () banked
  8927  002DD2  51E0               	movf	_TMR3_InterruptHandler& (0+255),w,b
  8928  002DD4  0100               	movlb	0	; () banked
  8929  002DD6  11E1               	iorwf	(_TMR3_InterruptHandler+1)& (0+255),w,b
  8930  002DD8  B4D8               	btfsc	status,2,c
  8931  002DDA  0012               	return	
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;tmr3.c: 166: {
  8935                           ;tmr3.c: 167: TMR3_InterruptHandler();
  8936  002DDC  D801               	call	i2u484_48
  8937  002DDE  0012               	return	
  8938  002DE0                     i2u484_48:
  8939  002DE0  0005               	push	
  8940  002DE2  0100               	movlb	0	; () banked
  8941  002DE4  6EFA               	movwf	pclath,c
  8942  002DE6  51E0               	movf	_TMR3_InterruptHandler& (0+255),w,b
  8943  002DE8  6EFD               	movwf	tosl,c
  8944  002DEA  51E1               	movf	(_TMR3_InterruptHandler+1)& (0+255),w,b
  8945  002DEC  6EFE               	movwf	tosh,c
  8946  002DEE  50F8               	movf	tblptru,w,c
  8947  002DF0  6EFF               	movwf	tosu,c
  8948  002DF2  50FA               	movf	pclath,w,c
  8949  002DF4  0012               	return		;indir
  8950  002DF6                     __end_of_TMR3_ISR:
  8951                           	opt stack 0
  8952                           tosu	equ	0xFFF
  8953                           tosh	equ	0xFFE
  8954                           tosl	equ	0xFFD
  8955                           pclatu	equ	0xFFB
  8956                           pclath	equ	0xFFA
  8957                           tblptru	equ	0xFF8
  8958                           tblptrh	equ	0xFF7
  8959                           tblptrl	equ	0xFF6
  8960                           tablat	equ	0xFF5
  8961                           prodh	equ	0xFF4
  8962                           prodl	equ	0xFF3
  8963                           intcon	equ	0xFF2
  8964                           intcon2	equ	0xFF1
  8965                           intcon3	equ	0xFF0
  8966                           postinc0	equ	0xFEE
  8967                           fsr0h	equ	0xFEA
  8968                           fsr0l	equ	0xFE9
  8969                           wreg	equ	0xFE8
  8970                           fsr1h	equ	0xFE2
  8971                           fsr1l	equ	0xFE1
  8972                           indf2	equ	0xFDF
  8973                           postinc2	equ	0xFDE
  8974                           postdec2	equ	0xFDD
  8975                           fsr2h	equ	0xFDA
  8976                           fsr2l	equ	0xFD9
  8977                           status	equ	0xFD8
  8978                           
  8979 ;; *************** function _TMR3_DefaultInterruptHandler *****************
  8980 ;; Defined at:
  8981 ;;		line 176 in file "tmr3.c"
  8982 ;; Parameters:    Size  Location     Type
  8983 ;;		None
  8984 ;; Auto vars:     Size  Location     Type
  8985 ;;		None
  8986 ;; Return value:  Size  Location     Type
  8987 ;;                  1    wreg      void 
  8988 ;; Registers used:
  8989 ;;		None
  8990 ;; Tracked objects:
  8991 ;;		On entry : 0/0
  8992 ;;		On exit  : 0/0
  8993 ;;		Unchanged: 0/0
  8994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8995 ;;      Params:         0       0       0       0       0       0       0       0       0
  8996 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8998 ;;      Totals:         0       0       0       0       0       0       0       0       0
  8999 ;;Total ram usage:        0 bytes
  9000 ;; Hardware stack levels used:    1
  9001 ;; This function calls:
  9002 ;;		Nothing
  9003 ;; This function is called by:
  9004 ;;		_TMR3_Initialize
  9005 ;;		_TMR3_ISR
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           	psect	text40
  9010  002F72                     __ptext40:
  9011                           	opt stack 0
  9012  002F72                     _TMR3_DefaultInterruptHandler:
  9013                           	opt stack 23
  9014                           
  9015                           ;incstack = 0
  9016  002F72  0012               	return		;funcret
  9017  002F74                     __end_of_TMR3_DefaultInterruptHandler:
  9018                           	opt stack 0
  9019                           tosu	equ	0xFFF
  9020                           tosh	equ	0xFFE
  9021                           tosl	equ	0xFFD
  9022                           pclatu	equ	0xFFB
  9023                           pclath	equ	0xFFA
  9024                           tblptru	equ	0xFF8
  9025                           tblptrh	equ	0xFF7
  9026                           tblptrl	equ	0xFF6
  9027                           tablat	equ	0xFF5
  9028                           prodh	equ	0xFF4
  9029                           prodl	equ	0xFF3
  9030                           intcon	equ	0xFF2
  9031                           intcon2	equ	0xFF1
  9032                           intcon3	equ	0xFF0
  9033                           postinc0	equ	0xFEE
  9034                           fsr0h	equ	0xFEA
  9035                           fsr0l	equ	0xFE9
  9036                           wreg	equ	0xFE8
  9037                           fsr1h	equ	0xFE2
  9038                           fsr1l	equ	0xFE1
  9039                           indf2	equ	0xFDF
  9040                           postinc2	equ	0xFDE
  9041                           postdec2	equ	0xFDD
  9042                           fsr2h	equ	0xFDA
  9043                           fsr2l	equ	0xFD9
  9044                           status	equ	0xFD8
  9045                           
  9046 ;; *************** function _TMR2_ISR *****************
  9047 ;; Defined at:
  9048 ;;		line 123 in file "tmr2.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;		None
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      void 
  9055 ;; Registers used:
  9056 ;;		None
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9062 ;;      Params:         0       0       0       0       0       0       0       0       0
  9063 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9065 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9066 ;;Total ram usage:        0 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; This function calls:
  9069 ;;		Nothing
  9070 ;; This function is called by:
  9071 ;;		_INTERRUPT_InterruptManager
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           	psect	text41
  9076  002F74                     __ptext41:
  9077                           	opt stack 0
  9078  002F74                     _TMR2_ISR:
  9079                           	opt stack 24
  9080                           
  9081                           ;incstack = 0
  9082  002F74  0012               	return		;funcret
  9083  002F76                     __end_of_TMR2_ISR:
  9084                           	opt stack 0
  9085                           tosu	equ	0xFFF
  9086                           tosh	equ	0xFFE
  9087                           tosl	equ	0xFFD
  9088                           pclatu	equ	0xFFB
  9089                           pclath	equ	0xFFA
  9090                           tblptru	equ	0xFF8
  9091                           tblptrh	equ	0xFF7
  9092                           tblptrl	equ	0xFF6
  9093                           tablat	equ	0xFF5
  9094                           prodh	equ	0xFF4
  9095                           prodl	equ	0xFF3
  9096                           intcon	equ	0xFF2
  9097                           intcon2	equ	0xFF1
  9098                           intcon3	equ	0xFF0
  9099                           postinc0	equ	0xFEE
  9100                           fsr0h	equ	0xFEA
  9101                           fsr0l	equ	0xFE9
  9102                           wreg	equ	0xFE8
  9103                           fsr1h	equ	0xFE2
  9104                           fsr1l	equ	0xFE1
  9105                           indf2	equ	0xFDF
  9106                           postinc2	equ	0xFDE
  9107                           postdec2	equ	0xFDD
  9108                           fsr2h	equ	0xFDA
  9109                           fsr2l	equ	0xFD9
  9110                           status	equ	0xFD8
  9111                           
  9112 ;; *************** function _TMR1_ISR *****************
  9113 ;; Defined at:
  9114 ;;		line 151 in file "tmr1.c"
  9115 ;; Parameters:    Size  Location     Type
  9116 ;;		None
  9117 ;; Auto vars:     Size  Location     Type
  9118 ;;		None
  9119 ;; Return value:  Size  Location     Type
  9120 ;;                  1    wreg      void 
  9121 ;; Registers used:
  9122 ;;		None
  9123 ;; Tracked objects:
  9124 ;;		On entry : 0/0
  9125 ;;		On exit  : 0/0
  9126 ;;		Unchanged: 0/0
  9127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9128 ;;      Params:         0       0       0       0       0       0       0       0       0
  9129 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9130 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9131 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9132 ;;Total ram usage:        0 bytes
  9133 ;; Hardware stack levels used:    1
  9134 ;; This function calls:
  9135 ;;		Nothing
  9136 ;; This function is called by:
  9137 ;;		_INTERRUPT_InterruptManager
  9138 ;; This function uses a non-reentrant model
  9139 ;;
  9140                           
  9141                           	psect	text42
  9142  002F76                     __ptext42:
  9143                           	opt stack 0
  9144  002F76                     _TMR1_ISR:
  9145                           	opt stack 24
  9146                           
  9147                           ;incstack = 0
  9148  002F76  0012               	return		;funcret
  9149  002F78                     __end_of_TMR1_ISR:
  9150                           	opt stack 0
  9151                           tosu	equ	0xFFF
  9152                           tosh	equ	0xFFE
  9153                           tosl	equ	0xFFD
  9154                           pclatu	equ	0xFFB
  9155                           pclath	equ	0xFFA
  9156                           tblptru	equ	0xFF8
  9157                           tblptrh	equ	0xFF7
  9158                           tblptrl	equ	0xFF6
  9159                           tablat	equ	0xFF5
  9160                           prodh	equ	0xFF4
  9161                           prodl	equ	0xFF3
  9162                           intcon	equ	0xFF2
  9163                           intcon2	equ	0xFF1
  9164                           intcon3	equ	0xFF0
  9165                           postinc0	equ	0xFEE
  9166                           fsr0h	equ	0xFEA
  9167                           fsr0l	equ	0xFE9
  9168                           wreg	equ	0xFE8
  9169                           fsr1h	equ	0xFE2
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           fsr2h	equ	0xFDA
  9175                           fsr2l	equ	0xFD9
  9176                           status	equ	0xFD8
  9177                           
  9178 ;; *************** function _TMR0_ISR *****************
  9179 ;; Defined at:
  9180 ;;		line 150 in file "tmr0.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;		None
  9183 ;; Auto vars:     Size  Location     Type
  9184 ;;		None
  9185 ;; Return value:  Size  Location     Type
  9186 ;;                  1    wreg      void 
  9187 ;; Registers used:
  9188 ;;		wreg, status,2, status,0, cstack
  9189 ;; Tracked objects:
  9190 ;;		On entry : 0/0
  9191 ;;		On exit  : 0/0
  9192 ;;		Unchanged: 0/0
  9193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9194 ;;      Params:         0       0       0       0       0       0       0       0       0
  9195 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9196 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9197 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9198 ;;Total ram usage:        0 bytes
  9199 ;; Hardware stack levels used:    1
  9200 ;; Hardware stack levels required when called:    1
  9201 ;; This function calls:
  9202 ;;		_TMR0_Reload8bit
  9203 ;; This function is called by:
  9204 ;;		_INTERRUPT_InterruptManager
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text43
  9209  002F20                     __ptext43:
  9210                           	opt stack 0
  9211  002F20                     _TMR0_ISR:
  9212                           	opt stack 23
  9213                           
  9214                           ;tmr0.c: 154: TMR0_Reload8bit();
  9215                           
  9216                           ;incstack = 0
  9217  002F20  ECB0  F017         	call	_TMR0_Reload8bit	;wreg free
  9218                           
  9219                           ;tmr0.c: 156: Timer0_Counter++;
  9220  002F24  2A3B               	incf	_Timer0_Counter,f,c
  9221                           
  9222                           ;tmr0.c: 157: Timer0_Flag = 1;
  9223  002F26  0E01               	movlw	1
  9224  002F28  6E3A               	movwf	_Timer0_Flag,c
  9225  002F2A  0012               	return		;funcret
  9226  002F2C                     __end_of_TMR0_ISR:
  9227                           	opt stack 0
  9228                           tosu	equ	0xFFF
  9229                           tosh	equ	0xFFE
  9230                           tosl	equ	0xFFD
  9231                           pclatu	equ	0xFFB
  9232                           pclath	equ	0xFFA
  9233                           tblptru	equ	0xFF8
  9234                           tblptrh	equ	0xFF7
  9235                           tblptrl	equ	0xFF6
  9236                           tablat	equ	0xFF5
  9237                           prodh	equ	0xFF4
  9238                           prodl	equ	0xFF3
  9239                           intcon	equ	0xFF2
  9240                           intcon2	equ	0xFF1
  9241                           intcon3	equ	0xFF0
  9242                           postinc0	equ	0xFEE
  9243                           fsr0h	equ	0xFEA
  9244                           fsr0l	equ	0xFE9
  9245                           wreg	equ	0xFE8
  9246                           fsr1h	equ	0xFE2
  9247                           fsr1l	equ	0xFE1
  9248                           indf2	equ	0xFDF
  9249                           postinc2	equ	0xFDE
  9250                           postdec2	equ	0xFDD
  9251                           fsr2h	equ	0xFDA
  9252                           fsr2l	equ	0xFD9
  9253                           status	equ	0xFD8
  9254                           
  9255 ;; *************** function _TMR0_Reload8bit *****************
  9256 ;; Defined at:
  9257 ;;		line 113 in file "tmr0.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;		None
  9260 ;; Auto vars:     Size  Location     Type
  9261 ;;		None
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  1    wreg      void 
  9264 ;; Registers used:
  9265 ;;		None
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9271 ;;      Params:         0       0       0       0       0       0       0       0       0
  9272 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9274 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9275 ;;Total ram usage:        0 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; This function calls:
  9278 ;;		Nothing
  9279 ;; This function is called by:
  9280 ;;		_TMR0_ISR
  9281 ;; This function uses a non-reentrant model
  9282 ;;
  9283                           
  9284                           	psect	text44
  9285  002F60                     __ptext44:
  9286                           	opt stack 0
  9287  002F60                     _TMR0_Reload8bit:
  9288                           	opt stack 23
  9289                           
  9290                           ;tmr0.c: 116: TMR0L = timer0ReloadVal8bit;
  9291                           
  9292                           ;incstack = 0
  9293  002F60  C030  FFD6         	movff	_timer0ReloadVal8bit,4054	;volatile
  9294  002F64  0012               	return		;funcret
  9295  002F66                     __end_of_TMR0_Reload8bit:
  9296                           	opt stack 0
  9297                           tosu	equ	0xFFF
  9298                           tosh	equ	0xFFE
  9299                           tosl	equ	0xFFD
  9300                           pclatu	equ	0xFFB
  9301                           pclath	equ	0xFFA
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           intcon	equ	0xFF2
  9309                           intcon2	equ	0xFF1
  9310                           intcon3	equ	0xFF0
  9311                           postinc0	equ	0xFEE
  9312                           fsr0h	equ	0xFEA
  9313                           fsr0l	equ	0xFE9
  9314                           wreg	equ	0xFE8
  9315                           fsr1h	equ	0xFE2
  9316                           fsr1l	equ	0xFE1
  9317                           indf2	equ	0xFDF
  9318                           postinc2	equ	0xFDE
  9319                           postdec2	equ	0xFDD
  9320                           fsr2h	equ	0xFDA
  9321                           fsr2l	equ	0xFD9
  9322                           status	equ	0xFD8
  9323                           
  9324 ;; *************** function _PIN_MANAGER_IOC *****************
  9325 ;; Defined at:
  9326 ;;		line 18 in file "pin_manager.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;		None
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;		None
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  1    wreg      void 
  9333 ;; Registers used:
  9334 ;;		None
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0
  9341 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9342 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9343 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9344 ;;Total ram usage:        0 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		_INTERRUPT_InterruptManager
  9350 ;; This function uses a non-reentrant model
  9351 ;;
  9352                           
  9353                           	psect	text45
  9354  002F78                     __ptext45:
  9355                           	opt stack 0
  9356  002F78                     _PIN_MANAGER_IOC:
  9357                           	opt stack 24
  9358                           
  9359                           ;incstack = 0
  9360  002F78  0012               	return		;funcret
  9361  002F7A                     __end_of_PIN_MANAGER_IOC:
  9362                           	opt stack 0
  9363                           tosu	equ	0xFFF
  9364                           tosh	equ	0xFFE
  9365                           tosl	equ	0xFFD
  9366                           pclatu	equ	0xFFB
  9367                           pclath	equ	0xFFA
  9368                           tblptru	equ	0xFF8
  9369                           tblptrh	equ	0xFF7
  9370                           tblptrl	equ	0xFF6
  9371                           tablat	equ	0xFF5
  9372                           prodh	equ	0xFF4
  9373                           prodl	equ	0xFF3
  9374                           intcon	equ	0xFF2
  9375                           intcon2	equ	0xFF1
  9376                           intcon3	equ	0xFF0
  9377                           postinc0	equ	0xFEE
  9378                           fsr0h	equ	0xFEA
  9379                           fsr0l	equ	0xFE9
  9380                           wreg	equ	0xFE8
  9381                           fsr1h	equ	0xFE2
  9382                           fsr1l	equ	0xFE1
  9383                           indf2	equ	0xFDF
  9384                           postinc2	equ	0xFDE
  9385                           postdec2	equ	0xFDD
  9386                           fsr2h	equ	0xFDA
  9387                           fsr2l	equ	0xFD9
  9388                           status	equ	0xFD8
  9389                           
  9390 ;; *************** function _PIN_MANAGER_INT2 *****************
  9391 ;; Defined at:
  9392 ;;		line 46 in file "pin_manager.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;		None
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;		None
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  1    wreg      void 
  9399 ;; Registers used:
  9400 ;;		None
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9406 ;;      Params:         0       0       0       0       0       0       0       0       0
  9407 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9408 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9409 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9410 ;;Total ram usage:        0 bytes
  9411 ;; Hardware stack levels used:    1
  9412 ;; This function calls:
  9413 ;;		Nothing
  9414 ;; This function is called by:
  9415 ;;		_INTERRUPT_InterruptManager
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           	psect	text46
  9420  002F7A                     __ptext46:
  9421                           	opt stack 0
  9422  002F7A                     _PIN_MANAGER_INT2:
  9423                           	opt stack 24
  9424                           
  9425                           ;incstack = 0
  9426  002F7A  0012               	return		;funcret
  9427  002F7C                     __end_of_PIN_MANAGER_INT2:
  9428                           	opt stack 0
  9429                           tosu	equ	0xFFF
  9430                           tosh	equ	0xFFE
  9431                           tosl	equ	0xFFD
  9432                           pclatu	equ	0xFFB
  9433                           pclath	equ	0xFFA
  9434                           tblptru	equ	0xFF8
  9435                           tblptrh	equ	0xFF7
  9436                           tblptrl	equ	0xFF6
  9437                           tablat	equ	0xFF5
  9438                           prodh	equ	0xFF4
  9439                           prodl	equ	0xFF3
  9440                           intcon	equ	0xFF2
  9441                           intcon2	equ	0xFF1
  9442                           intcon3	equ	0xFF0
  9443                           postinc0	equ	0xFEE
  9444                           fsr0h	equ	0xFEA
  9445                           fsr0l	equ	0xFE9
  9446                           wreg	equ	0xFE8
  9447                           fsr1h	equ	0xFE2
  9448                           fsr1l	equ	0xFE1
  9449                           indf2	equ	0xFDF
  9450                           postinc2	equ	0xFDE
  9451                           postdec2	equ	0xFDD
  9452                           fsr2h	equ	0xFDA
  9453                           fsr2l	equ	0xFD9
  9454                           status	equ	0xFD8
  9455                           
  9456 ;; *************** function _PIN_MANAGER_INT1 *****************
  9457 ;; Defined at:
  9458 ;;		line 42 in file "pin_manager.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;		None
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;		None
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  1    wreg      void 
  9465 ;; Registers used:
  9466 ;;		None
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9472 ;;      Params:         0       0       0       0       0       0       0       0       0
  9473 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9474 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9475 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9476 ;;Total ram usage:        0 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; This function calls:
  9479 ;;		Nothing
  9480 ;; This function is called by:
  9481 ;;		_INTERRUPT_InterruptManager
  9482 ;; This function uses a non-reentrant model
  9483 ;;
  9484                           
  9485                           	psect	text47
  9486  002F7C                     __ptext47:
  9487                           	opt stack 0
  9488  002F7C                     _PIN_MANAGER_INT1:
  9489                           	opt stack 24
  9490                           
  9491                           ;incstack = 0
  9492  002F7C  0012               	return		;funcret
  9493  002F7E                     __end_of_PIN_MANAGER_INT1:
  9494                           	opt stack 0
  9495                           tosu	equ	0xFFF
  9496                           tosh	equ	0xFFE
  9497                           tosl	equ	0xFFD
  9498                           pclatu	equ	0xFFB
  9499                           pclath	equ	0xFFA
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           intcon	equ	0xFF2
  9507                           intcon2	equ	0xFF1
  9508                           intcon3	equ	0xFF0
  9509                           postinc0	equ	0xFEE
  9510                           fsr0h	equ	0xFEA
  9511                           fsr0l	equ	0xFE9
  9512                           wreg	equ	0xFE8
  9513                           fsr1h	equ	0xFE2
  9514                           fsr1l	equ	0xFE1
  9515                           indf2	equ	0xFDF
  9516                           postinc2	equ	0xFDE
  9517                           postdec2	equ	0xFDD
  9518                           fsr2h	equ	0xFDA
  9519                           fsr2l	equ	0xFD9
  9520                           status	equ	0xFD8
  9521                           
  9522 ;; *************** function _PIN_MANAGER_INT0 *****************
  9523 ;; Defined at:
  9524 ;;		line 24 in file "pin_manager.c"
  9525 ;; Parameters:    Size  Location     Type
  9526 ;;		None
  9527 ;; Auto vars:     Size  Location     Type
  9528 ;;		None
  9529 ;; Return value:  Size  Location     Type
  9530 ;;                  1    wreg      void 
  9531 ;; Registers used:
  9532 ;;		wreg, status,2, status,0, cstack
  9533 ;; Tracked objects:
  9534 ;;		On entry : 0/0
  9535 ;;		On exit  : 0/0
  9536 ;;		Unchanged: 0/0
  9537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9538 ;;      Params:         0       0       0       0       0       0       0       0       0
  9539 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9540 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9541 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9542 ;;Total ram usage:        1 bytes
  9543 ;; Hardware stack levels used:    1
  9544 ;; Hardware stack levels required when called:    2
  9545 ;; This function calls:
  9546 ;;		_TMR0_Read8bitTimer
  9547 ;;		_TMR0_StopTimer
  9548 ;;		_TMR0_Write8bitTimer
  9549 ;;		___lwtoft
  9550 ;;		i2_TMR0_StartTimer
  9551 ;; This function is called by:
  9552 ;;		_INTERRUPT_InterruptManager
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           	psect	text48
  9557  002B98                     __ptext48:
  9558                           	opt stack 0
  9559  002B98                     _PIN_MANAGER_INT0:
  9560                           	opt stack 22
  9561                           
  9562                           ;pin_manager.c: 26: if(INTCON2bits.INTEDG0==1)
  9563                           
  9564                           ;incstack = 0
  9565  002B98  ACF1               	btfss	intcon2,6,c	;volatile
  9566  002B9A  D007               	goto	i2l777
  9567                           
  9568                           ;pin_manager.c: 27: {
  9569                           ;pin_manager.c: 28: TMR0_Write8bitTimer(1);
  9570  002B9C  0E01               	movlw	1
  9571  002B9E  ECA4  F017         	call	_TMR0_Write8bitTimer
  9572                           
  9573                           ;pin_manager.c: 29: TMR0_StartTimer();
  9574  002BA2  ECB5  F017         	call	i2_TMR0_StartTimer	;wreg free
  9575                           
  9576                           ;pin_manager.c: 30: INTCON2bits.INTEDG0=0;
  9577  002BA6  9CF1               	bcf	intcon2,6,c	;volatile
  9578                           
  9579                           ;pin_manager.c: 31: }
  9580  002BA8  0012               	return	
  9581  002BAA                     i2l777:
  9582                           
  9583                           ;pin_manager.c: 32: else
  9584                           ;pin_manager.c: 33: {
  9585                           ;pin_manager.c: 34: TMR0_StopTimer();
  9586  002BAA  ECB7  F017         	call	_TMR0_StopTimer	;wreg free
  9587                           
  9588                           ;pin_manager.c: 35: t=TMR0_Read8bitTimer();
  9589  002BAE  ECA8  F017         	call	_TMR0_Read8bitTimer	;wreg free
  9590  002BB2  6E0C               	movwf	??_PIN_MANAGER_INT0& (0+255),c
  9591  002BB4  500C               	movf	??_PIN_MANAGER_INT0,w,c
  9592  002BB6  0100               	movlb	0	; () banked
  9593  002BB8  6FDE               	movwf	_t& (0+255),b
  9594  002BBA  6BDF               	clrf	(_t+1)& (0+255),b
  9595                           
  9596                           ; BSR set to: 0
  9597                           ;pin_manager.c: 36: distancia=t;
  9598  002BBC  C0DE  F009         	movff	_t,___lwtoft@c
  9599  002BC0  C0DF  F00A         	movff	_t+1,___lwtoft@c+1
  9600  002BC4  EC26  F017         	call	___lwtoft	;wreg free
  9601  002BC8  C009  F0D7         	movff	?___lwtoft,_distancia
  9602  002BCC  C00A  F0D8         	movff	?___lwtoft+1,_distancia+1
  9603  002BD0  C00B  F0D9         	movff	?___lwtoft+2,_distancia+2
  9604                           
  9605                           ;pin_manager.c: 38: INTCON2bits.INTEDG0=1;
  9606  002BD4  8CF1               	bsf	intcon2,6,c	;volatile
  9607  002BD6  0012               	return	
  9608  002BD8                     __end_of_PIN_MANAGER_INT0:
  9609                           	opt stack 0
  9610                           tosu	equ	0xFFF
  9611                           tosh	equ	0xFFE
  9612                           tosl	equ	0xFFD
  9613                           pclatu	equ	0xFFB
  9614                           pclath	equ	0xFFA
  9615                           tblptru	equ	0xFF8
  9616                           tblptrh	equ	0xFF7
  9617                           tblptrl	equ	0xFF6
  9618                           tablat	equ	0xFF5
  9619                           prodh	equ	0xFF4
  9620                           prodl	equ	0xFF3
  9621                           intcon	equ	0xFF2
  9622                           intcon2	equ	0xFF1
  9623                           intcon3	equ	0xFF0
  9624                           postinc0	equ	0xFEE
  9625                           fsr0h	equ	0xFEA
  9626                           fsr0l	equ	0xFE9
  9627                           wreg	equ	0xFE8
  9628                           fsr1h	equ	0xFE2
  9629                           fsr1l	equ	0xFE1
  9630                           indf2	equ	0xFDF
  9631                           postinc2	equ	0xFDE
  9632                           postdec2	equ	0xFDD
  9633                           fsr2h	equ	0xFDA
  9634                           fsr2l	equ	0xFD9
  9635                           status	equ	0xFD8
  9636                           
  9637 ;; *************** function i2_TMR0_StartTimer *****************
  9638 ;; Defined at:
  9639 ;;		line 84 in file "tmr0.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;		None
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;		None
  9644 ;; Return value:  Size  Location     Type
  9645 ;;                  1    wreg      void 
  9646 ;; Registers used:
  9647 ;;		None
  9648 ;; Tracked objects:
  9649 ;;		On entry : 0/0
  9650 ;;		On exit  : 0/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9653 ;;      Params:         0       0       0       0       0       0       0       0       0
  9654 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9655 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9656 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9657 ;;Total ram usage:        0 bytes
  9658 ;; Hardware stack levels used:    1
  9659 ;; This function calls:
  9660 ;;		Nothing
  9661 ;; This function is called by:
  9662 ;;		_PIN_MANAGER_INT0
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           	psect	text49
  9667  002F6A                     __ptext49:
  9668                           	opt stack 0
  9669  002F6A                     i2_TMR0_StartTimer:
  9670                           	opt stack 23
  9671                           
  9672                           ;tmr0.c: 87: T0CONbits.TMR0ON = 1;
  9673                           
  9674                           ;incstack = 0
  9675  002F6A  8ED5               	bsf	4053,7,c	;volatile
  9676  002F6C  0012               	return		;funcret
  9677  002F6E                     __end_ofi2_TMR0_StartTimer:
  9678                           	opt stack 0
  9679                           tosu	equ	0xFFF
  9680                           tosh	equ	0xFFE
  9681                           tosl	equ	0xFFD
  9682                           pclatu	equ	0xFFB
  9683                           pclath	equ	0xFFA
  9684                           tblptru	equ	0xFF8
  9685                           tblptrh	equ	0xFF7
  9686                           tblptrl	equ	0xFF6
  9687                           tablat	equ	0xFF5
  9688                           prodh	equ	0xFF4
  9689                           prodl	equ	0xFF3
  9690                           intcon	equ	0xFF2
  9691                           intcon2	equ	0xFF1
  9692                           intcon3	equ	0xFF0
  9693                           postinc0	equ	0xFEE
  9694                           fsr0h	equ	0xFEA
  9695                           fsr0l	equ	0xFE9
  9696                           wreg	equ	0xFE8
  9697                           fsr1h	equ	0xFE2
  9698                           fsr1l	equ	0xFE1
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           fsr2h	equ	0xFDA
  9703                           fsr2l	equ	0xFD9
  9704                           status	equ	0xFD8
  9705                           
  9706 ;; *************** function ___lwtoft *****************
  9707 ;; Defined at:
  9708 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwtoft.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;  c               2    8[COMRAM] unsigned int 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;		None
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  3    8[COMRAM] float 
  9715 ;; Registers used:
  9716 ;;		wreg, status,2, status,0, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9722 ;;      Params:         3       0       0       0       0       0       0       0       0
  9723 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9724 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9725 ;;      Totals:         3       0       0       0       0       0       0       0       0
  9726 ;;Total ram usage:        3 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    1
  9729 ;; This function calls:
  9730 ;;		i2___ftpack
  9731 ;; This function is called by:
  9732 ;;		_PIN_MANAGER_INT0
  9733 ;; This function uses a non-reentrant model
  9734 ;;
  9735                           
  9736                           	psect	text50
  9737  002E4C                     __ptext50:
  9738                           	opt stack 0
  9739  002E4C                     ___lwtoft:
  9740                           	opt stack 22
  9741                           
  9742                           ;incstack = 0
  9743  002E4C  C009  F001         	movff	___lwtoft@c,i2___ftpack@arg
  9744  002E50  C00A  F002         	movff	___lwtoft@c+1,i2___ftpack@arg+1
  9745  002E54  6A03               	clrf	i2___ftpack@arg+2,c
  9746  002E56  0E8E               	movlw	142
  9747  002E58  6E04               	movwf	i2___ftpack@exp,c
  9748  002E5A  0E00               	movlw	0
  9749  002E5C  6E05               	movwf	i2___ftpack@sign,c
  9750  002E5E  ECF5  F013         	call	i2___ftpack	;wreg free
  9751  002E62  C001  F009         	movff	?i2___ftpack,?___lwtoft
  9752  002E66  C002  F00A         	movff	?i2___ftpack+1,?___lwtoft+1
  9753  002E6A  C003  F00B         	movff	?i2___ftpack+2,?___lwtoft+2
  9754  002E6E  0012               	return	
  9755  002E70                     __end_of___lwtoft:
  9756                           	opt stack 0
  9757                           tosu	equ	0xFFF
  9758                           tosh	equ	0xFFE
  9759                           tosl	equ	0xFFD
  9760                           pclatu	equ	0xFFB
  9761                           pclath	equ	0xFFA
  9762                           tblptru	equ	0xFF8
  9763                           tblptrh	equ	0xFF7
  9764                           tblptrl	equ	0xFF6
  9765                           tablat	equ	0xFF5
  9766                           prodh	equ	0xFF4
  9767                           prodl	equ	0xFF3
  9768                           intcon	equ	0xFF2
  9769                           intcon2	equ	0xFF1
  9770                           intcon3	equ	0xFF0
  9771                           postinc0	equ	0xFEE
  9772                           fsr0h	equ	0xFEA
  9773                           fsr0l	equ	0xFE9
  9774                           wreg	equ	0xFE8
  9775                           fsr1h	equ	0xFE2
  9776                           fsr1l	equ	0xFE1
  9777                           indf2	equ	0xFDF
  9778                           postinc2	equ	0xFDE
  9779                           postdec2	equ	0xFDD
  9780                           fsr2h	equ	0xFDA
  9781                           fsr2l	equ	0xFD9
  9782                           status	equ	0xFD8
  9783                           
  9784 ;; *************** function i2___ftpack *****************
  9785 ;; Defined at:
  9786 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\float.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;  arg             3    0[COMRAM] unsigned um
  9789 ;;  exp             1    3[COMRAM] unsigned char 
  9790 ;;  sign            1    4[COMRAM] unsigned char 
  9791 ;; Auto vars:     Size  Location     Type
  9792 ;;		None
  9793 ;; Return value:  Size  Location     Type
  9794 ;;                  3    0[COMRAM] float 
  9795 ;; Registers used:
  9796 ;;		wreg, status,2, status,0
  9797 ;; Tracked objects:
  9798 ;;		On entry : 0/0
  9799 ;;		On exit  : 0/0
  9800 ;;		Unchanged: 0/0
  9801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9802 ;;      Params:         5       0       0       0       0       0       0       0       0
  9803 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9804 ;;      Temps:          3       0       0       0       0       0       0       0       0
  9805 ;;      Totals:         8       0       0       0       0       0       0       0       0
  9806 ;;Total ram usage:        8 bytes
  9807 ;; Hardware stack levels used:    1
  9808 ;; This function calls:
  9809 ;;		Nothing
  9810 ;; This function is called by:
  9811 ;;		___lwtoft
  9812 ;; This function uses a non-reentrant model
  9813 ;;
  9814                           
  9815                           	psect	text51
  9816  0027EA                     __ptext51:
  9817                           	opt stack 0
  9818  0027EA                     i2___ftpack:
  9819                           	opt stack 22
  9820                           
  9821                           ;incstack = 0
  9822  0027EA  5004               	movf	i2___ftpack@exp,w,c
  9823  0027EC  B4D8               	btfsc	status,2,c
  9824  0027EE  D005               	goto	i2u406_40
  9825  0027F0  5001               	movf	i2___ftpack@arg,w,c
  9826  0027F2  1002               	iorwf	i2___ftpack@arg+1,w,c
  9827  0027F4  1003               	iorwf	i2___ftpack@arg+2,w,c
  9828  0027F6  A4D8               	btfss	status,2,c
  9829  0027F8  D00C               	goto	i2l1893
  9830  0027FA                     i2u406_40:
  9831  0027FA  0E00               	movlw	0
  9832  0027FC  6E01               	movwf	?i2___ftpack,c
  9833  0027FE  0E00               	movlw	0
  9834  002800  6E02               	movwf	?i2___ftpack+1,c
  9835  002802  0E00               	movlw	0
  9836  002804  6E03               	movwf	?i2___ftpack+2,c
  9837  002806  0012               	return	
  9838  002808  2A04               	incf	i2___ftpack@exp,f,c
  9839  00280A  90D8               	bcf	status,0,c
  9840  00280C  3203               	rrcf	i2___ftpack@arg+2,f,c
  9841  00280E  3202               	rrcf	i2___ftpack@arg+1,f,c
  9842  002810  3201               	rrcf	i2___ftpack@arg,f,c
  9843  002812                     i2l1893:
  9844  002812  0E00               	movlw	0
  9845  002814  1401               	andwf	i2___ftpack@arg,w,c
  9846  002816  6E06               	movwf	??i2___ftpack& (0+255),c
  9847  002818  0E00               	movlw	0
  9848  00281A  1402               	andwf	i2___ftpack@arg+1,w,c
  9849  00281C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  9850  00281E  0EFE               	movlw	254
  9851  002820  1403               	andwf	i2___ftpack@arg+2,w,c
  9852  002822  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9853  002824  5006               	movf	??i2___ftpack,w,c
  9854  002826  1007               	iorwf	??i2___ftpack+1,w,c
  9855  002828  1008               	iorwf	??i2___ftpack+2,w,c
  9856  00282A  B4D8               	btfsc	status,2,c
  9857  00282C  D00C               	goto	i2l1896
  9858  00282E  D7EC               	goto	i2l1894
  9859  002830  2A04               	incf	i2___ftpack@exp,f,c
  9860  002832  0E01               	movlw	1
  9861  002834  2601               	addwf	i2___ftpack@arg,f,c
  9862  002836  0E00               	movlw	0
  9863  002838  2202               	addwfc	i2___ftpack@arg+1,f,c
  9864  00283A  0E00               	movlw	0
  9865  00283C  2203               	addwfc	i2___ftpack@arg+2,f,c
  9866  00283E  90D8               	bcf	status,0,c
  9867  002840  3203               	rrcf	i2___ftpack@arg+2,f,c
  9868  002842  3202               	rrcf	i2___ftpack@arg+1,f,c
  9869  002844  3201               	rrcf	i2___ftpack@arg,f,c
  9870  002846                     i2l1896:
  9871  002846  0E00               	movlw	0
  9872  002848  1401               	andwf	i2___ftpack@arg,w,c
  9873  00284A  6E06               	movwf	??i2___ftpack& (0+255),c
  9874  00284C  0E00               	movlw	0
  9875  00284E  1402               	andwf	i2___ftpack@arg+1,w,c
  9876  002850  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  9877  002852  0EFF               	movlw	255
  9878  002854  1403               	andwf	i2___ftpack@arg+2,w,c
  9879  002856  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9880  002858  5006               	movf	??i2___ftpack,w,c
  9881  00285A  1007               	iorwf	??i2___ftpack+1,w,c
  9882  00285C  1008               	iorwf	??i2___ftpack+2,w,c
  9883  00285E  B4D8               	btfsc	status,2,c
  9884  002860  D006               	goto	i2l1899
  9885  002862  D7E6               	goto	i2l1897
  9886  002864  0604               	decf	i2___ftpack@exp,f,c
  9887  002866  90D8               	bcf	status,0,c
  9888  002868  3601               	rlcf	i2___ftpack@arg,f,c
  9889  00286A  3602               	rlcf	i2___ftpack@arg+1,f,c
  9890  00286C  3603               	rlcf	i2___ftpack@arg+2,f,c
  9891  00286E                     i2l1899:
  9892  00286E  BE02               	btfsc	i2___ftpack@arg+1,7,c
  9893  002870  D003               	goto	i2u410_40
  9894  002872  0E02               	movlw	2
  9895  002874  6004               	cpfslt	i2___ftpack@exp,c
  9896  002876  D7F6               	goto	i2l1900
  9897  002878                     i2u410_40:
  9898  002878  A004               	btfss	i2___ftpack@exp,0,c
  9899  00287A  9E02               	bcf	i2___ftpack@arg+1,7,c
  9900  00287C  90D8               	bcf	status,0,c
  9901  00287E  3204               	rrcf	i2___ftpack@exp,f,c
  9902  002880  5004               	movf	i2___ftpack@exp,w,c
  9903  002882  1203               	iorwf	i2___ftpack@arg+2,f,c
  9904  002884  5005               	movf	i2___ftpack@sign,w,c
  9905  002886  A4D8               	btfss	status,2,c
  9906  002888  8E03               	bsf	i2___ftpack@arg+2,7,c
  9907  00288A  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  9908  00288E  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  9909  002892  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  9910  002896  0012               	return	
  9911  002898                     __end_ofi2___ftpack:
  9912                           	opt stack 0
  9913                           tosu	equ	0xFFF
  9914                           tosh	equ	0xFFE
  9915                           tosl	equ	0xFFD
  9916                           pclatu	equ	0xFFB
  9917                           pclath	equ	0xFFA
  9918                           tblptru	equ	0xFF8
  9919                           tblptrh	equ	0xFF7
  9920                           tblptrl	equ	0xFF6
  9921                           tablat	equ	0xFF5
  9922                           prodh	equ	0xFF4
  9923                           prodl	equ	0xFF3
  9924                           intcon	equ	0xFF2
  9925                           intcon2	equ	0xFF1
  9926                           intcon3	equ	0xFF0
  9927                           postinc0	equ	0xFEE
  9928                           fsr0h	equ	0xFEA
  9929                           fsr0l	equ	0xFE9
  9930                           wreg	equ	0xFE8
  9931                           fsr1h	equ	0xFE2
  9932                           fsr1l	equ	0xFE1
  9933                           indf2	equ	0xFDF
  9934                           postinc2	equ	0xFDE
  9935                           postdec2	equ	0xFDD
  9936                           fsr2h	equ	0xFDA
  9937                           fsr2l	equ	0xFD9
  9938                           status	equ	0xFD8
  9939                           
  9940 ;; *************** function _TMR0_Write8bitTimer *****************
  9941 ;; Defined at:
  9942 ;;		line 107 in file "tmr0.c"
  9943 ;; Parameters:    Size  Location     Type
  9944 ;;  timerVal        1    wreg     unsigned char 
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;  timerVal        1    0[COMRAM] unsigned char 
  9947 ;; Return value:  Size  Location     Type
  9948 ;;                  1    wreg      void 
  9949 ;; Registers used:
  9950 ;;		wreg
  9951 ;; Tracked objects:
  9952 ;;		On entry : 0/0
  9953 ;;		On exit  : 0/0
  9954 ;;		Unchanged: 0/0
  9955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9956 ;;      Params:         0       0       0       0       0       0       0       0       0
  9957 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9958 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9959 ;;      Totals:         1       0       0       0       0       0       0       0       0
  9960 ;;Total ram usage:        1 bytes
  9961 ;; Hardware stack levels used:    1
  9962 ;; This function calls:
  9963 ;;		Nothing
  9964 ;; This function is called by:
  9965 ;;		_PIN_MANAGER_INT0
  9966 ;; This function uses a non-reentrant model
  9967 ;;
  9968                           
  9969                           	psect	text52
  9970  002F48                     __ptext52:
  9971                           	opt stack 0
  9972  002F48                     _TMR0_Write8bitTimer:
  9973                           	opt stack 23
  9974                           
  9975                           ;incstack = 0
  9976                           ;TMR0_Write8bitTimer@timerVal stored from wreg
  9977  002F48  6E01               	movwf	TMR0_Write8bitTimer@timerVal,c
  9978                           
  9979                           ;tmr0.c: 110: TMR0L = timerVal;
  9980  002F4A  C001  FFD6         	movff	TMR0_Write8bitTimer@timerVal,4054	;volatile
  9981  002F4E  0012               	return		;funcret
  9982  002F50                     __end_of_TMR0_Write8bitTimer:
  9983                           	opt stack 0
  9984                           tosu	equ	0xFFF
  9985                           tosh	equ	0xFFE
  9986                           tosl	equ	0xFFD
  9987                           pclatu	equ	0xFFB
  9988                           pclath	equ	0xFFA
  9989                           tblptru	equ	0xFF8
  9990                           tblptrh	equ	0xFF7
  9991                           tblptrl	equ	0xFF6
  9992                           tablat	equ	0xFF5
  9993                           prodh	equ	0xFF4
  9994                           prodl	equ	0xFF3
  9995                           intcon	equ	0xFF2
  9996                           intcon2	equ	0xFF1
  9997                           intcon3	equ	0xFF0
  9998                           postinc0	equ	0xFEE
  9999                           fsr0h	equ	0xFEA
 10000                           fsr0l	equ	0xFE9
 10001                           wreg	equ	0xFE8
 10002                           fsr1h	equ	0xFE2
 10003                           fsr1l	equ	0xFE1
 10004                           indf2	equ	0xFDF
 10005                           postinc2	equ	0xFDE
 10006                           postdec2	equ	0xFDD
 10007                           fsr2h	equ	0xFDA
 10008                           fsr2l	equ	0xFD9
 10009                           status	equ	0xFD8
 10010                           
 10011 ;; *************** function _TMR0_StopTimer *****************
 10012 ;; Defined at:
 10013 ;;		line 90 in file "tmr0.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;		None
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;		None
 10018 ;; Return value:  Size  Location     Type
 10019 ;;                  1    wreg      void 
 10020 ;; Registers used:
 10021 ;;		None
 10022 ;; Tracked objects:
 10023 ;;		On entry : 0/0
 10024 ;;		On exit  : 0/0
 10025 ;;		Unchanged: 0/0
 10026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10027 ;;      Params:         0       0       0       0       0       0       0       0       0
 10028 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10029 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10030 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10031 ;;Total ram usage:        0 bytes
 10032 ;; Hardware stack levels used:    1
 10033 ;; This function calls:
 10034 ;;		Nothing
 10035 ;; This function is called by:
 10036 ;;		_PIN_MANAGER_INT0
 10037 ;; This function uses a non-reentrant model
 10038 ;;
 10039                           
 10040                           	psect	text53
 10041  002F6E                     __ptext53:
 10042                           	opt stack 0
 10043  002F6E                     _TMR0_StopTimer:
 10044                           	opt stack 23
 10045                           
 10046                           ;tmr0.c: 93: T0CONbits.TMR0ON = 0;
 10047                           
 10048                           ;incstack = 0
 10049  002F6E  9ED5               	bcf	4053,7,c	;volatile
 10050  002F70  0012               	return		;funcret
 10051  002F72                     __end_of_TMR0_StopTimer:
 10052                           	opt stack 0
 10053                           tosu	equ	0xFFF
 10054                           tosh	equ	0xFFE
 10055                           tosl	equ	0xFFD
 10056                           pclatu	equ	0xFFB
 10057                           pclath	equ	0xFFA
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           intcon	equ	0xFF2
 10065                           intcon2	equ	0xFF1
 10066                           intcon3	equ	0xFF0
 10067                           postinc0	equ	0xFEE
 10068                           fsr0h	equ	0xFEA
 10069                           fsr0l	equ	0xFE9
 10070                           wreg	equ	0xFE8
 10071                           fsr1h	equ	0xFE2
 10072                           fsr1l	equ	0xFE1
 10073                           indf2	equ	0xFDF
 10074                           postinc2	equ	0xFDE
 10075                           postdec2	equ	0xFDD
 10076                           fsr2h	equ	0xFDA
 10077                           fsr2l	equ	0xFD9
 10078                           status	equ	0xFD8
 10079                           
 10080 ;; *************** function _TMR0_Read8bitTimer *****************
 10081 ;; Defined at:
 10082 ;;		line 97 in file "tmr0.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;  readVal         1    0[COMRAM] unsigned char 
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  1    wreg      unsigned char 
 10089 ;; Registers used:
 10090 ;;		wreg, status,2
 10091 ;; Tracked objects:
 10092 ;;		On entry : 0/0
 10093 ;;		On exit  : 0/0
 10094 ;;		Unchanged: 0/0
 10095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0
 10097 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10099 ;;      Totals:         1       0       0       0       0       0       0       0       0
 10100 ;;Total ram usage:        1 bytes
 10101 ;; Hardware stack levels used:    1
 10102 ;; This function calls:
 10103 ;;		Nothing
 10104 ;; This function is called by:
 10105 ;;		_PIN_MANAGER_INT0
 10106 ;; This function uses a non-reentrant model
 10107 ;;
 10108                           
 10109                           	psect	text54
 10110  002F50                     __ptext54:
 10111                           	opt stack 0
 10112  002F50                     _TMR0_Read8bitTimer:
 10113                           	opt stack 23
 10114                           
 10115                           ;tmr0.c: 99: uint8_t readVal;
 10116                           ;tmr0.c: 102: readVal = TMR0L;
 10117                           
 10118                           ;incstack = 0
 10119  002F50  CFD6 F001          	movff	4054,TMR0_Read8bitTimer@readVal	;volatile
 10120                           
 10121                           ;tmr0.c: 104: return readVal;
 10122  002F54  5001               	movf	TMR0_Read8bitTimer@readVal,w,c
 10123  002F56  0012               	return	
 10124  002F58                     __end_of_TMR0_Read8bitTimer:
 10125                           	opt stack 0
 10126                           tosu	equ	0xFFF
 10127                           tosh	equ	0xFFE
 10128                           tosl	equ	0xFFD
 10129                           pclatu	equ	0xFFB
 10130                           pclath	equ	0xFFA
 10131                           tblptru	equ	0xFF8
 10132                           tblptrh	equ	0xFF7
 10133                           tblptrl	equ	0xFF6
 10134                           tablat	equ	0xFF5
 10135                           prodh	equ	0xFF4
 10136                           prodl	equ	0xFF3
 10137                           intcon	equ	0xFF2
 10138                           intcon2	equ	0xFF1
 10139                           intcon3	equ	0xFF0
 10140                           postinc0	equ	0xFEE
 10141                           fsr0h	equ	0xFEA
 10142                           fsr0l	equ	0xFE9
 10143                           wreg	equ	0xFE8
 10144                           fsr1h	equ	0xFE2
 10145                           fsr1l	equ	0xFE1
 10146                           indf2	equ	0xFDF
 10147                           postinc2	equ	0xFDE
 10148                           postdec2	equ	0xFDD
 10149                           fsr2h	equ	0xFDA
 10150                           fsr2l	equ	0xFD9
 10151                           status	equ	0xFD8
 10152                           
 10153 ;; *************** function _MEMORY_ISR *****************
 10154 ;; Defined at:
 10155 ;;		line 198 in file "memory.c"
 10156 ;; Parameters:    Size  Location     Type
 10157 ;;		None
 10158 ;; Auto vars:     Size  Location     Type
 10159 ;;		None
 10160 ;; Return value:  Size  Location     Type
 10161 ;;                  1    wreg      void 
 10162 ;; Registers used:
 10163 ;;		None
 10164 ;; Tracked objects:
 10165 ;;		On entry : 0/0
 10166 ;;		On exit  : 0/0
 10167 ;;		Unchanged: 0/0
 10168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10169 ;;      Params:         0       0       0       0       0       0       0       0       0
 10170 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10171 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10172 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10173 ;;Total ram usage:        0 bytes
 10174 ;; Hardware stack levels used:    1
 10175 ;; This function calls:
 10176 ;;		Nothing
 10177 ;; This function is called by:
 10178 ;;		_INTERRUPT_InterruptManager
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           	psect	text55
 10183  002F7E                     __ptext55:
 10184                           	opt stack 0
 10185  002F7E                     _MEMORY_ISR:
 10186                           	opt stack 24
 10187                           
 10188                           ;incstack = 0
 10189  002F7E  0012               	return		;funcret
 10190  002F80                     __end_of_MEMORY_ISR:
 10191                           	opt stack 0
 10192                           tosu	equ	0xFFF
 10193                           tosh	equ	0xFFE
 10194                           tosl	equ	0xFFD
 10195                           pclatu	equ	0xFFB
 10196                           pclath	equ	0xFFA
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           prodh	equ	0xFF4
 10202                           prodl	equ	0xFF3
 10203                           intcon	equ	0xFF2
 10204                           intcon2	equ	0xFF1
 10205                           intcon3	equ	0xFF0
 10206                           postinc0	equ	0xFEE
 10207                           fsr0h	equ	0xFEA
 10208                           fsr0l	equ	0xFE9
 10209                           wreg	equ	0xFE8
 10210                           fsr1h	equ	0xFE2
 10211                           fsr1l	equ	0xFE1
 10212                           indf2	equ	0xFDF
 10213                           postinc2	equ	0xFDE
 10214                           postdec2	equ	0xFDD
 10215                           fsr2h	equ	0xFDA
 10216                           fsr2l	equ	0xFD9
 10217                           status	equ	0xFD8
 10218                           
 10219 ;; *************** function _I2C1_ISR *****************
 10220 ;; Defined at:
 10221 ;;		line 236 in file "i2c1.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;		None
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;		None
 10226 ;; Return value:  Size  Location     Type
 10227 ;;                  1    wreg      void 
 10228 ;; Registers used:
 10229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10235 ;;      Params:         0       0       0       0       0       0       0       0       0
 10236 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10237 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10238 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10239 ;;Total ram usage:        2 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    1
 10242 ;; This function calls:
 10243 ;;		_I2C1_FunctionComplete
 10244 ;;		_I2C1_Stop
 10245 ;; This function is called by:
 10246 ;;		_INTERRUPT_InterruptManager
 10247 ;; This function uses a non-reentrant model
 10248 ;;
 10249                           
 10250                           	psect	text56
 10251  001A9A                     __ptext56:
 10252                           	opt stack 0
 10253  001A9A                     _I2C1_ISR:
 10254                           	opt stack 23
 10255                           
 10256                           ;i2c1.c: 239: static uint8_t *pi2c_buf_ptr;
 10257                           ;i2c1.c: 240: static uint16_t i2c_address = 0;
 10258                           ;i2c1.c: 241: static uint8_t i2c_bytes_left = 0;
 10259                           ;i2c1.c: 242: static uint8_t i2c_10bit_address_restart = 0;
 10260                           ;i2c1.c: 244: PIR1bits.SSPIF = 0;
 10261                           
 10262                           ;incstack = 0
 10263  001A9A  969E               	bcf	3998,3,c	;volatile
 10264                           
 10265                           ;i2c1.c: 248: if(SSPCON1bits.WCOL)
 10266  001A9C  AEC6               	btfss	4038,7,c	;volatile
 10267  001A9E  D0ED               	goto	i2l380
 10268                           
 10269                           ;i2c1.c: 249: {
 10270                           ;i2c1.c: 251: SSPCON1bits.WCOL = 0;
 10271  001AA0  9EC6               	bcf	4038,7,c	;volatile
 10272                           
 10273                           ;i2c1.c: 253: *(p_i2c1_current->pTrFlag) = I2C1_MESSAGE_FAIL;
 10274  001AA2  0E00               	movlw	0
 10275  001AA4  6E34               	movwf	_i2c1_state,c
 10276                           
 10277                           ;i2c1.c: 256: p_i2c1_current = (0);
 10278  001AA6  0E00               	movlw	0
 10279  001AA8  0100               	movlb	0	; () banked
 10280  001AAA  6FDC               	movwf	_p_i2c1_current& (0+255),b
 10281  001AAC  0E00               	movlw	0
 10282  001AAE  0100               	movlb	0	; () banked
 10283  001AB0  6FDD               	movwf	(_p_i2c1_current+1)& (0+255),b
 10284                           
 10285                           ; BSR set to: 0
 10286                           ;i2c1.c: 258: return;
 10287  001AB2  0012               	return	
 10288  001AB4                     i2l381:
 10289                           
 10290                           ;i2c1.c: 266: if(i2c1_object.trStatus.s.empty != 1)
 10291  001AB4  B225               	btfsc	_i2c1_object+4,1,c
 10292  001AB6  0012               	return	
 10293                           
 10294                           ;i2c1.c: 267: {
 10295                           ;i2c1.c: 269: p_i2c1_current = i2c1_object.pTrHead;
 10296  001AB8  C023  F0DC         	movff	_i2c1_object+2,_p_i2c1_current
 10297  001ABC  C024  F0DD         	movff	_i2c1_object+3,_p_i2c1_current+1
 10298                           
 10299                           ;i2c1.c: 270: i2c1_trb_count = i2c1_object.pTrHead->count;
 10300  001AC0  C023  FFD9         	movff	_i2c1_object+2,fsr2l
 10301  001AC4  C024  FFDA         	movff	_i2c1_object+3,fsr2h
 10302  001AC8  50DF               	movf	indf2,w,c
 10303  001ACA  6E33               	movwf	_i2c1_trb_count,c
 10304                           
 10305                           ;i2c1.c: 271: p_i2c1_trb_current = i2c1_object.pTrHead->ptrb_list;
 10306  001ACC  EE20 F001          	lfsr	2,1
 10307  001AD0  5023               	movf	_i2c1_object+2,w,c
 10308  001AD2  26D9               	addwf	fsr2l,f,c
 10309  001AD4  5024               	movf	_i2c1_object+3,w,c
 10310  001AD6  22DA               	addwfc	fsr2h,f,c
 10311  001AD8  CFDE F02E          	movff	postinc2,_p_i2c1_trb_current
 10312  001ADC  CFDD F02F          	movff	postdec2,_p_i2c1_trb_current+1
 10313                           
 10314                           ;i2c1.c: 273: i2c1_object.pTrHead++;
 10315  001AE0  0E06               	movlw	6
 10316  001AE2  2623               	addwf	_i2c1_object+2,f,c
 10317  001AE4  0E00               	movlw	0
 10318  001AE6  2224               	addwfc	_i2c1_object+3,f,c
 10319                           
 10320                           ;i2c1.c: 276: if(i2c1_object.pTrHead == (i2c1_tr_queue + 1))
 10321  001AE8  0EF9               	movlw	low (_i2c1_tr_queue+6)
 10322  001AEA  1823               	xorwf	_i2c1_object+2,w,c
 10323  001AEC  E108               	bnz	i2l5436
 10324  001AEE  0E00               	movlw	high (_i2c1_tr_queue+6)
 10325  001AF0  1824               	xorwf	_i2c1_object+3,w,c
 10326  001AF2  A4D8               	btfss	status,2,c
 10327  001AF4  D004               	goto	i2l383
 10328                           
 10329                           ;i2c1.c: 277: {
 10330                           ;i2c1.c: 279: i2c1_object.pTrHead = i2c1_tr_queue;
 10331  001AF6  0EF3               	movlw	low _i2c1_tr_queue
 10332  001AF8  6E23               	movwf	_i2c1_object+2,c
 10333  001AFA  0E00               	movlw	high _i2c1_tr_queue
 10334  001AFC  6E24               	movwf	_i2c1_object+3,c
 10335  001AFE                     i2l383:
 10336  001AFE                     i2l5436:
 10337                           
 10338                           ;i2c1.c: 280: }
 10339                           ;i2c1.c: 284: i2c1_object.trStatus.s.full = 0;
 10340  001AFE  9025               	bcf	_i2c1_object+4,0,c
 10341                           
 10342                           ;i2c1.c: 287: if(i2c1_object.pTrHead == i2c1_object.pTrTail)
 10343  001B00  5021               	movf	_i2c1_object,w,c
 10344  001B02  1823               	xorwf	_i2c1_object+2,w,c
 10345  001B04  E104               	bnz	i2l384
 10346  001B06  5022               	movf	_i2c1_object+1,w,c
 10347  001B08  1824               	xorwf	_i2c1_object+3,w,c
 10348  001B0A  B4D8               	btfsc	status,2,c
 10349                           
 10350                           ;i2c1.c: 288: {
 10351                           ;i2c1.c: 290: i2c1_object.trStatus.s.empty = 1;
 10352  001B0C  8225               	bsf	_i2c1_object+4,1,c
 10353  001B0E                     i2l384:
 10354                           
 10355                           ;i2c1.c: 291: }
 10356                           ;i2c1.c: 294: SSPCON2bits.SEN = 1;
 10357  001B0E  80C5               	bsf	4037,0,c	;volatile
 10358                           
 10359                           ;i2c1.c: 297: i2c1_state = S_MASTER_SEND_ADDR;
 10360  001B10  0E02               	movlw	2
 10361  001B12  6E34               	movwf	_i2c1_state,c
 10362                           
 10363                           ;i2c1.c: 298: }
 10364                           ;i2c1.c: 300: break;
 10365  001B14  0012               	return	
 10366  001B16                     i2l386:
 10367                           
 10368                           ;i2c1.c: 307: SSPCON2bits.RSEN = 1;
 10369  001B16  82C5               	bsf	4037,1,c	;volatile
 10370                           
 10371                           ;i2c1.c: 310: i2c1_state = S_MASTER_SEND_ADDR;
 10372  001B18  0E02               	movlw	2
 10373  001B1A  6E34               	movwf	_i2c1_state,c
 10374                           
 10375                           ;i2c1.c: 312: break;
 10376  001B1C  0012               	return	
 10377  001B1E                     i2l387:
 10378                           
 10379                           ;i2c1.c: 316: if(SSPCON2bits.ACKSTAT)
 10380  001B1E  ACC5               	btfss	4037,6,c	;volatile
 10381  001B20  D005               	goto	i2l388
 10382                           
 10383                           ;i2c1.c: 317: {
 10384                           ;i2c1.c: 318: i2c1_object.i2cErrors++;
 10385  001B22  2A27               	incf	_i2c1_object+6,f,c
 10386                           
 10387                           ;i2c1.c: 319: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 10388  001B24  0E04               	movlw	4
 10389  001B26  ECAC  F017         	call	_I2C1_Stop
 10390                           
 10391                           ;i2c1.c: 320: }
 10392  001B2A  0012               	return	
 10393  001B2C                     i2l388:
 10394                           
 10395                           ;i2c1.c: 321: else
 10396                           ;i2c1.c: 322: {
 10397                           ;i2c1.c: 324: SSPBUF = (i2c_address >> 1) & 0x00FF;
 10398  001B2C  90D8               	bcf	status,0,c
 10399  001B2E  303F               	rrcf	I2C1_ISR@i2c_address+1,w,c
 10400  001B30  6E02               	movwf	(??_I2C1_ISR+1)& (0+255),c
 10401  001B32  303E               	rrcf	I2C1_ISR@i2c_address,w,c
 10402  001B34  6E01               	movwf	??_I2C1_ISR& (0+255),c
 10403  001B36  5001               	movf	??_I2C1_ISR,w,c
 10404  001B38  6EC9               	movwf	4041,c	;volatile
 10405                           
 10406                           ;i2c1.c: 327: if(i2c_address & 0x01)
 10407  001B3A  A03E               	btfss	I2C1_ISR@i2c_address,0,c
 10408  001B3C  D003               	goto	i2l390
 10409                           
 10410                           ;i2c1.c: 328: {
 10411                           ;i2c1.c: 331: i2c1_state = S_MASTER_10BIT_RESTART;
 10412  001B3E  0E0B               	movlw	11
 10413  001B40  6E34               	movwf	_i2c1_state,c
 10414                           
 10415                           ;i2c1.c: 332: }
 10416  001B42  0012               	return	
 10417  001B44                     i2l390:
 10418                           
 10419                           ;i2c1.c: 333: else
 10420                           ;i2c1.c: 334: {
 10421                           ;i2c1.c: 336: i2c1_state = S_MASTER_SEND_DATA;
 10422  001B44  0E03               	movlw	3
 10423  001B46  6E34               	movwf	_i2c1_state,c
 10424                           
 10425                           ;i2c1.c: 337: }
 10426                           ;i2c1.c: 338: }
 10427                           ;i2c1.c: 340: break;
 10428  001B48  0012               	return	
 10429  001B4A                     i2l392:
 10430                           
 10431                           ;i2c1.c: 344: if(SSPCON2bits.ACKSTAT)
 10432  001B4A  ACC5               	btfss	4037,6,c	;volatile
 10433  001B4C  D005               	goto	i2l393
 10434                           
 10435                           ;i2c1.c: 345: {
 10436                           ;i2c1.c: 346: i2c1_object.i2cErrors++;
 10437  001B4E  2A27               	incf	_i2c1_object+6,f,c
 10438                           
 10439                           ;i2c1.c: 347: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 10440  001B50  0E04               	movlw	4
 10441  001B52  ECAC  F017         	call	_I2C1_Stop
 10442                           
 10443                           ;i2c1.c: 348: }
 10444  001B56  0012               	return	
 10445  001B58                     i2l393:
 10446                           
 10447                           ;i2c1.c: 349: else
 10448                           ;i2c1.c: 350: {
 10449                           ;i2c1.c: 353: SSPCON2bits.RSEN = 1;
 10450  001B58  82C5               	bsf	4037,1,c	;volatile
 10451                           
 10452                           ;i2c1.c: 357: i2c_address = 0x00F0 | ((i2c_address >> 8) & 0x0006);
 10453  001B5A  C03E  F001         	movff	I2C1_ISR@i2c_address,??_I2C1_ISR
 10454  001B5E  C03F  F002         	movff	I2C1_ISR@i2c_address+1,??_I2C1_ISR+1
 10455  001B62  C002  F001         	movff	??_I2C1_ISR+1,??_I2C1_ISR
 10456  001B66  6A02               	clrf	??_I2C1_ISR+1,c
 10457  001B68  0E06               	movlw	6
 10458  001B6A  1601               	andwf	??_I2C1_ISR,f,c
 10459  001B6C  0E00               	movlw	0
 10460  001B6E  1602               	andwf	??_I2C1_ISR+1,f,c
 10461  001B70  0EF0               	movlw	240
 10462  001B72  1001               	iorwf	??_I2C1_ISR,w,c
 10463  001B74  6E3E               	movwf	I2C1_ISR@i2c_address,c
 10464  001B76  5002               	movf	??_I2C1_ISR+1,w,c
 10465  001B78  6E3F               	movwf	I2C1_ISR@i2c_address+1,c
 10466                           
 10467                           ;i2c1.c: 360: i2c_address |= 0x0001;
 10468  001B7A  803E               	bsf	I2C1_ISR@i2c_address,0,c
 10469                           
 10470                           ;i2c1.c: 363: i2c_10bit_address_restart = 1;
 10471  001B7C  0E01               	movlw	1
 10472  001B7E  6E31               	movwf	I2C1_ISR@i2c_10bit_address_restart,c
 10473                           
 10474                           ;i2c1.c: 366: i2c1_state = S_MASTER_SEND_ADDR;
 10475  001B80  0E02               	movlw	2
 10476  001B82  6E34               	movwf	_i2c1_state,c
 10477                           
 10478                           ;i2c1.c: 367: }
 10479                           ;i2c1.c: 369: break;
 10480  001B84  0012               	return	
 10481  001B86                     
 10482                           ;i2c1.c: 384: if(i2c_10bit_address_restart != 1)
 10483  001B86  0431               	decf	I2C1_ISR@i2c_10bit_address_restart,w,c
 10484  001B88  B4D8               	btfsc	status,2,c
 10485  001B8A  D01A               	goto	i2l397
 10486                           
 10487                           ;i2c1.c: 385: {
 10488                           ;i2c1.c: 387: i2c_address = p_i2c1_trb_current->address;
 10489  001B8C  C02E  FFD9         	movff	_p_i2c1_trb_current,fsr2l
 10490  001B90  C02F  FFDA         	movff	_p_i2c1_trb_current+1,fsr2h
 10491  001B94  CFDE F03E          	movff	postinc2,I2C1_ISR@i2c_address
 10492  001B98  CFDD F03F          	movff	postdec2,I2C1_ISR@i2c_address+1
 10493                           
 10494                           ;i2c1.c: 388: pi2c_buf_ptr = p_i2c1_trb_current->pbuffer;
 10495  001B9C  EE20 F003          	lfsr	2,3
 10496  001BA0  502E               	movf	_p_i2c1_trb_current,w,c
 10497  001BA2  26D9               	addwf	fsr2l,f,c
 10498  001BA4  502F               	movf	_p_i2c1_trb_current+1,w,c
 10499  001BA6  22DA               	addwfc	fsr2h,f,c
 10500  001BA8  CFDE F0DA          	movff	postinc2,I2C1_ISR@pi2c_buf_ptr
 10501  001BAC  CFDD F0DB          	movff	postdec2,I2C1_ISR@pi2c_buf_ptr+1
 10502                           
 10503                           ;i2c1.c: 389: i2c_bytes_left = p_i2c1_trb_current->length;
 10504  001BB0  EE20 F002          	lfsr	2,2
 10505  001BB4  502E               	movf	_p_i2c1_trb_current,w,c
 10506  001BB6  26D9               	addwf	fsr2l,f,c
 10507  001BB8  502F               	movf	_p_i2c1_trb_current+1,w,c
 10508  001BBA  22DA               	addwfc	fsr2h,f,c
 10509  001BBC  50DF               	movf	indf2,w,c
 10510  001BBE  6E32               	movwf	I2C1_ISR@i2c_bytes_left,c
 10511  001BC0                     i2l397:
 10512                           
 10513                           ;i2c1.c: 412: else
 10514                           ;i2c1.c: 413: {
 10515                           ;i2c1.c: 415: SSPBUF = i2c_address;
 10516  001BC0  C03E  FFC9         	movff	I2C1_ISR@i2c_address,4041	;volatile
 10517                           
 10518                           ;i2c1.c: 416: if(i2c_address & 0x01)
 10519  001BC4  A03E               	btfss	I2C1_ISR@i2c_address,0,c
 10520  001BC6  D003               	goto	i2l401
 10521                           
 10522                           ;i2c1.c: 417: {
 10523                           ;i2c1.c: 419: i2c1_state = S_MASTER_ACK_ADDR;
 10524  001BC8  0E05               	movlw	5
 10525  001BCA  6E34               	movwf	_i2c1_state,c
 10526                           
 10527                           ;i2c1.c: 420: }
 10528  001BCC  0012               	return	
 10529  001BCE                     i2l401:
 10530                           
 10531                           ;i2c1.c: 421: else
 10532                           ;i2c1.c: 422: {
 10533                           ;i2c1.c: 424: i2c1_state = S_MASTER_SEND_DATA;
 10534  001BCE  0E03               	movlw	3
 10535  001BD0  6E34               	movwf	_i2c1_state,c
 10536                           
 10537                           ;i2c1.c: 425: }
 10538                           ;i2c1.c: 426: }
 10539                           ;i2c1.c: 427: break;
 10540  001BD2  0012               	return	
 10541  001BD4                     i2l403:
 10542                           
 10543                           ;i2c1.c: 432: if(SSPCON2bits.ACKSTAT)
 10544  001BD4  ACC5               	btfss	4037,6,c	;volatile
 10545  001BD6  D006               	goto	i2l404
 10546                           
 10547                           ;i2c1.c: 433: {
 10548                           ;i2c1.c: 435: i2c1_object.i2cErrors++;
 10549  001BD8  2A27               	incf	_i2c1_object+6,f,c
 10550                           
 10551                           ;i2c1.c: 438: SSPCON2bits.ACKSTAT = 0;
 10552  001BDA  9CC5               	bcf	4037,6,c	;volatile
 10553                           
 10554                           ;i2c1.c: 441: I2C1_Stop(I2C1_DATA_NO_ACK);
 10555  001BDC  0E05               	movlw	5
 10556  001BDE  ECAC  F017         	call	_I2C1_Stop
 10557                           
 10558                           ;i2c1.c: 443: }
 10559  001BE2  0012               	return	
 10560  001BE4                     i2l404:
 10561                           
 10562                           ;i2c1.c: 444: else
 10563                           ;i2c1.c: 445: {
 10564                           ;i2c1.c: 447: if(i2c_bytes_left-- == 0U)
 10565  001BE4  0632               	decf	I2C1_ISR@i2c_bytes_left,f,c
 10566  001BE6  2832               	incf	I2C1_ISR@i2c_bytes_left,w,c
 10567  001BE8  A4D8               	btfss	status,2,c
 10568  001BEA  D00E               	goto	i2l406
 10569                           
 10570                           ;i2c1.c: 448: {
 10571                           ;i2c1.c: 452: p_i2c1_trb_current++;
 10572  001BEC  0E06               	movlw	6
 10573  001BEE  262E               	addwf	_p_i2c1_trb_current,f,c
 10574  001BF0  0E00               	movlw	0
 10575  001BF2  222F               	addwfc	_p_i2c1_trb_current+1,f,c
 10576                           
 10577                           ;i2c1.c: 455: if(--i2c1_trb_count == 0)
 10578  001BF4  2E33               	decfsz	_i2c1_trb_count,f,c
 10579  001BF6  D004               	goto	i2l407
 10580                           
 10581                           ;i2c1.c: 456: {
 10582                           ;i2c1.c: 457: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 10583  001BF8  0E00               	movlw	0
 10584  001BFA  ECAC  F017         	call	_I2C1_Stop
 10585                           
 10586                           ;i2c1.c: 458: }
 10587  001BFE  0012               	return	
 10588  001C00                     i2l407:
 10589                           
 10590                           ;i2c1.c: 459: else
 10591                           ;i2c1.c: 460: {
 10592                           ;i2c1.c: 467: SSPCON2bits.RSEN = 1;
 10593  001C00  82C5               	bsf	4037,1,c	;volatile
 10594                           
 10595                           ;i2c1.c: 470: i2c1_state = S_MASTER_SEND_ADDR;
 10596  001C02  0E02               	movlw	2
 10597  001C04  6E34               	movwf	_i2c1_state,c
 10598                           
 10599                           ;i2c1.c: 472: }
 10600                           ;i2c1.c: 473: }
 10601  001C06  0012               	return	
 10602  001C08                     i2l406:
 10603                           
 10604                           ;i2c1.c: 474: else
 10605                           ;i2c1.c: 475: {
 10606                           ;i2c1.c: 477: SSPBUF = *pi2c_buf_ptr++;
 10607  001C08  C0DA  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 10608  001C0C  C0DB  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 10609  001C10  50DF               	movf	indf2,w,c
 10610  001C12  6EC9               	movwf	4041,c	;volatile
 10611  001C14  0100               	movlb	0	; () banked
 10612  001C16  4BDA               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 10613  001C18  2BDB               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;i2c1.c: 478: }
 10617                           ;i2c1.c: 479: }
 10618                           ;i2c1.c: 480: break;
 10619                           
 10620                           ; BSR set to: 0
 10621  001C1A  0012               	return	
 10622  001C1C                     i2l410:
 10623                           
 10624                           ;i2c1.c: 485: if(SSPCON2bits.ACKSTAT)
 10625  001C1C  ACC5               	btfss	4037,6,c	;volatile
 10626  001C1E  D006               	goto	i2l411
 10627                           
 10628                           ;i2c1.c: 486: {
 10629                           ;i2c1.c: 489: i2c1_object.i2cErrors++;
 10630  001C20  2A27               	incf	_i2c1_object+6,f,c
 10631                           
 10632                           ;i2c1.c: 492: I2C1_Stop(I2C1_MESSAGE_ADDRESS_NO_ACK);
 10633  001C22  0E04               	movlw	4
 10634  001C24  ECAC  F017         	call	_I2C1_Stop
 10635                           
 10636                           ;i2c1.c: 495: SSPCON2bits.ACKSTAT = 0;
 10637  001C28  9CC5               	bcf	4037,6,c	;volatile
 10638                           
 10639                           ;i2c1.c: 496: }
 10640  001C2A  0012               	return	
 10641  001C2C                     i2l411:
 10642                           
 10643                           ;i2c1.c: 497: else
 10644                           ;i2c1.c: 498: {
 10645                           ;i2c1.c: 499: SSPCON2bits.RCEN = 1;
 10646  001C2C  86C5               	bsf	4037,3,c	;volatile
 10647                           
 10648                           ;i2c1.c: 500: i2c1_state = S_MASTER_ACK_RCV_DATA;
 10649  001C2E  0E08               	movlw	8
 10650  001C30  6E34               	movwf	_i2c1_state,c
 10651                           
 10652                           ;i2c1.c: 501: }
 10653                           ;i2c1.c: 502: break;
 10654  001C32  0012               	return	
 10655  001C34                     
 10656                           ;i2c1.c: 509: i2c1_state = S_MASTER_ACK_RCV_DATA;
 10657  001C34  0E08               	movlw	8
 10658  001C36  6E34               	movwf	_i2c1_state,c
 10659                           
 10660                           ;i2c1.c: 512: SSPCON2bits.RCEN = 1;
 10661  001C38  86C5               	bsf	4037,3,c	;volatile
 10662                           
 10663                           ;i2c1.c: 514: break;
 10664  001C3A  0012               	return	
 10665  001C3C                     
 10666                           ;i2c1.c: 519: *pi2c_buf_ptr++ = SSPBUF;
 10667  001C3C  C0DA  FFD9         	movff	I2C1_ISR@pi2c_buf_ptr,fsr2l
 10668  001C40  C0DB  FFDA         	movff	I2C1_ISR@pi2c_buf_ptr+1,fsr2h
 10669  001C44  CFC9 FFDF          	movff	4041,indf2	;volatile
 10670  001C48  0100               	movlb	0	; () banked
 10671  001C4A  4BDA               	infsnz	I2C1_ISR@pi2c_buf_ptr& (0+255),f,b
 10672  001C4C  2BDB               	incf	(I2C1_ISR@pi2c_buf_ptr+1)& (0+255),f,b
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;i2c1.c: 522: if(--i2c_bytes_left)
 10676  001C4E  0E01               	movlw	1
 10677  001C50  5E32               	subwf	I2C1_ISR@i2c_bytes_left,f,c
 10678  001C52  B4D8               	btfsc	status,2,c
 10679  001C54  D004               	goto	i2l415
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;i2c1.c: 523: {
 10683                           ;i2c1.c: 529: SSPCON2bits.ACKDT = 0;
 10684  001C56  9AC5               	bcf	4037,5,c	;volatile
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;i2c1.c: 532: i2c1_state = S_MASTER_RCV_DATA;
 10688  001C58  0E06               	movlw	6
 10689  001C5A  6E34               	movwf	_i2c1_state,c
 10690                           
 10691                           ;i2c1.c: 533: }
 10692  001C5C  D003               	goto	i2l416
 10693  001C5E                     i2l415:
 10694                           
 10695                           ; BSR set to: 0
 10696                           ;i2c1.c: 534: else
 10697                           ;i2c1.c: 535: {
 10698                           ;i2c1.c: 539: SSPCON2bits.ACKDT = 1;
 10699  001C5E  8AC5               	bsf	4037,5,c	;volatile
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;i2c1.c: 541: I2C1_FunctionComplete();
 10703  001C60  EC61  F017         	call	_I2C1_FunctionComplete	;wreg free
 10704  001C64                     i2l416:
 10705                           
 10706                           ;i2c1.c: 542: }
 10707                           ;i2c1.c: 545: SSPCON2bits.ACKEN = 1;
 10708  001C64  88C5               	bsf	4037,4,c	;volatile
 10709                           
 10710                           ;i2c1.c: 546: break;
 10711  001C66  0012               	return	
 10712  001C68                     
 10713                           ;i2c1.c: 549: case S_MASTER_SEND_STOP:
 10714                           ;i2c1.c: 552: I2C1_Stop(I2C1_MESSAGE_COMPLETE);
 10715  001C68  0E00               	movlw	0
 10716  001C6A  ECAC  F017         	call	_I2C1_Stop
 10717                           
 10718                           ;i2c1.c: 553: break;
 10719  001C6E  0012               	return	
 10720  001C70                     
 10721                           ;i2c1.c: 559: i2c1_object.i2cErrors++;
 10722  001C70  2A27               	incf	_i2c1_object+6,f,c
 10723                           
 10724                           ;i2c1.c: 560: I2C1_Stop(I2C1_LOST_STATE);
 10725  001C72  0E06               	movlw	6
 10726  001C74  ECAC  F017         	call	_I2C1_Stop
 10727                           
 10728                           ;i2c1.c: 563: }
 10729                           
 10730                           ;i2c1.c: 561: break;
 10731  001C78  0012               	return	
 10732  001C7A                     i2l380:
 10733  001C7A  5034               	movf	_i2c1_state,w,c
 10734                           
 10735                           ; Switch size 1, requested type "space"
 10736                           ; Number of cases is 11, Range of values is 0 to 11
 10737                           ; switch strategies available:
 10738                           ; Name         Instructions Cycles
 10739                           ; simple_byte           34    18 (average)
 10740                           ;	Chosen strategy is simple_byte
 10741  001C7C  0A00               	xorlw	0	; case 0
 10742  001C7E  B4D8               	btfsc	status,2,c
 10743  001C80  D719               	goto	i2l381
 10744  001C82  0A01               	xorlw	1	; case 1
 10745  001C84  B4D8               	btfsc	status,2,c
 10746  001C86  D747               	goto	i2l386
 10747  001C88  0A03               	xorlw	3	; case 2
 10748  001C8A  B4D8               	btfsc	status,2,c
 10749  001C8C  D77C               	goto	i2l395
 10750  001C8E  0A01               	xorlw	1	; case 3
 10751  001C90  B4D8               	btfsc	status,2,c
 10752  001C92  D7A0               	goto	i2l403
 10753  001C94  0A07               	xorlw	7	; case 4
 10754  001C96  B4D8               	btfsc	status,2,c
 10755  001C98  D7E7               	goto	i2l417
 10756  001C9A  0A01               	xorlw	1	; case 5
 10757  001C9C  B4D8               	btfsc	status,2,c
 10758  001C9E  D7BE               	goto	i2l410
 10759  001CA0  0A03               	xorlw	3	; case 6
 10760  001CA2  B4D8               	btfsc	status,2,c
 10761  001CA4  D7C7               	goto	i2l413
 10762  001CA6  0A01               	xorlw	1	; case 7
 10763  001CA8  B4D8               	btfsc	status,2,c
 10764  001CAA  D7DE               	goto	i2l417
 10765  001CAC  0A0F               	xorlw	15	; case 8
 10766  001CAE  B4D8               	btfsc	status,2,c
 10767  001CB0  D7C5               	goto	i2l414
 10768  001CB2  0A02               	xorlw	2	; case 10
 10769  001CB4  B4D8               	btfsc	status,2,c
 10770  001CB6  D733               	goto	i2l387
 10771  001CB8  0A01               	xorlw	1	; case 11
 10772  001CBA  B4D8               	btfsc	status,2,c
 10773  001CBC  D746               	goto	i2l392
 10774  001CBE  D7D8               	goto	i2l419
 10775  001CC0                     __end_of_I2C1_ISR:
 10776                           	opt stack 0
 10777                           tosu	equ	0xFFF
 10778                           tosh	equ	0xFFE
 10779                           tosl	equ	0xFFD
 10780                           pclatu	equ	0xFFB
 10781                           pclath	equ	0xFFA
 10782                           tblptru	equ	0xFF8
 10783                           tblptrh	equ	0xFF7
 10784                           tblptrl	equ	0xFF6
 10785                           tablat	equ	0xFF5
 10786                           prodh	equ	0xFF4
 10787                           prodl	equ	0xFF3
 10788                           intcon	equ	0xFF2
 10789                           intcon2	equ	0xFF1
 10790                           intcon3	equ	0xFF0
 10791                           postinc0	equ	0xFEE
 10792                           fsr0h	equ	0xFEA
 10793                           fsr0l	equ	0xFE9
 10794                           wreg	equ	0xFE8
 10795                           fsr1h	equ	0xFE2
 10796                           fsr1l	equ	0xFE1
 10797                           indf2	equ	0xFDF
 10798                           postinc2	equ	0xFDE
 10799                           postdec2	equ	0xFDD
 10800                           fsr2h	equ	0xFDA
 10801                           fsr2l	equ	0xFD9
 10802                           status	equ	0xFD8
 10803                           
 10804 ;; *************** function _I2C1_Stop *****************
 10805 ;; Defined at:
 10806 ;;		line 584 in file "i2c1.c"
 10807 ;; Parameters:    Size  Location     Type
 10808 ;;  completion_c    1    wreg     enum E4587
 10809 ;; Auto vars:     Size  Location     Type
 10810 ;;  completion_c    1    0[COMRAM] enum E4587
 10811 ;; Return value:  Size  Location     Type
 10812 ;;                  1    wreg      void 
 10813 ;; Registers used:
 10814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10815 ;; Tracked objects:
 10816 ;;		On entry : 0/0
 10817 ;;		On exit  : 0/0
 10818 ;;		Unchanged: 0/0
 10819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10820 ;;      Params:         0       0       0       0       0       0       0       0       0
 10821 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10822 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10823 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10824 ;;Total ram usage:        0 bytes
 10825 ;; Hardware stack levels used:    1
 10826 ;; This function calls:
 10827 ;;		Nothing
 10828 ;; This function is called by:
 10829 ;;		_I2C1_ISR
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           	psect	text57
 10834  002F58                     __ptext57:
 10835                           	opt stack 0
 10836  002F58                     _I2C1_Stop:
 10837                           	opt stack 23
 10838                           
 10839                           ;i2c1.c: 587: SSPCON2bits.PEN = 1;
 10840                           
 10841                           ;incstack = 0
 10842  002F58  84C5               	bsf	4037,2,c	;volatile
 10843                           
 10844                           ;i2c1.c: 594: }
 10845                           ;i2c1.c: 597: i2c1_state = S_MASTER_IDLE;
 10846  002F5A  0E00               	movlw	0
 10847  002F5C  6E34               	movwf	_i2c1_state,c
 10848  002F5E  0012               	return		;funcret
 10849  002F60                     __end_of_I2C1_Stop:
 10850                           	opt stack 0
 10851                           tosu	equ	0xFFF
 10852                           tosh	equ	0xFFE
 10853                           tosl	equ	0xFFD
 10854                           pclatu	equ	0xFFB
 10855                           pclath	equ	0xFFA
 10856                           tblptru	equ	0xFF8
 10857                           tblptrh	equ	0xFF7
 10858                           tblptrl	equ	0xFF6
 10859                           tablat	equ	0xFF5
 10860                           prodh	equ	0xFF4
 10861                           prodl	equ	0xFF3
 10862                           intcon	equ	0xFF2
 10863                           intcon2	equ	0xFF1
 10864                           intcon3	equ	0xFF0
 10865                           postinc0	equ	0xFEE
 10866                           fsr0h	equ	0xFEA
 10867                           fsr0l	equ	0xFE9
 10868                           wreg	equ	0xFE8
 10869                           fsr1h	equ	0xFE2
 10870                           fsr1l	equ	0xFE1
 10871                           indf2	equ	0xFDF
 10872                           postinc2	equ	0xFDE
 10873                           postdec2	equ	0xFDD
 10874                           fsr2h	equ	0xFDA
 10875                           fsr2l	equ	0xFD9
 10876                           status	equ	0xFD8
 10877                           
 10878 ;; *************** function _I2C1_FunctionComplete *****************
 10879 ;; Defined at:
 10880 ;;		line 566 in file "i2c1.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;		None
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;		None
 10885 ;; Return value:  Size  Location     Type
 10886 ;;                  1    wreg      void 
 10887 ;; Registers used:
 10888 ;;		wreg, status,2, status,0
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10894 ;;      Params:         0       0       0       0       0       0       0       0       0
 10895 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10896 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10897 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10898 ;;Total ram usage:        0 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; This function calls:
 10901 ;;		Nothing
 10902 ;; This function is called by:
 10903 ;;		_I2C1_ISR
 10904 ;; This function uses a non-reentrant model
 10905 ;;
 10906                           
 10907                           	psect	text58
 10908  002EC2                     __ptext58:
 10909                           	opt stack 0
 10910  002EC2                     _I2C1_FunctionComplete:
 10911                           	opt stack 23
 10912                           
 10913                           ;i2c1.c: 570: p_i2c1_trb_current++;
 10914                           
 10915                           ;incstack = 0
 10916  002EC2  0E06               	movlw	6
 10917  002EC4  262E               	addwf	_p_i2c1_trb_current,f,c
 10918  002EC6  0E00               	movlw	0
 10919  002EC8  222F               	addwfc	_p_i2c1_trb_current+1,f,c
 10920                           
 10921                           ;i2c1.c: 573: if(--i2c1_trb_count == 0)
 10922  002ECA  2E33               	decfsz	_i2c1_trb_count,f,c
 10923  002ECC  D003               	goto	i2l422
 10924                           
 10925                           ;i2c1.c: 574: {
 10926                           ;i2c1.c: 575: i2c1_state = S_MASTER_SEND_STOP;
 10927  002ECE  0E04               	movlw	4
 10928  002ED0  6E34               	movwf	_i2c1_state,c
 10929                           
 10930                           ;i2c1.c: 576: }
 10931  002ED2  0012               	return	
 10932  002ED4                     i2l422:
 10933                           
 10934                           ;i2c1.c: 577: else
 10935                           ;i2c1.c: 578: {
 10936                           ;i2c1.c: 579: i2c1_state = S_MASTER_RESTART;
 10937  002ED4  0E01               	movlw	1
 10938  002ED6  6E34               	movwf	_i2c1_state,c
 10939  002ED8  0012               	return	
 10940  002EDA                     __end_of_I2C1_FunctionComplete:
 10941                           	opt stack 0
 10942                           tosu	equ	0xFFF
 10943                           tosh	equ	0xFFE
 10944                           tosl	equ	0xFFD
 10945                           pclatu	equ	0xFFB
 10946                           pclath	equ	0xFFA
 10947                           tblptru	equ	0xFF8
 10948                           tblptrh	equ	0xFF7
 10949                           tblptrl	equ	0xFF6
 10950                           tablat	equ	0xFF5
 10951                           prodh	equ	0xFF4
 10952                           prodl	equ	0xFF3
 10953                           intcon	equ	0xFF2
 10954                           intcon2	equ	0xFF1
 10955                           intcon3	equ	0xFF0
 10956                           postinc0	equ	0xFEE
 10957                           fsr0h	equ	0xFEA
 10958                           fsr0l	equ	0xFE9
 10959                           wreg	equ	0xFE8
 10960                           fsr1h	equ	0xFE2
 10961                           fsr1l	equ	0xFE1
 10962                           indf2	equ	0xFDF
 10963                           postinc2	equ	0xFDE
 10964                           postdec2	equ	0xFDD
 10965                           fsr2h	equ	0xFDA
 10966                           fsr2l	equ	0xFD9
 10967                           status	equ	0xFD8
 10968                           
 10969 ;; *************** function _I2C1_BusCollisionISR *****************
 10970 ;; Defined at:
 10971 ;;		line 731 in file "i2c1.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;		None
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;		None
 10976 ;; Return value:  Size  Location     Type
 10977 ;;                  1    wreg      void 
 10978 ;; Registers used:
 10979 ;;		None
 10980 ;; Tracked objects:
 10981 ;;		On entry : 0/0
 10982 ;;		On exit  : 0/0
 10983 ;;		Unchanged: 0/0
 10984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10985 ;;      Params:         0       0       0       0       0       0       0       0       0
 10986 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10987 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10988 ;;      Totals:         0       0       0       0       0       0       0       0       0
 10989 ;;Total ram usage:        0 bytes
 10990 ;; Hardware stack levels used:    1
 10991 ;; This function calls:
 10992 ;;		Nothing
 10993 ;; This function is called by:
 10994 ;;		_INTERRUPT_InterruptManager
 10995 ;; This function uses a non-reentrant model
 10996 ;;
 10997                           
 10998                           	psect	text59
 10999  002F80                     __ptext59:
 11000                           	opt stack 0
 11001  002F80                     _I2C1_BusCollisionISR:
 11002                           	opt stack 24
 11003                           
 11004                           ;incstack = 0
 11005  002F80  0012               	return		;funcret
 11006  002F82                     __end_of_I2C1_BusCollisionISR:
 11007                           	opt stack 0
 11008                           tosu	equ	0xFFF
 11009                           tosh	equ	0xFFE
 11010                           tosl	equ	0xFFD
 11011                           pclatu	equ	0xFFB
 11012                           pclath	equ	0xFFA
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           prodh	equ	0xFF4
 11018                           prodl	equ	0xFF3
 11019                           intcon	equ	0xFF2
 11020                           intcon2	equ	0xFF1
 11021                           intcon3	equ	0xFF0
 11022                           postinc0	equ	0xFEE
 11023                           fsr0h	equ	0xFEA
 11024                           fsr0l	equ	0xFE9
 11025                           wreg	equ	0xFE8
 11026                           fsr1h	equ	0xFE2
 11027                           fsr1l	equ	0xFE1
 11028                           indf2	equ	0xFDF
 11029                           postinc2	equ	0xFDE
 11030                           postdec2	equ	0xFDD
 11031                           fsr2h	equ	0xFDA
 11032                           fsr2l	equ	0xFD9
 11033                           status	equ	0xFD8
 11034                           
 11035 ;; *************** function _EUSART1_Transmit_ISR *****************
 11036 ;; Defined at:
 11037 ;;		line 149 in file "eusart1.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;		None
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;		None
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0
 11052 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11053 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11054 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11055 ;;Total ram usage:        0 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; This function calls:
 11058 ;;		Nothing
 11059 ;; This function is called by:
 11060 ;;		_INTERRUPT_InterruptManager
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text60
 11065  002DF6                     __ptext60:
 11066                           	opt stack 0
 11067  002DF6                     _EUSART1_Transmit_ISR:
 11068                           	opt stack 24
 11069                           
 11070                           ;eusart1.c: 153: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 11071                           
 11072                           ;incstack = 0
 11073  002DF6  0E08               	movlw	8
 11074  002DF8  6037               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
 11075  002DFA  D012               	goto	i2l298
 11076                           
 11077                           ;eusart1.c: 154: {
 11078                           ;eusart1.c: 155: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 11079  002DFC  5038               	movf	_eusart1TxTail,w,c
 11080  002DFE  0D01               	mullw	1
 11081  002E00  0ECF               	movlw	low _eusart1TxBuffer
 11082  002E02  24F3               	addwf	prodl,w,c
 11083  002E04  6ED9               	movwf	fsr2l,c
 11084  002E06  0E00               	movlw	high _eusart1TxBuffer
 11085  002E08  20F4               	addwfc	prodh,w,c
 11086  002E0A  6EDA               	movwf	fsr2h,c
 11087  002E0C  50DF               	movf	indf2,w,c
 11088  002E0E  6EAD               	movwf	4013,c	;volatile
 11089  002E10  2A38               	incf	_eusart1TxTail,f,c
 11090                           
 11091                           ;eusart1.c: 156: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 11092  002E12  0E07               	movlw	7
 11093  002E14  6438               	cpfsgt	_eusart1TxTail,c
 11094  002E16  D002               	goto	i2l299
 11095                           
 11096                           ;eusart1.c: 157: {
 11097                           ;eusart1.c: 158: eusart1TxTail = 0;
 11098  002E18  0E00               	movlw	0
 11099  002E1A  6E38               	movwf	_eusart1TxTail,c
 11100  002E1C                     i2l299:
 11101                           
 11102                           ;eusart1.c: 159: }
 11103                           ;eusart1.c: 160: eusart1TxBufferRemaining++;
 11104  002E1C  2A37               	incf	_eusart1TxBufferRemaining,f,c	;volatile
 11105                           
 11106                           ;eusart1.c: 161: }
 11107  002E1E  0012               	return	
 11108  002E20                     i2l298:
 11109                           
 11110                           ;eusart1.c: 162: else
 11111                           ;eusart1.c: 163: {
 11112                           ;eusart1.c: 164: PIE1bits.TX1IE = 0;
 11113  002E20  989D               	bcf	3997,4,c	;volatile
 11114  002E22  0012               	return	
 11115  002E24                     __end_of_EUSART1_Transmit_ISR:
 11116                           	opt stack 0
 11117                           tosu	equ	0xFFF
 11118                           tosh	equ	0xFFE
 11119                           tosl	equ	0xFFD
 11120                           pclatu	equ	0xFFB
 11121                           pclath	equ	0xFFA
 11122                           tblptru	equ	0xFF8
 11123                           tblptrh	equ	0xFF7
 11124                           tblptrl	equ	0xFF6
 11125                           tablat	equ	0xFF5
 11126                           prodh	equ	0xFF4
 11127                           prodl	equ	0xFF3
 11128                           intcon	equ	0xFF2
 11129                           intcon2	equ	0xFF1
 11130                           intcon3	equ	0xFF0
 11131                           postinc0	equ	0xFEE
 11132                           fsr0h	equ	0xFEA
 11133                           fsr0l	equ	0xFE9
 11134                           wreg	equ	0xFE8
 11135                           fsr1h	equ	0xFE2
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           fsr2h	equ	0xFDA
 11141                           fsr2l	equ	0xFD9
 11142                           status	equ	0xFD8
 11143                           
 11144 ;; *************** function _EUSART1_Receive_ISR *****************
 11145 ;; Defined at:
 11146 ;;		line 168 in file "eusart1.c"
 11147 ;; Parameters:    Size  Location     Type
 11148 ;;		None
 11149 ;; Auto vars:     Size  Location     Type
 11150 ;;		None
 11151 ;; Return value:  Size  Location     Type
 11152 ;;                  1    wreg      void 
 11153 ;; Registers used:
 11154 ;;		None
 11155 ;; Tracked objects:
 11156 ;;		On entry : 0/0
 11157 ;;		On exit  : 0/0
 11158 ;;		Unchanged: 0/0
 11159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11160 ;;      Params:         0       0       0       0       0       0       0       0       0
 11161 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11162 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11163 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11164 ;;Total ram usage:        0 bytes
 11165 ;; Hardware stack levels used:    1
 11166 ;; This function calls:
 11167 ;;		Nothing
 11168 ;; This function is called by:
 11169 ;;		_INTERRUPT_InterruptManager
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           	psect	text61
 11174  002F36                     __ptext61:
 11175                           	opt stack 0
 11176  002F36                     _EUSART1_Receive_ISR:
 11177                           	opt stack 24
 11178                           
 11179                           ;eusart1.c: 173: if(1 == RCSTA1bits.OERR)
 11180                           
 11181                           ;incstack = 0
 11182  002F36  A2AB               	btfss	4011,1,c	;volatile
 11183  002F38  0012               	return	
 11184                           
 11185                           ;eusart1.c: 174: {
 11186                           ;eusart1.c: 177: RCSTA1bits.SPEN = 0;
 11187  002F3A  9EAB               	bcf	4011,7,c	;volatile
 11188                           
 11189                           ;eusart1.c: 178: RCSTA1bits.SPEN = 1;
 11190  002F3C  8EAB               	bsf	4011,7,c	;volatile
 11191  002F3E  0012               	return	
 11192  002F40                     __end_of_EUSART1_Receive_ISR:
 11193                           	opt stack 0
 11194                           tosu	equ	0xFFF
 11195                           tosh	equ	0xFFE
 11196                           tosl	equ	0xFFD
 11197                           pclatu	equ	0xFFB
 11198                           pclath	equ	0xFFA
 11199                           tblptru	equ	0xFF8
 11200                           tblptrh	equ	0xFF7
 11201                           tblptrl	equ	0xFF6
 11202                           tablat	equ	0xFF5
 11203                           prodh	equ	0xFF4
 11204                           prodl	equ	0xFF3
 11205                           intcon	equ	0xFF2
 11206                           intcon2	equ	0xFF1
 11207                           intcon3	equ	0xFF0
 11208                           postinc0	equ	0xFEE
 11209                           fsr0h	equ	0xFEA
 11210                           fsr0l	equ	0xFE9
 11211                           wreg	equ	0xFE8
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           fsr2h	equ	0xFDA
 11218                           fsr2l	equ	0xFD9
 11219                           status	equ	0xFD8
 11220                           
 11221 ;; *************** function _ADC_ISR *****************
 11222 ;; Defined at:
 11223 ;;		line 132 in file "adc.c"
 11224 ;; Parameters:    Size  Location     Type
 11225 ;;		None
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;		None
 11228 ;; Return value:  Size  Location     Type
 11229 ;;                  1    wreg      void 
 11230 ;; Registers used:
 11231 ;;		None
 11232 ;; Tracked objects:
 11233 ;;		On entry : 0/0
 11234 ;;		On exit  : 0/0
 11235 ;;		Unchanged: 0/0
 11236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11237 ;;      Params:         0       0       0       0       0       0       0       0       0
 11238 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11239 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11240 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11241 ;;Total ram usage:        0 bytes
 11242 ;; Hardware stack levels used:    1
 11243 ;; This function calls:
 11244 ;;		Nothing
 11245 ;; This function is called by:
 11246 ;;		_INTERRUPT_InterruptManager
 11247 ;; This function uses a non-reentrant model
 11248 ;;
 11249                           
 11250                           	psect	text62
 11251  002F82                     __ptext62:
 11252                           	opt stack 0
 11253  002F82                     _ADC_ISR:
 11254                           	opt stack 24
 11255                           
 11256                           ;incstack = 0
 11257  002F82  0012               	return		;funcret
 11258  002F84                     __end_of_ADC_ISR:
 11259                           	opt stack 0
 11260                           tosu	equ	0xFFF
 11261                           tosh	equ	0xFFE
 11262                           tosl	equ	0xFFD
 11263                           pclatu	equ	0xFFB
 11264                           pclath	equ	0xFFA
 11265                           tblptru	equ	0xFF8
 11266                           tblptrh	equ	0xFF7
 11267                           tblptrl	equ	0xFF6
 11268                           tablat	equ	0xFF5
 11269                           prodh	equ	0xFF4
 11270                           prodl	equ	0xFF3
 11271                           intcon	equ	0xFF2
 11272                           intcon2	equ	0xFF1
 11273                           intcon3	equ	0xFF0
 11274                           postinc0	equ	0xFEE
 11275                           fsr0h	equ	0xFEA
 11276                           fsr0l	equ	0xFE9
 11277                           wreg	equ	0xFE8
 11278                           fsr1h	equ	0xFE2
 11279                           fsr1l	equ	0xFE1
 11280                           indf2	equ	0xFDF
 11281                           postinc2	equ	0xFDE
 11282                           postdec2	equ	0xFDD
 11283                           fsr2h	equ	0xFDA
 11284                           fsr2l	equ	0xFD9
 11285                           status	equ	0xFD8
 11286                           tosu	equ	0xFFF
 11287                           tosh	equ	0xFFE
 11288                           tosl	equ	0xFFD
 11289                           pclatu	equ	0xFFB
 11290                           pclath	equ	0xFFA
 11291                           tblptru	equ	0xFF8
 11292                           tblptrh	equ	0xFF7
 11293                           tblptrl	equ	0xFF6
 11294                           tablat	equ	0xFF5
 11295                           prodh	equ	0xFF4
 11296                           prodl	equ	0xFF3
 11297                           intcon	equ	0xFF2
 11298                           intcon2	equ	0xFF1
 11299                           intcon3	equ	0xFF0
 11300                           postinc0	equ	0xFEE
 11301                           fsr0h	equ	0xFEA
 11302                           fsr0l	equ	0xFE9
 11303                           wreg	equ	0xFE8
 11304                           fsr1h	equ	0xFE2
 11305                           fsr1l	equ	0xFE1
 11306                           indf2	equ	0xFDF
 11307                           postinc2	equ	0xFDE
 11308                           postdec2	equ	0xFDD
 11309                           fsr2h	equ	0xFDA
 11310                           fsr2l	equ	0xFD9
 11311                           status	equ	0xFD8
 11312                           
 11313                           	psect	text63
 11314  000000                     __ptext63:
 11315                           	opt stack 0
 11316                           tosu	equ	0xFFF
 11317                           tosh	equ	0xFFE
 11318                           tosl	equ	0xFFD
 11319                           pclatu	equ	0xFFB
 11320                           pclath	equ	0xFFA
 11321                           tblptru	equ	0xFF8
 11322                           tblptrh	equ	0xFF7
 11323                           tblptrl	equ	0xFF6
 11324                           tablat	equ	0xFF5
 11325                           prodh	equ	0xFF4
 11326                           prodl	equ	0xFF3
 11327                           intcon	equ	0xFF2
 11328                           intcon2	equ	0xFF1
 11329                           intcon3	equ	0xFF0
 11330                           postinc0	equ	0xFEE
 11331                           fsr0h	equ	0xFEA
 11332                           fsr0l	equ	0xFE9
 11333                           wreg	equ	0xFE8
 11334                           fsr1h	equ	0xFE2
 11335                           fsr1l	equ	0xFE1
 11336                           indf2	equ	0xFDF
 11337                           postinc2	equ	0xFDE
 11338                           postdec2	equ	0xFDD
 11339                           fsr2h	equ	0xFDA
 11340                           fsr2l	equ	0xFD9
 11341                           status	equ	0xFD8
 11342                           
 11343                           	psect	rparam
 11344  0000                     tosu	equ	0xFFF
 11345                           tosh	equ	0xFFE
 11346                           tosl	equ	0xFFD
 11347                           pclatu	equ	0xFFB
 11348                           pclath	equ	0xFFA
 11349                           tblptru	equ	0xFF8
 11350                           tblptrh	equ	0xFF7
 11351                           tblptrl	equ	0xFF6
 11352                           tablat	equ	0xFF5
 11353                           prodh	equ	0xFF4
 11354                           prodl	equ	0xFF3
 11355                           intcon	equ	0xFF2
 11356                           intcon2	equ	0xFF1
 11357                           intcon3	equ	0xFF0
 11358                           postinc0	equ	0xFEE
 11359                           fsr0h	equ	0xFEA
 11360                           fsr0l	equ	0xFE9
 11361                           wreg	equ	0xFE8
 11362                           fsr1h	equ	0xFE2
 11363                           fsr1l	equ	0xFE1
 11364                           indf2	equ	0xFDF
 11365                           postinc2	equ	0xFDE
 11366                           postdec2	equ	0xFDD
 11367                           fsr2h	equ	0xFDA
 11368                           fsr2l	equ	0xFD9
 11369                           status	equ	0xFD8
 11370                           
 11371                           	psect	temp
 11372  000040                     btemp:
 11373                           	opt stack 0
 11374  000040                     	ds	1
 11375  0000                     int$flags	set	btemp
 11376  0000                     wtemp6	set	btemp+1
 11377                           tosu	equ	0xFFF
 11378                           tosh	equ	0xFFE
 11379                           tosl	equ	0xFFD
 11380                           pclatu	equ	0xFFB
 11381                           pclath	equ	0xFFA
 11382                           tblptru	equ	0xFF8
 11383                           tblptrh	equ	0xFF7
 11384                           tblptrl	equ	0xFF6
 11385                           tablat	equ	0xFF5
 11386                           prodh	equ	0xFF4
 11387                           prodl	equ	0xFF3
 11388                           intcon	equ	0xFF2
 11389                           intcon2	equ	0xFF1
 11390                           intcon3	equ	0xFF0
 11391                           postinc0	equ	0xFEE
 11392                           fsr0h	equ	0xFEA
 11393                           fsr0l	equ	0xFE9
 11394                           wreg	equ	0xFE8
 11395                           fsr1h	equ	0xFE2
 11396                           fsr1l	equ	0xFE1
 11397                           indf2	equ	0xFDF
 11398                           postinc2	equ	0xFDE
 11399                           postdec2	equ	0xFDD
 11400                           fsr2h	equ	0xFDA
 11401                           fsr2l	equ	0xFD9
 11402                           status	equ	0xFD8


Data Sizes:
    Strings     23
    Constant    118
    Data        0
    BSS         123
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     32      63
    BANK0           160    111     153
    BANK1           256      0      50
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    i2c1_tr_queue.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_tr_queue.pTrFlag	PTR enum E4587 size(2) Largest target is 0

    i2c1_tr_queue.ptrb_list	PTR struct . size(2) Largest target is 0
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 10
		 -> main@dist(BANK0[10]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR3_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 

    I2C1_MasterWriteTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_MasterReadTRBBuild@ptrb.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list.pbuffer	PTR unsigned char  size(2) Largest target is 0

    i2c1_object.pTrTail.pTrFlag	PTR enum E4587 size(2) Largest target is 0

    i2c1_object.pTrTail.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    F4936.pbuffer	PTR unsigned char  size(2) Largest target is 0

    F4931.pbuffer	PTR unsigned char  size(2) Largest target is 0

    I2C1_ISR@pi2c_buf_ptr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    p_i2c1_trb_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_trb_current	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), NULL(NULL[0]), 

    i2c1_object.pTrHead.pTrFlag	PTR enum E4587 size(2) Largest target is 0

    i2c1_object.pTrHead.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    S896$pbuffer	PTR unsigned char  size(2) Largest target is 0

    p_i2c1_current.pbuffer	PTR unsigned char  size(2) Largest target is 0

    S908$pTrFlag	PTR enum E4587 size(2) Largest target is 0

    p_i2c1_current.pTrFlag	PTR enum E4587 size(2) Largest target is 0

    S908$ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current.ptrb_list	PTR struct . size(2) Largest target is 6
		 -> I2C1_MasterRead@trBlock(BANK0[6]), I2C1_MasterWrite@trBlock(BANK0[6]), 

    p_i2c1_current	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), NULL(NULL[0]), 

    S919$pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrHead	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    S919$pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    i2c1_object.pTrTail	PTR struct . size(2) Largest target is 7
		 -> i2c1_tr_queue(BANK0[6]), 

    putsXLCD@buffer	PTR unsigned char  size(2) Largest target is 10
		 -> main@dist(BANK0[10]), 

    putrsXLCD@buffer	PTR const unsigned char  size(2) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_SetDDRamAddr
    _sprintf->___llmod
    _sprintf->___lltoft
    _sprintf->_isdigit
    ___ftsub->___lltoft
    _putsXLCD->_WriteDataXLCD
    _putrsXLCD->_WriteDataXLCD
    _XLCD_Initialize->_SetDDRamAddr
    _XLCD_Initialize->_WriteCmdXLCD
    _OpenXLCD->_Delay10KTCYx
    _OpenXLCD->_DelayPORXLCD
    _OpenXLCD->_SetDDRamAddr
    _OpenXLCD->_WriteCmdXLCD

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_PIN_MANAGER_INT0
    _PIN_MANAGER_INT0->___lwtoft
    ___lwtoft->i2___ftpack

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _XLCD_Initialize->_OpenXLCD
    _OpenXLCD->_SetDDRamAddr
    _TMR0_Initialize->_TMR0_WriteTimer

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                12    12      0   60416
                                             99 BANK0     12    12      0
                           _BusyXLCD
                  _SYSTEM_Initialize
                       _SetDDRamAddr
                          _putrsXLCD
                           _putsXLCD
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             44    37      7   59336
                                             63 BANK0     36    29      7
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   14223
                                             35 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      99
                                             31 COMRAM     1     1      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   13944
                                             35 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    3292
                                             14 BANK0      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5936
                                             20 BANK0     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2053
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     634
                                              0 BANK0     15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     853
                                              0 BANK0     12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2980
                                             31 COMRAM     1     1      0
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     772
                                             31 COMRAM     1     1      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     601
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             42 BANK0     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4929
                                             57 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    4513
                                             45 BANK0     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2788
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     155
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     738
                                              0 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (1) _putsXLCD                                             2     0      2     217
                                              0 BANK0      2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (1) _putrsXLCD                                            2     0      2     217
                                              0 BANK0      2     0      2
                           _BusyXLCD
                      _WriteDataXLCD
 ---------------------------------------------------------------------------------
 (2) _WriteDataXLCD                                        1     1      0      62
                                             31 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     462
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _XLCD_Initialize
 ---------------------------------------------------------------------------------
 (2) _XLCD_Initialize                                      0     0      0     310
                           _BusyXLCD
                           _OpenXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (3) _OpenXLCD                                             1     1      0     186
                                              3 BANK0      1     1      0
                           _BusyXLCD
                       _Delay10KTCYx
                       _DelayPORXLCD
                       _SetDDRamAddr
                       _WriteCmdXLCD
 ---------------------------------------------------------------------------------
 (3) _WriteCmdXLCD                                         1     1      0      62
                                             31 COMRAM     1     1      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (1) _SetDDRamAddr                                         4     4      0      62
                                             31 COMRAM     1     1      0
                                              0 BANK0      3     3      0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (4) _DelayPORXLCD                                         1     1      0       0
                                             31 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Delay10KTCYx                                         2     2      0      31
                                             31 COMRAM     1     1      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BusyXLCD                                             0     0      0       0
                      _DelayFor18TCY
 ---------------------------------------------------------------------------------
 (3) _DelayFor18TCY                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0     152
                    _TMR0_StartTimer
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_WriteTimer                                      2     0      2     152
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                          19    19      0     453
                                             12 COMRAM    19    19      0
                            _ADC_ISR
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
               _I2C1_BusCollisionISR
                           _I2C1_ISR
                         _MEMORY_ISR
                   _PIN_MANAGER_INT0
                   _PIN_MANAGER_INT1
                   _PIN_MANAGER_INT2
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR2_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR3_ISR                                             0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR3_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR2_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                    _TMR0_Reload8bit
 ---------------------------------------------------------------------------------
 (8) _TMR0_Reload8bit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_INT2                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_INT1                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_INT0                                     1     1      0     452
                                             11 COMRAM     1     1      0
                 _TMR0_Read8bitTimer
                     _TMR0_StopTimer
                _TMR0_Write8bitTimer
                           ___lwtoft
                  i2_TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (8) i2_TMR0_StartTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) ___lwtoft                                             3     0      3     407
                                              8 COMRAM     3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___ftpack                                           8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (8) _TMR0_Write8bitTimer                                  1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR0_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR0_Read8bitTimer                                   1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_ISR                                             2     2      0       0
                                              0 COMRAM     2     2      0
              _I2C1_FunctionComplete
                          _I2C1_Stop
 ---------------------------------------------------------------------------------
 (8) _I2C1_Stop                                            1     1      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C1_FunctionComplete                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C1_BusCollisionISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _ADC_ISR                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _BusyXLCD
     _DelayFor18TCY
   _SYSTEM_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_StartTimer
       _TMR0_WriteTimer
     _XLCD_Initialize
       _BusyXLCD
         _DelayFor18TCY
       _OpenXLCD
         _BusyXLCD
           _DelayFor18TCY
         _Delay10KTCYx
         _DelayPORXLCD
         _SetDDRamAddr
           _DelayFor18TCY
         _WriteCmdXLCD
           _DelayFor18TCY
       _SetDDRamAddr
         _DelayFor18TCY
       _WriteCmdXLCD
         _DelayFor18TCY
   _SetDDRamAddr
     _DelayFor18TCY
   _putrsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _putsXLCD
     _BusyXLCD
       _DelayFor18TCY
     _WriteDataXLCD
       _DelayFor18TCY
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _INTERRUPT_InterruptManager (ROOT)
   _ADC_ISR
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _I2C1_BusCollisionISR
   _I2C1_ISR
     _I2C1_FunctionComplete
     _I2C1_Stop
   _MEMORY_ISR
   _PIN_MANAGER_INT0
     _TMR0_Read8bitTimer
     _TMR0_StopTimer
     _TMR0_Write8bitTimer
     ___lwtoft
       i2___ftpack
     i2_TMR0_StartTimer
   _PIN_MANAGER_INT1
   _PIN_MANAGER_INT2
   _PIN_MANAGER_IOC
   _TMR0_ISR
     _TMR0_Reload8bit
   _TMR1_ISR
   _TMR2_ISR
   _TMR3_ISR
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      32       7       19.5%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6F      99       5       95.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     20      3F       1       67.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     10A      20        0.0%
DATA                 0      0     10A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Thu Sep 30 12:38:54 2021

             _eusart1TxBufferRemaining 0037                                      _t 00DE  
                          _SSPSTATbits 000FC7                                     l41 2CB6  
                                   l71 28EE                                     l80 291E  
                                   l65 28D2                                     l74 28FE  
                                   l83 292E                                     l92 2D22  
                                   l77 290E                                     l93 2D02  
                         ___awdiv@sign 006B                            __CFG_BOR$ON 000000  
                  ___wmul@multiplicand 0070                            __CFG_BORV$3 000000  
                           i2___ftpack 27EA                        _timer0ReloadVal 002C  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                         ___ftadd@exp1 0098                           ___ftadd@exp2 0097  
                          __CFG_LVP$ON 000000                           ___ftadd@sign 0096  
                          ?_MEMORY_ISR 0001                            __CFG_WDT$ON 000000  
                                  l105 2DB8                                    l106 2D9A  
                                  l612 2744                                    l622 27B2  
                                  l615 275E                                    l617 276E  
                                  l619 277A                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                           __CFG_CPD$OFF 000000  
                      _timer1ReloadVal 002A                        __end_of_ADC_ISR 2F84  
                __size_of_WriteCmdXLCD 003E                           ___awmod@sign 0065  
                                  prod 000FF3                                    tosl 000FFD  
                                  wreg 000FE8                       __end_of_I2C1_ISR 1CC0  
                                 l1011 2C5E                                   l1014 2C6E  
                                 l2000 2D8A                                   l1017 2C7E  
                                 l2010 22E4                                   l2012 238A  
                                 l2021 23DC                                   l2013 2376  
                                 l2006 2B6E                                   l2025 2E44  
                                 l2018 23B6                                   l2019 23A6  
                                 l2051 26BE                                   l2052 26AE  
                                 l2061 2A0A                                   l2062 29FC  
                                 l2055 2718                                   l2056 272A  
                                 l2072 2A8A                                   l1600 092E  
                                 l2065 2A54                                   l2073 2A7C  
                                 l1601 08E8                                   l2066 2A64  
                                 l1610 0FD8                                   l1611 099A  
                      _timer3ReloadVal 0028                                   l1612 09E0  
                                 l1604 095A                                   l1622 0C04  
                                 l1614 0A92                                   l1615 0B02  
                                 l1607 0954                                   l1640 0E38  
                                 l1608 0980                                   l1641 0E68  
                                 l1633 0DDA                                   l1617 0B30  
                                 l1642 0FA2                                   l1634 0D40  
                                 l1618 0B76                                   l1651 1056  
                                 l1643 0EBA                                   l1619 0C62  
                                 l1900 24AA                                   l1580 16FA  
                                 l1652 1088                                   l1636 0E02  
                                 l1628 0CC8                                   l1645 0FCA  
                                 l1637 0DE8                                   l1830 2662  
                                 l1822 25DE                                   l1590 12F8  
                                 l1646 0FB0                                   l1831 2676  
                                 l1823 25F4                                   l1583 17EA  
                                 l1591 1482                                   l1639 0E34  
                                 l1904 24D0                                   l1648 0FFE  
                                 l1905 24EC                                   l1825 261E  
                                 l1593 1554                                   l1649 1026  
                                 l1826 2612                                   l1842 29B6  
                                 l1586 131E                                   l1931 18F2  
                                 l1843 29C4                                   l1835 295C  
                                 l1587 1226                                   l1932 18FC  
                                 l1924 18A8                                   l1844 29D8  
                                 l1836 296C                                   l1933 197E  
                                 l1861 1E84                                   l1829 2654  
                                 l1597 089E                                   l6102 25BE  
                                 l1950 19FC                                   l1838 298C  
                                 l1598 08B6                                   l1951 1A26  
                                 l1863 1EAA                                   l1839 2980  
                                 l1599 0944                                   l1856 2EAC  
                                 l1952 1A74                                   l1928 18E2  
                                 l1864 1EFE                                   l1873 1FCA  
                                 l1865 1F52                                   l1938 1970  
                                 l1874 1FBA                                   l1947 19C6  
                                 l1939 1962                                   l1867 1F9E  
                                 l1971 1E16                                   l1948 19B8  
                                 l1868 1F8A                                   l1972 1E02  
                                 l1893 242A                                   l1965 1CFA  
                                 l1982 253A                                   l1894 241C  
                                 l1983 257A                                   l1967 1D34  
                                 l1991 21C0                                   l1896 247A  
                                 l1968 1D88                                   l1992 220E  
                                 l1897 245A                                   l1977 1E42  
                                 l1969 1DCC                                   l1993 222C  
                                 l1978 1E32                                   l1899 24B8  
                                 l1995 224C                                   l1996 226A  
                                 l7036 1082                                   l1989 2186  
                                 l6926 0BD6                                   l6918 0B76  
                                 l6946 0CCE                                   l6974 0DE8  
                                 STR_1 0877                                   STR_2 0883  
                                 _IPEN 007E87                                   u6031 2162  
                                 u4520 23C0                                   u6120 2624  
                                 u6051 219C                                   u4461 22C0  
                                 u4480 230A                                   u6410 1E4C  
                                 u6331 1CD6                                   u6180 2992  
                                 u4485 2300                                   u7037 2772  
                                 u6351 1D10                                   u7047 27DA  
                                 u5720 24C6                                   u7057 2F0A  
                                 u7067 2EB2                                   u7077 2F42  
                                 u5821 1848                                   u5750 28DC  
                                 u6550 26C4                                   u5831 1866  
                                 u5680 2408                                   u5920 1934  
                                 u6480 1FD4                                   u6800 0BD6  
                                 u6720 0A26                                   u5665 2B0A  
                                 u5860 189A                                   u6580 2A10  
                                 u6725 0A1A                                   u5960 198A  
                                 u6840 0D14                                   u6760 0B46  
                                 u5890 18D4                                   u6770 0B8C  
                                 u5990 19D2                                   u6870 0E16  
                                 u6880 0E2C                                   u6970 10A6  
                                 _TMR2 000FCC                                   _TMR3 000FB2  
                                 _main 273C                           ___ftpack@arg 0060  
                         ___ftpack@exp 0063                        _TMR0_StartTimer 2F66  
                                 fsr0h 000FEA                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   fsr0l 000FE9  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   btemp 0040  
               __size_of_WriteDataXLCD 003E                                   prodh 000FF4  
                                 prodl 000FF3                                   start 000E  
                        __CFG_IESO$OFF 000000                           _sprintf$3834 00AC  
                        __CFG_MCLRE$ON 000000                           ___ftmul@cntr 0081  
                         ___param_bank 000000                           ___ftmul@sign 0082  
                         ___fttol@exp1 0098                           ___fttol@lval 0094  
                         _WriteCmdXLCD 2C16                __end_of_TMR0_Initialize 2E8C  
                           _i2c1_state 0034           __size_of_TMR0_Write8bitTimer 0008  
                        __CFG_PLLDIV$1 000000         __size_of_OSCILLATOR_Initialize 000A  
        __end_of_OSCILLATOR_Initialize 2F36                         __CFG_CCP2MX$ON 000000  
                        ?_SetDDRamAddr 0001                                  ?_main 0001  
                      __end_of___awdiv 2680                      __end_of_I2C1_Stop 2F60  
                                _EEADR 000FA9                        __end_of___ftadd 1A9A  
                      __end_of___awmod 29E2                        __end_of___ftneg 2D98  
                      __end_of___lldiv 273C                        __end_of___ftmul 22AA  
                                _T0CON 000FD5                        ___awdiv@divisor 0068  
                                _T1CON 000FCD                        __end_of___llmod 2A76  
                      __end_of___ftsub 2B98                        __end_of___fttol 23EE  
                                _T2CON 000FCA                                  _T3CON 000FB1  
                                i2l401 1BCE                                  i2l410 1C1C  
                                i2l411 1C2C                                  i2l403 1BD4  
                                i2l404 1BE4                                  i2l413 1C34  
                      _TMR0_WriteTimer 2F14                                  i2l422 2ED4  
                                i2l414 1C3C                                  i2l406 1C08  
                                i2l415 1C5E                                  i2l407 1C00  
                                i2l416 1C64                                  i2l417 1C68  
                                i2l419 1C70                                  i2l380 1C7A  
                                i2l381 1AB4                                  i2l390 1B44  
                                i2l550 2076                                  i2l542 203E  
                                i2l383 1AFE                                  i2l392 1B4A  
                                i2l384 1B0E                                  i2l560 20C0  
                                i2l552 2084                                  i2l544 204C  
                                i2l393 1B58                                  i2l298 2E20  
                                i2l386 1B16                                  i2l570 2100  
                                i2l562 20CE                                  i2l554 2092  
                                i2l546 205A                                  i2l299 2E1C  
                                i2l395 1B86                                  i2l387 1B1E  
                                i2l388 1B2C                                  i2l564 20DC  
                                i2l556 20A0                                  i2l548 2068  
                                i2l397 1BC0                                  i2l566 20E6  
                                i2l558 20B2                                  i2l568 20F4  
                                i2l777 2BAA                        ___awdiv@counter 006A  
                                _TMR0H 000FD7                                  _TMR1H 000FCF  
                                _TMR0L 000FD6                                  _TMR1L 000FCE  
                                _TMR3H 000FB3                                  _TMR3L 000FB2  
                                _PORTB 000F81                                  _PORTD 000F83  
                        __CFG_USBDIV$1 000000                                  _TRISD 000F95  
                __size_of_Delay10KTCYx 001A                          __CFG_PWRT$OFF 000000  
         __end_of_I2C1_BusCollisionISR 2F82                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                          __CFG_WRT2$OFF 000000  
                        __CFG_WRT3$OFF 000000                           ___lltoft@exp 0020  
                 _EUSART1_Transmit_ISR 2DF6                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                     __end_of_TMR0_ISR 2F2C                       __end_of_TMR1_ISR 2F78  
                     __end_of_TMR2_ISR 2F76                          __CFG_WRTB$OFF 000000  
                     __end_of_TMR3_ISR 2DF6                          __CFG_WRTC$OFF 000000  
                        __CFG_WRTD$OFF 000000                         __CFG_EBTRB$OFF 000000  
       ??_TMR3_DefaultInterruptHandler 0001                __end_of_PIN_MANAGER_IOC 2F7A  
                      __end_of_dpowers 0829                __end_of_TMR0_Reload8bit 2F66  
                                _scale 10B4                        __end_of_isdigit 2E4C  
                        ___ftpack@sign 0064                                  pclath 000FFA  
                                tablat 000FF5                                  status 000FD8  
                                wtemp6 0041                        __end_of_sprintf 10B4  
                       __CFG_ICPRT$OFF 000000                    __size_of_MEMORY_ISR 0002  
                      __initialization 2D36                           __end_of_main 27EA  
                     __end_of_BusyXLCD 2CCA                           _Delay10KTCYx 2EA8  
                __size_of_DelayPORXLCD 0010                              ??_ADC_ISR 0001  
          ?_INTERRUPT_InterruptManager 0001                         ??_SetDDRamAddr 0060  
                          ?i2___ftpack 0001                       __end_of_OpenXLCD 2940  
                          _i2c1_object 0021                                 ??_main 00C3  
                        ___fttol@sign1 0093                          __activetblptr 000002  
                        _WriteDataXLCD 2BD8                  _TMR3_InterruptHandler 00E0  
                 __size_of__tdiv_to_l_ 019E                  ?_EUSART1_Transmit_ISR 0001  
              __end_of_TMR0_StartTimer 2F6A                                 _ADCON0 000FC2  
                               _ADCON2 000FC0                         _Timer0_Counter 003B  
                     ___llmod@dividend 0060                                 ?_scale 0083  
                               _ADRESH 000FC4                                 _ADRESL 000FC3  
                               _EEDATA 000FA8                                 _CCPR2H 000FBC  
                               _CCPR2L 000FBB                                 _EECON2 000FA7  
                     ___awdiv@dividend 0066               __size_of_XLCD_Initialize 003C  
                     __end_of___ftpack 24FA                       __end_of___lltoft 2AEE  
                               i2l1900 2864                                 i2l1893 2812  
                               i2l1894 2808                                 i2l1896 2846  
                               i2l1897 2830                                 i2l1899 286E  
                               i2l5436 1AFE                                 _TABLAT 000FF5  
                     __end_of___lwtoft 2E70                                 _RCSTA1 000FAB  
                               _OSCCON 000FD3                                 _SPBRG1 000FAF  
                               _SPBRGH 000FB0                                 _SSPADD 000FC8  
                               _SSPBUF 000FC9                                 _TXREG1 000FAD  
                               _TXSTA1 000FAC                           _DelayPORXLCD 2F04  
                       __CFG_XINST$OFF 000000                       __end_of__powers_ 0850  
                       _p_i2c1_current 00DC                                 ___ftge 24FA  
                               ___wmul 2CCA                              ??___awdiv 0020  
                            ??___ftadd 0093                         __CFG_STVREN$ON 000000  
                            ??___awmod 0020                __end_of_TMR0_WriteTimer 2F20  
                            ??___ftneg 0020                              ??___lldiv 0020  
                            ??___ftmul 007A                              ??___llmod 0020  
                            ??___ftsub 0021                              ??___fttol 008E  
            TMR0_Read8bitTimer@readVal 0001               __end_of_PIN_MANAGER_INT0 2BD8  
             __end_of_PIN_MANAGER_INT1 2F7E               __end_of_PIN_MANAGER_INT2 2F7C  
                     ?_TMR0_Initialize 0001                                 _fround 157A  
                            ?_I2C1_ISR 0001                                 clear_0 2D3C  
                               clear_1 2D48                                 clear_2 2D54  
                     ___awdiv@quotient 006C                        ___awmod@divisor 0062  
                      ___awmod@counter 0064                         ?_WriteDataXLCD 0001  
           __end_of_TMR0_Read8bitTimer 2F58                  ___ftmul@f3_as_product 007E  
                            ??_isdigit 0020                           __mediumconst 0000  
                               tblptrh 000FF7                                 tblptrl 000FF6  
                               tblptru 000FF8                       __end_of_putsXLCD 2DC8  
                     ?_PIN_MANAGER_IOC 0001                              ??_sprintf 00A6  
                     ?_TMR0_Reload8bit 0001                        _eusart1RxBuffer 0100  
        __size_of_INTERRUPT_Initialize 001C                        _eusart1TxBuffer 00CF  
                    _SYSTEM_Initialize 2EDA                             __accesstop 0060  
              __end_of__initialization 2D5A                        __CFG_PBADEN$OFF 000000  
                           ___ftadd@f1 008D                             ___ftadd@f2 0090  
                  __size_ofi2___ftpack 00AE                             ___ftge@ff1 0060  
                           ___ftge@ff2 0063                     ?_SYSTEM_Initialize 0001  
                        ___rparam_used 000001                             ___ftneg@f1 0060  
                       _i2c1_trb_count 0033                         i2___ftpack@arg 0001  
                       i2___ftpack@exp 0004                             ___ftmul@f1 0074  
                           ___ftmul@f2 0077                  _I2C1_FunctionComplete 2EC2  
                 _I2C1_BusCollisionISR 2F80                             ___ftsub@f1 0099  
                           ___ftsub@f2 009C                             ___fttol@f1 008A  
                       __pcstackCOMRAM 0001                    _timer0ReloadVal8bit 0030  
                  ??_SYSTEM_Initialize 0021                              ?_TMR0_ISR 0001  
                            ?_TMR1_ISR 0001                              ?_TMR2_ISR 0001  
                           ___lltoft@c 0068                              ?_TMR3_ISR 0001  
                        __end_of_scale 157A                             ??_I2C1_ISR 0001  
                           ___lwtoft@c 0009                           ??_MEMORY_ISR 0001  
               ??_EUSART1_Transmit_ISR 0001                             __div_to_l_ 1E5E  
          __end_of_EUSART1_Receive_ISR 2F40                        __div_to_l_@exp1 006B  
                     ?_TMR0_StartTimer 0001                        __div_to_l_@cntr 006A  
                              ??_scale 0020              __end_of_SYSTEM_Initialize 2EF0  
               __size_of_DelayFor18TCY 0008                        __div_to_l_@quot 0066  
                        _eusart1RxHead 00E6                          _eusart1TxHead 0039  
                        _eusart1RxTail 0036                             __pbssBANK0 00CF  
                           __pbssBANK1 0100                          _eusart1TxTail 0038  
                            ?_BusyXLCD 0001                    _TMR0_Write8bitTimer 2F48  
                      WriteCmdXLCD@cmd 0020                   __end_of_SetDDRamAddr 2B4C  
                            ?_OpenXLCD 0001                        WriteSWSPI@input 003D  
                        __div_to_l_@f1 0060                          __div_to_l_@f2 0063  
                    ??_XLCD_Initialize 0021                     __end_of_MEMORY_ISR 2F80  
                ?_I2C1_BusCollisionISR 0001                                ?___ftge 0060  
                    WriteDataXLCD@data 0020                __size_of_TMR0_StopTimer 0004  
                              ?___wmul 006E                             ??_TMR0_ISR 0001  
                           ??_TMR1_ISR 0001                             ??_TMR2_ISR 0001  
                           ??_TMR3_ISR 0001                       ?_TMR0_WriteTimer 0060  
                              _CCP2CON 000FBA                   ?_TMR0_Write8bitTimer 0001  
                      ??_WriteDataXLCD 0020                                _ADC_ISR 2F82  
                              _BAUDCON 000FB8                                ?_fround 0083  
                            ?___ftpack 0060                              ?___lltoft 0068  
                            ?___lwtoft 0009                              _I2C1_Stop 2F58  
                              _TBLPTRH 000FF7                                _TBLPTRL 000FF6  
                              _TBLPTRU 000FF8                                _OSCTUNE 000F9B  
                              _SSPCON1 000FC6                                _SSPCON2 000FC5  
                              _SSPSTAT 000FC7                     __size_of_putrsXLCD 0036  
                           ??_BusyXLCD 0020                        __CFG_VREGEN$OFF 000000  
                           ??_OpenXLCD 0021                 ?_I2C1_FunctionComplete 0001  
                          _Timer0_Flag 003A                      __end_of__npowers_ 0877  
                              __Hparam 0000                             _scale$3833 0086  
                              __Lparam 0000                     _p_i2c1_trb_current 002E  
                      __size_of___ftge 00C8                                ___awdiv 25C2  
                        _DelayFor18TCY 2F40                                ___ftadd 1832  
                              ___awmod 2940                                ___ftneg 2D68  
                              ___lldiv 2680                        __size_of___wmul 0036  
                              ___ftmul 214C                                ___llmod 29E2  
                              ___ftsub 2B4C                                ___fttol 22AA  
                            ?_putsXLCD 0060                  ??_TMR0_Write8bitTimer 0001  
                         __psmallconst 0800                                __pcinit 2D36  
                         ??i2___ftpack 0006                             ??___ftpack 0065  
                      putrsXLCD@buffer 0060                        __size_of_fround 02B8  
                              __ramtop 0800                             ??___lltoft 006C  
                              __ptext0 273C                                __ptext1 0890  
                              __ptext2 10B4                                __ptext3 2E24  
                              __ptext4 157A                                __ptext5 2CCA  
                              __ptext6 214C                                __ptext7 2940  
                              __ptext8 25C2                                __ptext9 1CC0  
                           ??___lwtoft 000C                              _T0CONbits 000FD5  
                            _T1CONbits 000FCD                            ?__div_to_l_ 0060  
                              _dpowers 0801                  _OSCILLATOR_Initialize 2F2C  
                            _T2CONbits 000FCA                                _isdigit 2E24  
                            _T3CONbits 000FB1                       ___awmod@dividend 0060  
             ??_PIN_MANAGER_Initialize 0020                             ?_I2C1_Stop 0001  
           __size_of_SYSTEM_Initialize 0016                                _sprintf 0890  
                 I2C1_ISR@pi2c_buf_ptr 00DA                         __pintcode_body 1FE6  
                 end_of_initialization 2D5A            TMR0_Write8bitTimer@timerVal 0001  
                        __Lmediumconst 0000                                int_func 1FE6  
                   __end_ofi2___ftpack 2898                 ??_I2C1_BusCollisionISR 0001  
                      ___lldiv@divisor 0064                        ___lldiv@counter 006C  
                       ?_DelayFor18TCY 0001                                postdec2 000FDD  
                              postinc0 000FEE                                postinc2 000FDE  
                           ??_putsXLCD 0021                         __tdiv_to_l_@f1 0060  
                       __tdiv_to_l_@f2 0063                      ?_PIN_MANAGER_INT0 0001  
                    ?_PIN_MANAGER_INT1 0001                      ?_PIN_MANAGER_INT2 0001  
                    __end_of_putrsXLCD 2D36                          ??__tdiv_to_l_ 0066  
                            _PORTBbits 000F81                     ??_PIN_MANAGER_INT0 000C  
                   ??_PIN_MANAGER_INT1 0001                     ??_PIN_MANAGER_INT2 0001  
                    __size_of_I2C1_ISR 0226                              _TRISBbits 000F93  
                            _TRISDbits 000F95                  __size_of_SetDDRamAddr 005E  
    I2C1_ISR@i2c_10bit_address_restart 0031                     _TMR0_Read8bitTimer 2F50  
                      i2___ftpack@sign 0005                    __size_of__div_to_l_ 0188  
                  ?_TMR0_Read8bitTimer 0001                            ___ftmul@exp 007D  
                       _TMR0_StopTimer 2F6E           __end_of_INTERRUPT_Initialize 2EA8  
                       __end_of___ftge 25C2                         __end_of___wmul 2D00  
              I2C1_MasterWrite@trBlock 00ED                      __size_of_TMR0_ISR 000C  
                    __size_of_TMR1_ISR 0002               I2C1_Stop@completion_code 0001  
                    __size_of_TMR2_ISR 0002                      __size_of_TMR3_ISR 002E  
               ?_OSCILLATOR_Initialize 0001                         __end_of_fround 1832  
                         _SetDDRamAddr 2AEE                     SetDDRamAddr@DDaddr 0020  
                 ??_TMR0_Read8bitTimer 0001                    start_initialization 2D36  
                          ??_I2C1_Stop 0001               __size_of_TMR0_Initialize 001C  
      __size_of_PIN_MANAGER_Initialize 0014                    __end_of__tdiv_to_l_ 1E5E  
                      _XLCD_Initialize 2C54                        ___llmod@divisor 0064  
                    __size_of_BusyXLCD 003A                        ___llmod@counter 0020  
             __size_of_PIN_MANAGER_IOC 0002                 __end_of_TMR0_StopTimer 2F72  
             __size_of_TMR0_Reload8bit 0006                        ??_DelayFor18TCY 0020  
                    __size_of_OpenXLCD 00A8                               ??___ftge 0066  
                             ??___wmul 0020                          ?_WriteCmdXLCD 0001  
                     __CFG_LPT1OSC$OFF 000000                               ?_ADC_ISR 0001  
                             ??_fround 0020                          sprintf@tmpval 00B9  
                       _eusart1RxCount 0035                             fround@prec 008C  
                    __size_of___ftpack 010C                      __size_of___lltoft 0078  
                          __pbssCOMRAM 0021                      __size_of___lwtoft 0024  
        __size_of_EUSART1_Transmit_ISR 002E                          __pcstackBANK0 0060  
                        _i2c1_tr_queue 00F3                           _isdigit$3265 0060  
  INTERRUPT_InterruptManager@__portb__ 001F                ??_I2C1_FunctionComplete 0001  
         __size_of_EUSART1_Receive_ISR 000A                            sprintf@flag 00B1  
                          sprintf@fval 00BF                            sprintf@prec 00BD  
             __size_of_TMR0_StartTimer 0004                        ?_TMR0_StopTimer 0001  
                       putsXLCD@buffer 0060                 _PIN_MANAGER_Initialize 2EF0  
                            __pintcode 0008                         ??_WriteCmdXLCD 0020  
                             ?___awdiv 0066                               ?___ftadd 008D  
                             ?___awmod 0060                               ?___ftneg 0060  
                             ?___lldiv 0060                               ?___ftmul 0074  
                             ?___llmod 0060                               ?___ftsub 0099  
                            __npowers_ 0850                               ?___fttol 008A  
                        ?_Delay10KTCYx 0001                               _I2C1_ISR 1A9A  
         ??_INTERRUPT_InterruptManager 000D                            __tdiv_to_l_ 1CC0  
                    __size_of_putsXLCD 0030                              _distancia 00D7  
                __end_of_WriteDataXLCD 2C16                __end_of_XLCD_Initialize 2C90  
                         ??__div_to_l_ 0020                            __smallconst 0800  
                             ?_isdigit 0001               __size_of_TMR0_WriteTimer 000C  
                             ?_sprintf 009F                         __size_of_scale 04C6  
                 _INTERRUPT_Initialize 2E8C                 I2C1_MasterRead@trBlock 00E7  
                    ??_TMR0_Initialize 0020                               _INT0Flag 003C  
                       ___wmul@product 0072                               _LATDbits 000F8C  
                             _IPR1bits 000F9F                               _IPR2bits 000FA2  
                             _PIE1bits 000F9D                               _PIE2bits 000FA0  
                        ?_DelayPORXLCD 0001            __end_of_TMR0_Write8bitTimer 2F50  
                    i2_TMR0_StartTimer 2F6A    __size_of_INTERRUPT_InterruptManager 2144  
                             i2u410_40 2878                               i2u406_40 27FA  
                             _PIR1bits 000F9E                        OpenXLCD@lcdtype 0063  
                   __end_of__div_to_l_ 1FE6                               _PIR2bits 000FA1  
                             i2u484_48 2DE0                       __CFG_WDTPS$32768 000000  
                   ?i2_TMR0_StartTimer 0001                         ??_Delay10KTCYx 0020  
                             _TMR0_ISR 2F20                               _TMR1_ISR 2F76  
                             _TMR2_ISR 2F74                               _TMR3_ISR 2DC8  
                    ??_PIN_MANAGER_IOC 0001                      ??_TMR0_Reload8bit 0001  
                     __size_of_ADC_ISR 0002                             _ADCON0bits 000FC2  
                           _ADCON1bits 000FC1                    ??i2_TMR0_StartTimer 0001  
                    ___wmul@multiplier 006E                              _putrsXLCD 2D00  
                     Delay10KTCYx@unit 0060                            _INTCON2bits 000FF1  
                          _INTCON3bits 000FF0                  ?_INTERRUPT_Initialize 0001  
            __size_of_PIN_MANAGER_INT0 0040              __size_of_PIN_MANAGER_INT1 0002  
            __size_of_PIN_MANAGER_INT2 0002                               _BusyXLCD 2C90  
            __end_ofi2_TMR0_StartTimer 2F6E                         ??_DelayPORXLCD 0020  
                           _EECON1bits 000FA6                               _OpenXLCD 2898  
                             __Hrparam 0000          __size_of_I2C1_BusCollisionISR 0002  
                             __Lrparam 0000                 I2C1_ISR@i2c_bytes_left 0032  
              ??_OSCILLATOR_Initialize 0020                      ??_TMR0_StartTimer 0020  
                     __size_of___awdiv 00BE                       __size_of___ftadd 0268  
                     __size_of___awmod 00A2                       __size_of___ftneg 0030  
                     __size_of___lldiv 00BC                       __size_of___ftmul 015E  
                     __size_of___llmod 0094                       __size_of___ftsub 004C  
                     __size_of___fttol 0144                               ___ftpack 23EE  
                          _fround$3831 0089                            _fround$3832 0086  
                             ___lltoft 2A76                               ___lwtoft 2E4C  
                     ?_XLCD_Initialize 0001                  _TMR1_InterruptHandler 00E4  
                           sprintf@exp 00B7                             sprintf@val 00B3  
                           ?_putrsXLCD 0060                       __size_of_isdigit 0028  
                  I2C1_ISR@i2c_address 003E                               __ptext10 1E5E  
                             __ptext11 2A76                               __ptext20 2D98  
                             __ptext12 29E2                               __ptext21 2D00  
                             __ptext13 2680                               __ptext30 2C90  
                             __ptext22 2BD8                               __ptext14 22AA  
                             __ptext31 2F40                               __ptext23 2EDA  
                             __ptext15 2B4C                               __ptext40 2F72  
                             __ptext32 2E70                               __ptext24 2C54  
                             __ptext16 1832                               __ptext41 2F74  
                             __ptext33 2F14                               __ptext25 2898  
                             __ptext17 23EE                               __ptext50 2E4C  
                             __ptext42 2F76                               __ptext34 2F66  
                             __ptext26 2C16                               __ptext18 2D68  
                             __ptext51 27EA                               __ptext43 2F20  
                             __ptext35 2EF0                               __ptext27 2AEE  
                             __ptext19 24FA                               __ptext60 2DF6  
                             __ptext52 2F48                               __ptext44 2F60  
                             __ptext36 2F2C                               __ptext28 2F04  
                             __ptext61 2F36                               __ptext53 2F6E  
                             __ptext45 2F78                               __ptext37 2E8C  
                             __ptext29 2EA8                               __ptext62 2F82  
                             __ptext54 2F50                               __ptext46 2F7A  
                             __ptext63 0000                               __ptext55 2F7E  
                             __ptext47 2F7C                               __ptext39 2DC8  
                             __ptext56 1A9A                               __ptext48 2B98  
                             __ptext57 2F58                               __ptext49 2F6A  
                             __ptext58 2EC2                               __ptext59 2F80  
                             __powers_ 0829                   __end_of_WriteCmdXLCD 2C54  
                     __size_of_sprintf 0824                TMR0_WriteTimer@timerVal 0060  
                    ??_TMR0_WriteTimer 0020                          __size_of_main 00AE  
                             int$flags 0040                               _putsXLCD 2D98  
   __end_of_INTERRUPT_InterruptManager 214C             _INTERRUPT_InterruptManager 0008  
                             main@dist 00C5   __end_of_TMR3_DefaultInterruptHandler 2F74  
__size_of_TMR3_DefaultInterruptHandler 0002           _TMR3_DefaultInterruptHandler 2F72  
                  _EUSART1_Receive_ISR 2F36                  __CFG_CPUDIV$OSC1_PLL2 000000  
                           _MEMORY_ISR 2F7E                             _INTCONbits 000FF2  
          __size_of_TMR0_Read8bitTimer 0008                               isdigit@c 0061  
               ??_INTERRUPT_Initialize 0020                               scale@scl 0089  
                 __end_of_Delay10KTCYx 2EC2                               intlevel2 0000  
                            sprintf@ap 00AF                       ??_TMR0_StopTimer 0001  
                     __tdiv_to_l_@exp1 006E                              sprintf@sp 009F  
                     __tdiv_to_l_@cntr 006D                       __tdiv_to_l_@quot 0069  
                 ?_EUSART1_Receive_ISR 0001                       ___lldiv@dividend 0060  
              ?_PIN_MANAGER_Initialize 0001             __size_ofi2_TMR0_StartTimer 0004  
       __size_of_I2C1_FunctionComplete 0018                             _RCSTA1bits 000FAB  
        __end_of_I2C1_FunctionComplete 2EDA           __end_of_EUSART1_Transmit_ISR 2E24  
                __end_of_DelayFor18TCY 2F48                           ?__tdiv_to_l_ 0060  
                             sprintf@c 00C2                               sprintf@f 00A1  
                  __CFG_FOSC$INTOSC_HS 000000          ?_TMR3_DefaultInterruptHandler 0001  
                 __end_of_DelayPORXLCD 2F14                            ??_putrsXLCD 0021  
                     ___lldiv@quotient 0068                        _TMR0_Initialize 2E70  
                          _SSPCON1bits 000FC6                            _SSPCON2bits 000FC5  
                     _PIN_MANAGER_INT0 2B98                       _PIN_MANAGER_INT1 2F7C  
                     _PIN_MANAGER_INT2 2F7A                  ??_EUSART1_Receive_ISR 0001  
       __end_of_PIN_MANAGER_Initialize 2F04                     __size_of_I2C1_Stop 0008  
                      _PIN_MANAGER_IOC 2F78                        _TMR0_Reload8bit 2F60  
                _TMR2_InterruptHandler 00E2  
